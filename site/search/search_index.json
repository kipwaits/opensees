{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"gallery/","text":"Gallery .grid.cards>:-webkit-any(ul,ol) { display: contents !important; } ul { list-style-type: disc; margin-block-start: 1em; margin-block-end: 1em; margin-inline-start: 0px; margin-inline-end: 0px; padding-inline-start: 40px; } .grid { grid-gap: .4rem; display: grid !important; grid-template-columns: repeat(auto-fit,minmax(16rem,1fr)); margin: 1em 0; } .grid>.card { text-size-adjust: none; -webkit-font-smoothing: antialiased; font-feature-settings: \"kern\",\"liga\"; color: var(--md-typeset-color); font-family: var(--md-text-font-family); -webkit-print-color-adjust: exact; font-size: .8rem; line-height: 1.6; box-sizing: inherit; grid-gap: .4rem; display: grid; grid-template-columns: repeat(auto-fit,minmax(16rem,1fr)); margin: 1em 0; } .li { text-size-adjust: none; --md-text-font: \"Roboto\"; --md-code-font: \"Roboto Mono\"; -webkit-font-smoothing: antialiased; --md-text-font-family: var(--md-text-font,_),-apple-system,BlinkMacSystemFont,Helvetica,Arial,sans-serif; --md-code-font-family: var(--md-code-font,_),SFMono-Regular,Consolas,Menlo,monospace; font-feature-settings: \"kern\",\"liga\"; color: var(--md-typeset-color); font-family: var(--md-text-font-family); --md-default-fg-color: rgba(0,0,0,.87); --md-default-fg-color--light: rgba(0,0,0,.54); --md-default-fg-color--lighter: rgba(0,0,0,.32); --md-default-fg-color--lightest: rgba(0,0,0,.07); --md-default-bg-color: #fff; --md-default-bg-color--light: hsla(0,0%,100%,.7); --md-default-bg-color--lighter: hsla(0,0%,100%,.3); --md-default-bg-color--lightest: hsla(0,0%,100%,.12); --md-shadow-z1: 0 0.2rem 0.5rem rgba(0,0,0,.05),0 0 0.05rem rgba(0,0,0,.1); --md-shadow-z2: 0 0.2rem 0.5rem rgba(0,0,0,.1),0 0 0.05rem rgba(0,0,0,.25); --md-shadow-z3: 0 0.2rem 0.5rem rgba(0,0,0,.2),0 0 0.05rem rgba(0,0,0,.35); --md-typeset-table-sort-icon: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"m18 21-4-4h3V7h-3l4-4 4 4h-3v10h3M2 19v-2h10v2M2 13v-2h7v2M2 7V5h4v2H2Z\"/></svg>'); --md-typeset-table-sort-icon--asc: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M19 17h3l-4 4-4-4h3V3h2M2 17h10v2H2M6 5v2H2V5m0 6h7v2H2v-2Z\"/></svg>'); --md-typeset-table-sort-icon--desc: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M19 7h3l-4-4-4 4h3v14h2M2 17h10v2H2M6 5v2H2V5m0 6h7v2H2v-2Z\"/></svg>'); --md-toc-icon: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M3 9h14V7H3v2m0 4h14v-2H3v2m0 4h14v-2H3v2m16 0h2v-2h-2v2m0-10v2h2V7h-2m0 6h2v-2h-2v2Z\"/></svg>'); --md-search-result-icon: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h7c-.41-.25-.8-.56-1.14-.9-.33-.33-.61-.7-.86-1.1H6V4h7v5h5v1.18c.71.16 1.39.43 2 .82V8l-6-6m6.31 16.9c1.33-2.11.69-4.9-1.4-6.22-2.11-1.33-4.91-.68-6.22 1.4-1.34 2.11-.69 4.89 1.4 6.22 1.46.93 3.32.93 4.79.02L22 23.39 23.39 22l-3.08-3.1m-3.81.1a2.5 2.5 0 0 1-2.5-2.5 2.5 2.5 0 0 1 2.5-2.5 2.5 2.5 0 0 1 2.5 2.5 2.5 2.5 0 0 1-2.5 2.5Z\"/></svg>'); --md-source-forks-icon: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"M5 3.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0zm0 2.122a2.25 2.25 0 1 0-1.5 0v.878A2.25 2.25 0 0 0 5.75 8.5h1.5v2.128a2.251 2.251 0 1 0 1.5 0V8.5h1.5a2.25 2.25 0 0 0 2.25-2.25v-.878a2.25 2.25 0 1 0-1.5 0v.878a.75.75 0 0 1-.75.75h-4.5A.75.75 0 0 1 5 6.25v-.878zm3.75 7.378a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0zm3-8.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5z\"/></svg>'); --md-source-repositories-icon: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"M2 2.5A2.5 2.5 0 0 1 4.5 0h8.75a.75.75 0 0 1 .75.75v12.5a.75.75 0 0 1-.75.75h-2.5a.75.75 0 1 1 0-1.5h1.75v-2h-8a1 1 0 0 0-.714 1.7.75.75 0 0 1-1.072 1.05A2.495 2.495 0 0 1 2 11.5v-9zm10.5-1V9h-8c-.356 0-.694.074-1 .208V2.5a1 1 0 0 1 1-1h8zM5 12.25v3.25a.25.25 0 0 0 .4.2l1.45-1.087a.25.25 0 0 1 .3 0L8.6 15.7a.25.25 0 0 0 .4-.2v-3.25a.25.25 0 0 0-.25-.25h-3.5a.25.25 0 0 0-.25.25z\"/></svg>'); --md-source-stars-icon: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"M8 .25a.75.75 0 0 1 .673.418l1.882 3.815 4.21.612a.75.75 0 0 1 .416 1.279l-3.046 2.97.719 4.192a.75.75 0 0 1-1.088.791L8 12.347l-3.766 1.98a.75.75 0 0 1-1.088-.79l.72-4.194L.818 6.374a.75.75 0 0 1 .416-1.28l4.21-.611L7.327.668A.75.75 0 0 1 8 .25zm0 2.445L6.615 5.5a.75.75 0 0 1-.564.41l-3.097.45 2.24 2.184a.75.75 0 0 1 .216.664l-.528 3.084 2.769-1.456a.75.75 0 0 1 .698 0l2.77 1.456-.53-3.084a.75.75 0 0 1 .216-.664l2.24-2.183-3.096-.45a.75.75 0 0 1-.564-.41L8 2.694v.001z\"/></svg>'); --md-source-version-icon: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"M2.5 7.775V2.75a.25.25 0 0 1 .25-.25h5.025a.25.25 0 0 1 .177.073l6.25 6.25a.25.25 0 0 1 0 .354l-5.025 5.025a.25.25 0 0 1-.354 0l-6.25-6.25a.25.25 0 0 1-.073-.177zm-1.5 0V2.75C1 1.784 1.784 1 2.75 1h5.025c.464 0 .91.184 1.238.513l6.25 6.25a1.75 1.75 0 0 1 0 2.474l-5.026 5.026a1.75 1.75 0 0 1-2.474 0l-6.25-6.25A1.75 1.75 0 0 1 1 7.775zM6 5a1 1 0 1 0 0 2 1 1 0 0 0 0-2z\"/></svg>'); --md-tag-icon: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"m5.41 21 .71-4h-4l.35-2h4l1.06-6h-4l.35-2h4l.71-4h2l-.71 4h6l.71-4h2l-.71 4h4l-.35 2h-4l-1.06 6h4l-.35 2h-4l-.71 4h-2l.71-4h-6l-.71 4h-2M9.53 9l-1.06 6h6l1.06-6h-6Z\"/></svg>'); --md-tooltip-width: 20rem; --md-version-icon: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 320 512\"><!--! Font Awesome Free 6.1.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) Copyright 2022 Fonticons, Inc.--><path d=\"m310.6 246.6-127.1 128c-7.1 6.3-15.3 9.4-23.5 9.4s-16.38-3.125-22.63-9.375l-127.1-128C.224 237.5-2.516 223.7 2.438 211.8S19.07 192 32 192h255.1c12.94 0 24.62 7.781 29.58 19.75s3.12 25.75-6.08 34.85z\"/></svg>'); --md-footnotes-icon: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M19 7v4H5.83l3.58-3.59L8 6l-6 6 6 6 1.41-1.42L5.83 13H21V7h-2Z\"/></svg>'); --md-details-icon: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M8.59 16.58 13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.42Z\"/></svg>'); --md-tasklist-icon: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M1 12C1 5.925 5.925 1 12 1s11 4.925 11 11-4.925 11-11 11S1 18.075 1 12zm16.28-2.72a.75.75 0 0 0-1.06-1.06l-5.97 5.97-2.47-2.47a.75.75 0 0 0-1.06 1.06l3 3a.75.75 0 0 0 1.06 0l6.5-6.5z\"/></svg>'); --md-tasklist-icon--checked: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M1 12C1 5.925 5.925 1 12 1s11 4.925 11 11-4.925 11-11 11S1 18.075 1 12zm16.28-2.72a.75.75 0 0 0-1.06-1.06l-5.97 5.97-2.47-2.47a.75.75 0 0 0-1.06 1.06l3 3a.75.75 0 0 0 1.06 0l6.5-6.5z\"/></svg>'); --md-accent-fg-color: #526cfe; --md-accent-fg-color--transparent: rgba(82,108,254,.1); --md-accent-bg-color: #fff; --md-accent-bg-color--light: hsla(0,0%,100%,.7); --md-primary-fg-color: #4051b5; --md-primary-fg-color--light: #5d6cc0; --md-primary-fg-color--dark: #303fa1; --md-primary-bg-color: #fff; --md-primary-bg-color--light: hsla(0,0%,100%,.7); --md-code-fg-color: #36464e; --md-code-bg-color: #f5f5f5; --md-code-hl-color: rgba(255,255,0,.5); --md-code-hl-number-color: #d52a2a; --md-code-hl-special-color: #db1457; --md-code-hl-function-color: #a846b9; --md-code-hl-constant-color: #6e59d9; --md-code-hl-keyword-color: #3f6ec6; --md-code-hl-string-color: #1c7d4d; --md-code-hl-name-color: var(--md-code-fg-color); --md-code-hl-operator-color: var(--md-default-fg-color--light); --md-code-hl-punctuation-color: var(--md-default-fg-color--light); --md-code-hl-comment-color: var(--md-default-fg-color--light); --md-code-hl-generic-color: var(--md-default-fg-color--light); --md-code-hl-variable-color: var(--md-default-fg-color--light); --md-typeset-color: var(--md-default-fg-color); --md-typeset-a-color: var(--md-primary-fg-color); --md-typeset-mark-color: rgba(255,255,0,.5); --md-typeset-del-color: rgba(245,80,61,.15); --md-typeset-ins-color: rgba(11,213,112,.15); --md-typeset-kbd-color: #fafafa; --md-typeset-kbd-accent-color: #fff; --md-typeset-kbd-border-color: #b8b8b8; --md-typeset-table-color: rgba(0,0,0,.12); --md-admonition-fg-color: var(--md-default-fg-color); --md-admonition-bg-color: var(--md-default-bg-color); --md-footer-fg-color: #fff; --md-footer-fg-color--light: hsla(0,0%,100%,.7); --md-footer-fg-color--lighter: hsla(0,0%,100%,.3); --md-footer-bg-color: rgba(0,0,0,.87); --md-footer-bg-color--dark: rgba(0,0,0,.32); --md-mermaid-font-family: var(--md-text-font-family),sans-serif; --md-mermaid-edge-color: var(--md-code-fg-color); --md-mermaid-node-bg-color: var(--md-accent-fg-color--transparent); --md-mermaid-node-fg-color: var(--md-accent-fg-color); --md-mermaid-label-bg-color: var(--md-default-bg-color); --md-mermaid-label-fg-color: var(--md-code-fg-color); -webkit-print-color-adjust: exact; font-size: .8rem; line-height: 1.6; list-style-type: disc; box-sizing: inherit; border: .05rem solid var(--md-default-fg-color--lightest); border-radius: .1rem; display: block; margin: 0; padding: .8rem; transition: border .25s,box-shadow .25s; } Basic Structures description here skeletal Components Studies cross-section analysis, uniaxial materials and more. Reference Geotech Soil models and geotechnical modeling techniques Geotech Continua Continuum mechanics. License","title":"Gallery"},{"location":"gallery/geotech/","text":"Geotechnical Examples","title":"Geotechnical Examples"},{"location":"gallery/geotech/02_StaticPile/","text":"Laterally-Loaded Pile Example prepared by: Christopher McGann and Pedro Arduino, University of Washington This article describes the OpenSees implementation of a simple laterally-loaded pile example. The problem is modeled as a beam on a nonlinear Winkler foundation (BNWF), utilizing displacement-based beam elements for the pile and nonlinear spring elements which represent the vertical and lateral response of the surrounding soil. This example considers a static analysis only. Provided with this article are the files needed to execute this analysis in OpenSees; the main input file, staticBNWFpile.tcl three procedures to define the soil constitutive behavior, get_pyParam.tcl , get_tzParam.tcl , and get_qzParam.tcl a file to define the pile section behavior, elasticPileSection.tcl Download them all in a compressed file: staticBNWFanalysis.zip To run this example, the user must download each of the above files and place them in a single directory. Once this has been done, the user can then type \"source staticBNWFpile.tcl\" into the interpreter of the OpenSees.exe application to run the analysis. Representative results are presented in this article to verify the correct implementation of this example. Additionally, the pile response obtained from this analysis is compared to a similar analysis conducted using the commercial program LPile (http://www.ensoftinc.com) to provide verification the results of the OpenSees analysis. Model Description Fig 1. Schematic representation of the BNWF model. The BNWF model simulates the laterally-loaded pile problem using displacement-based beam elements to represent the pile and a series of nonlinear springs to represent the soil. The soil springs are generated using zero-length elements assigned separate uniaxial material objects in the lateral and vertical directions. An idealized schematic of the laterally-loaded pile model is provided in Fig. 1. The pile axis is oriented in the z-coordinate direction, and all of the nodes are initially located on the z-axis (x- and y- coordinates are zero). Node numbering for each set of nodes begins at the bottom of the pile. The model is created with three separate sets of nodes: fixed spring nodes (numbers 1-85 in example) slave spring nodes (numbers 101-185 in example) pile nodes (numbers 201-285 in example) Geometry and Mesh The geometry is rather simple in this example. There is only a single layer of cohesionless soil, and the groundwater table is assumed to be well below the tip of the pile. The pile geometry controls the meshing of the problem. The user can specify the length of the pile head (above the ground surface), L1, and the embedded pile length (below the ground surface), L2. The default values in staticBNWFpile.tcl are L1 = 1 m, and L2 = 20 m. The pile is also assigned a diameter of 1 m. This value is used in the soil constitutive modeling. The mesh is defined by the number of elements specified in the pile. The default value in this example is 84 elements (85 nodes). For the default pile geometry, this results in 80 elements over the embedded length and 4 elements above the ground surface. Note: The input file is only set up to handle up to 100 nodes. Modifications would need to be made to the node numbering scheme to accommodate a larger number of nodes. Spring Nodes The spring nodes are created with three dimensions and three translational degrees-of-freedom. The input file is set up to automatically generate the necessary spring nodes and elements based upon the input geometry (pile head length, $L1 , embedded length, $L2 , and number of pile elements, $nElePile ). Spring nodes are only created over the embedded length of pile. Since zero-length elements are used for the springs, the two sets of nodes share the same set of locations. One set of spring nodes, the fixed-nodes, are initially fixed in all three degrees-of-freedom. The other set of nodes, the slave nodes, are initially fixed in only two degrees-of-freedom, and are later given equal degrees-of-freedom with the pile nodes. Spring Constitutive Behavior The constitutive behavior of the springs is defined such that the springs oriented in the lateral direction represent p-y springs, and the vertically-oriented springs represent t-z and Q-z springs for the pile shaft and tip, respectively. Three procedures are used to properly define the p-y/t-z/Q-z behavior with depth, get_pyParam.tcl , get_tzParam.tcl , and get_qzParam.tcl Several input soil properties are necessary to define these springs: soil unit weight, $gamma soil internal friction angle, $phi soil shear modulus, $Gsoil The default values are set at $gamma = 17 kN/m 3 , $phi = 36 degrees, and $Gsoil = 150000 kPa. The procedure get_pyParam.tcl , which defines the p-y springs, has several options which must be selected. The first switch, $puSwitch, specifies the variation in ultimate lateral resistance with depth. The default, $puSwitch = 1, uses the recommendations of the American Petroleum Institute (API) (1993). The alternative method is that of Brinch Hansen (1961). The second switch, $kSwitch, specifies the variation in initial stiffness with depth. The default, $kSwitch = 1, specifies a linear variation of initial stiffness with depth (API 1993). The alternative uses a modified version of the API stiffness which varies parabolically with depth after Boulanger et al. (2003). The presence of groundwater can be accounted for in the initial stiffness using the third switch, $gwtSwitch. Default, $gwtSwitch = 1, is for no groundwater. The other procedures, get_tzParam.tcl and get_qzParam.tcl , have no input options in this example. The t-z springs have behavior defined using the work of Mosher (1984) and Kulhawy (1991). The Q-z behavior is based on the work of Meyerhof (1976), Vijayvergiya (1977), and Kulhawy and Mayne (1990). The p-y spring constitutive behavior is obtained using the PySimple1 uniaxial material object. The t-z and Q-z springs are defined using the TzSimple1 and QzSimple1 uniaxial materials, respectively. The main input file is set up to automatically generate the required spring material objects based upon the input geometry and soil properties. Spring Elements Zero-length elements are used for the soil springs using the element zeroLength . These elements connect the fixed and slave spring nodes. The the PySimple1 material objects are incorporated in the x-direction (direction of loading), while the TzSimple1 , and at the pile tip, the QzSimple1 , material objects are incorporated in the z-direction (vertical direction). Pile Nodes The pile nodes are created with three dimensions and six degrees-of-freedom (3 translational, 3 rotational). The input file is set up to automatically generate the necessary pile nodes and elements based upon the input geometry. A linear coordinate-transformation object is specified for the orientation of the pile in this example. With the exemption of the uppermost pile head node, the pile nodes are fixed against translation in the y-direction and rotations about the x- and z- axes. The pile head node, where the load is applied, is separated to allow the user to specify a free-head (no rotational fixity) or fixed-head (full rotational fixity) condition at the loading point. The pile nodes over the embedded length of the pile are use linked with the slave spring nodes using the equalDOF command. The pile nodes are the master nodes in this example. These two sets of nodes share equal degrees-of-freedom in the x- and z- translational directions only. Pile Constitutive Behavior and Elements In this example, the pile is given elastic behavior for simplicity. Instead of using the elasticBeamColumn element, this is done using an elastic section object in conjunction with the displacement-based beam element, dispBeamColumn . This was done to facilitate future incorporation of elastoplastic pile section behavior using fiber section models by the user. The properties of the elastic section for this example are defined in the file, elasticPileSection.tcl . The pile is defined with appropriately computed values for the cross-sectional area and the moments of inertia for its 1 m diameter, and is assigned a modulus of elasticity, E = 25000000, and shear modulus, G = 9615385. Recorders Several recorders are defined for this model. The displacements at the pile nodes in all three translational dof are recorded for use in extracting the displaced shape of the pile. The reaction forces in the p-y springs are recorded for use in visualizing the lateral soil response. The element forces in the pile elements are recorded in order to obtain shear and moment diagrams for the pile. The recorders are set up to only record values at 0.5 second increments of pseudo-time during the analysis to facilitate the use of smaller load steps. This is done with the variable $timeStep. A display recorder is included in the input file to allow the user to visualize the deformation of the pile in \"real time\" during the analysis. The parameters are set up for the orientation of the pile in this example. Loading This example considers a 3500 kN load applied in the positive x-direction at the head of the pile (uppermost pile node). This is accomplished in the model using a plain pattern with optional time-series parameters. The load increases linearly from 0 kN to 3500 kN over a 10 second increment of pseudo-time (between 10 and 20 seconds) and is then held constant after the loading period. Setting up the loading object in this manner allows for more control over the analysis. Analysis The analysis is conducted using the load-controlled integrator with a loading step of 0.05. This value is selected based on the 10 second interval specified in the loading object. 200 steps with a loading step of 0.05 will put the last step exactly at 10 seconds of pseudo-time. 201 steps are used in this example to make sure that the last recorded step is at the full loading magnitude. The variables $startT and $endT are used to print the cpu time needed to complete the analysis in the standard output or the OpenSees interpreter. The remaining analysis commands are well-documented in the OpenSees command manual. Representative Results Fig. 2 Lateral soil response after application of full lateral load. A user can verify their downloaded files by running the main input file, staticBNWFpile.tcl , in OpenSees and comparing the recorded results to some representative results included here. The simplest verification is to use the spring reaction forces recorded in the file reaction.out. A plot of the recorded spring reaction forces vs. depth in the final recorded pseudo-time step (20.05) should create something similar to that shown in Fig. 2. The response is negative from the ground surface to about 7.5 m deep, then transitions to positive until about 13 m deep, has a second smaller negative section, and then is nearly zero near the tip of the pile. This verification plot can be made fairly simply using spreadsheet software. For those who prefer Matlab (http://www.mathworks.com/), the following lines will extract the desired information when pasted into an m-file. % create depth vector depth = linspace(-20,1,85); % load data react = load('reaction.out'); % remove pseudo-time information react(:,1) = []; % create plotting variable (divide by tributary area of pile to get force/length) reactPlot = react(end,:)/0.25; plot(reactPlot,depth) The shear and moment diagram plots in the following section can also be used for verification purposes. Comparison of OpenSees Results with LPile Fig. 3 Comparison of OpenSees and LPile analyses for free-head case. Fig. 4 Comparison of OpenSees and LPile analyses for fixed-head case. The commercial pile analysis program LPile (http://www.ensoftinc.com) is used to verify the results obtained using the OpenSees laterally-loaded pile model. The LPile analysis used the same geometric and constitutive parameters defined in the OpenSees analysis, and two cases were considered: A free-head case where there is no rotational fixity about the y-axis at the pile head A fixed-head case where full rotational fixity is enforced at the pile head. The two analysis methods are compared via the recorded pile and soil responses. Figs. 3 and 4 present these comparisons for the free-head and fixed-head cases, respectively. Shown in these figures are the shear and moment diagrams, displaced pile shapes, and the lateral soil response recorded from each analysis. As shown, the LPile and OpenSees results are fairly similar, especially for the free-head case. The main reason for the differences shown in Figs. 3 and 4 is that the p-y curves used in LPile are not the same as those used in the OpenSees analysis. The LPile curves are defined using the method of Reese et al. (1974), while the backbone of the p-y curves for the PySimple1 uniaxial material approximate the API (1993) recommendations. These two sets of curves are similar, and in fact have identical initial and ultimate responses, however, they vary in form over intermediate displacements. This is shown in Fig. 5, which plots the actual p-y response obtained in the OpenSees simulation alongside the p-y curves used by LPile for several depths. As shown, the hyperbolic tangent curves recommended by the API do not match those used by LPile, especially for displacements between approximately 0.001 and 0.037 m. The force returned by the PySimple1 material object for displacements in this range will therefore be greater than corresponding forces used by LPile. This is confirmed by the soil response comparison plots in Figs. 3 and 4. Where the pile displacements are large, the LPile and OpenSees soil reactions are nearly identical, but as the displacements become smaller with increasing depth, the recorded soil reactions begin to differ. This difference in lateral soil response is the main reason behind the small variability observed in the recorded shear and moment diagrams and displaced shapes. [ Fig. 5 Comparison of p-y curves for LPile and OpenSees analyses.](pyComp.png \u201d Fig. 5 Comparison of p-y curves for LPile and OpenSees analyses.\u201d) Overall, the agreement between the OpenSees and LPile analyses verifies that the BNWF model implemented in OpenSees is capable of returning sensible results for laterally-loaded pile simulations. There are differences between the results, however, these are relatively minor. The OpenSees simulation predicts maximum pile shear, moment, and deflection demands which are similar to those obtained from LPile, and the discrepancies are attributable to known differences between the two analysis methods. References 1. American Petroleum Institute (API) (1987). Recommended Practice for Planning, Designing and Constructing Fixed Offshore Platforms. API Recommended Practice 2A(RP-2A), Washington D.C, 17th edition. 2. Brinch Hansen, J. (1961). \u201cThe ultimate resistance of rigid piles against transversal forces.\u201d Bulletin No. 12, Geoteknisk Institute, Copenhagen, 59. 3. Boulanger, R. W., Kutter, B. L., Brandenberg, S. J., Singh, P., and Chang, D. (2003). Pile Foundations in liquefied and laterally spreading ground during earthquakes: Centrifuge experiments and analyses. Center for Geotechnical Modeling, University of California at Davis, Davis, CA. Rep. UCD/CGM-03/01. 4. Kulhawy, F.H. (1991). \"Drilled shaft foundations.\" Foundation engineering handbook, 2nd Ed., Chap 14, H.-Y. Fang ed., Van Nostrand Reinhold, New York. 5. Kulhawy, F.H. and Mayne, P.W. (1990). Manual on Estimating Soil Properties for Foundation Design. Electrical Power Research Institute. EPRI EL-6800, Project 1493-6 Final Report. 6. Meyerhof G.G. (1976). \"Bearing capacity and settlement of pile foundations.\" J. Geotech. Eng. Div., ASCE, 102(3), 195-228. 7. Mosher, R.L. (1984). \u201cLoad transfer criteria for numerical analysis of axial loaded piles in sand.\u201d U.S. Army Engineering and Waterways Experimental Station, Automatic Data Processing Center, Vicksburg, Miss. 8. Reese, L.C. and Van Impe, W.F. (2001), Single Piles and Pile Groups Under Lateral Loading. A.A. Balkema, Rotterdam, Netherlands. 9. Vijayvergiya, V.N. (1977). \u201cLoad-movement characteristics of piles.\u201d Proc., Ports 77 Conf., ASCE, New York.","title":"Laterally-Loaded Pile"},{"location":"gallery/sections/section_building/","text":"/home/claudio/brace/Scripts/SectionRegions/Tests_2.ipynb","title":"Section building"},{"location":"gallery/sections/section_limits/","text":"Elastic Limits /home/claudio/projects/SectionEccentricity/SectionLimits-3D.ipynb","title":"Elastic Limits"},{"location":"gallery/sections/example_9/","text":"Rectilinear Cross Sections For the case of the uniaxial section, moment-curvature and axial force-deformation curves are defined independently, and numerically. For the case of the fiber sections (steel and RC), uniaxial materials are defined numerically (stress-strain relationship) and are combined into a fiber section where moment-curvature and axial force-deformation characteristics and their interaction are calculated computationally. 2D vs. 3D While this distinction does not affect the section definition itself, it affects the degree-of-freedom associated with moment and curvature in the subsequent analysis. There are two differences between the two models: The space defined with the model command (Defining the model builder, ndm=#dimension ndf=#dofs ) In the 3D model, torsional stiffness needs to be aggregated to the section. Uniaxial Section Notes Flexure and axial behavior are uncoupled in this type of section Fiber Section: AISC Standard W Section Notes Coupled biaxial flexure and axial behavior Fiber Section: Reinforced Concrete Section \u2013 Rectangular Symmetric Section, Unconfined Concrete Notes Coupled biaxial flexure and axial behavior Fiber Section: Reinforced Concrete Section \u2013 Rectangular Symmetric Section, Confined Concrete Core Notes Coupled biaxial flexure and axial behavior Fiber Section: Reinforced Concrete Section \u2013 Rectangular Section Notes Coupled biaxial flexure and axial behavior generic rectangular section Fiber Section: Reinforced Concrete Section \u2013 Circular Section, Confined Core Notes Coupled biaxial flexure and axial behavior generic circular section Fiber Section: Reinforced Concrete Hollow Section \u2013 Symmetric Section, Confined Concrete Notes Coupled biaxial flexure and axial behavior Moment-Curvature Analysis This example introduces the moment-curvature procedures for sections in 2D or 3D space, as built in the previous section. (the only difference between them is the degree-of-freedom corresponding to curvature). The moment-curvature analysis of a section is by creating a zero-length rotational-spring element. This section is subjected to a user-defined constant axial load and to a linearly-increasing moment to a user-defined maximum curvature. 2D Moment-Curvature Analysis Files Ex9.analyze.MomentCurvature2D.tcl MomentCurvature2D.tcl Notes 3D Moment-Curvature Analysis Files Ex9.analyze.MomentCurvature3D.tcl MomentCurvature3D.tcl Run The model and analysis combinations for this example are numerous. The following are an small subset, for demonstration purposes: To run Uniaxial-Section Model, 2D puts \" --------------------------------- 2D Model ---------------\" puts \" a. Uniaxial Section\" source Ex9a.build.UniaxialSection2D.tcl source Ex9.analyze.MomentCurvature2D.tcl To run RC Section: Rectangular, Confined, Symmetric Model, 3D puts \" --------------------------------- 3D Model ---------------\" puts \" d. RC Section: Rectangular, Confined, Symmetric\" source Ex9d.build.RCSection.RectConfinedSymm3D.tcl source Ex9.analyze.MomentCurvature3D.tcl","title":"Rectilinear Cross Sections"},{"location":"library/","text":"Structural Mechanics Library Modeling: Element Types: opensees.FrameElement(type=None, parameters={}, properties={}) opensees.TrussElement(type=None, parameters={}, properties={}) opensees.ShellElement(type=None, parameters={}, properties={}) opensees.BlockElement(type=None, parameters={}, properties={}) Material Types: opensees.UniaxialMaterial(type=None, parameters={}, properties={}) opensees.PlaneStressMaterial(type=None, parameters={}, properties={}) opensees.PlaneStrainMaterial(type=None, parameters={}, properties={}) opensees.PlateFiberMaterial(type=None, parameters={}, properties={}) opensees.MultiaxialMaterial(type=None, parameters={}, properties={}) Section Types: opensees.FiberEulerSection opensees.FiberShearSection opensees.FiberPlateSection","title":"Structural Mechanics Library"},{"location":"library/analysis/","text":"Analysis Capabilities Linear equation solvers, time integration schemes, and solution algorithms are the core of the OpenSees computational framework. The components of a solution strategy are interchangeable, allowing analysts to find sets suited to their particular problem. Eigenvalue Solvers The following methods provide the solution of the generalized eigenvalue problem \\(Kv = MvL\\) Symmetric Arpack \u2013 Arpack solver for symmetric matrices Band Arpack \u2013 Arpack solver for banded matrices","title":"Analysis Capabilities"},{"location":"library/analysis/MomentCurvature/","text":"","title":"MomentCurvature"},{"location":"library/analysis/DirectIntegration/","text":"DirectIntegrationAnalysis class DirectIntegrationAnalysis(model, patterns, strategy) DirectIntegrationAnalysis is used to perform a transient analysis using an incremental approach on the model . The following are the aggregates of such an analysis type: model ( AnalysisModel ) - a container class holding the FE_Element and DOF_Group objects created by the ConstraintHandler object. integrator ( TransientIntegrator ) - an algorithmic class which provides methods which are invoked by the FE_Element to determine their current tangent and residual matrices. That is, this is the class that sets up the system of equations. \\[\\mathbf{M}\\ddot{\\boldsymbol{u}}+\\mathbf{C}\\dot{\\boldsymbol{u}}+\\boldsymbol{p}_{\\sigma}(\\boldsymbol{u})=\\boldsymbol{p}_f(t)\\] It also provides the commit() method which is invoked to set up the appropriate dof response values once the solution algorithm has formed and solved the system of equations. constraints ( ConstraintHandler ) - a class which creates the DOF_Group and FE_Element objects, the type of objects created depending on how the specified constraints in the domain are to be handled. numberer ( DOF_Numberer ) - a class responsible for providing equation numbers to the individual degrees of freedom in each DOF_Group object. system ( LinearSOE ) - a numeric class responsible for the creation and subsequent solution of large systems of linear equations of the form \\(Ax = b\\) , where \\(A\\) is a matrix and \\(x\\) and \\(b\\) are vectors. algorithm ( EquiSolnAlgo ) - an algorithmic class specifying the sequence of operations to be performed in setting up and solving the finite element equation which can be represented by the equation \\(K(\\boldsymbol{u}) \\boldsymbol{u} = P(\\boldsymbol{u})\\) . Transient Integrators Determing the next time step for an analysis including inertial effects is done by the following schemes Newmark \u2013 The two parameter time-stepping method developed by Newmark HHT \u2013 The three parameter Hilbert-Hughes-Taylor time-stepping method Generalized Alpha \u2013 Generalization of the HHT algorithm with improved numerical damping Central Difference \u2013 Approximates velocity and acceleration by centered finite differences of displacement TRBDF2 \u2013 A composite scheme that alternates between the Trapezoidal scheme and a 3 point backward Euler scheme. Explicit difference \u2013 Theory In nonlinear transient finite element problems we seek a solution ( \\(\\boldsymbol{u}\\) , \\(\\dot{\\boldsymbol{u}}\\) , \\(\\ddot{\\boldsymbol{u}}\\) ) to the nonlinear vector equation \\[\\boldsymbol{R}({\\boldsymbol{u}},\\dot{\\boldsymbol{u}}, \\ddot{\\boldsymbol{u}}) = \\boldsymbol{p}_f(t) - \\boldsymbol{p}_{\\mathrm{i}}(\\ddot{\\boldsymbol{u}}) - \\boldsymbol{p}_{\\sigma}({\\boldsymbol{u}}, \\dot{\\boldsymbol{u}}) = \\boldsymbol{0}\\] {#femGenForm} The most widely used technique for solving the transient non-linear finite element equation, equation [femGenForm , is to use an incremental direct integration scheme. In the incremental formulation, a solution to the equation is sought at successive time steps \\(\\Delta t\\) apart. \\[\\boldsymbol{R}({\\boldsymbol{u}}_{n \\Delta t},\\dot{\\boldsymbol{u}}_{n \\Delta t}, \\ddot{\\boldsymbol{u}}_{n \\Delta t}) = \\boldsymbol{p}_f(n \\Delta t) - \\boldsymbol{p}_{\\mathrm{i}}(\\ddot{\\boldsymbol{u}}_{n \\Delta t}) - \\boldsymbol{p}_{\\sigma}({\\boldsymbol{u}}_{n \\Delta t}, \\dot{\\boldsymbol{u}}_{n \\Delta t}) \\] {#fullTimeForm} For each time step, \\(t\\) , the integration schemes provide two operators, \\(\\operatorname{I}_1\\) and \\(\\operatorname{I}_2\\) , to relate the velocity and accelerations at the time step as a function of the displacement at the time step and the response at previous time steps: \\[\\dot {\\boldsymbol{u}}_{t} = {\\I}_1 ({\\boldsymbol{u}}_t, {\\boldsymbol{u}}_{t-\\Delta t}, \\dot {\\boldsymbol{u}}_{t-\\Delta t}, \\ddot {\\boldsymbol{u}}_{t - \\Delta t}, {\\boldsymbol{u}}_{t - 2\\Delta t}, \\dot {\\boldsymbol{u}}_{t - 2 \\Delta t}. ..., ) \\label{I1}\\] \\[\\ddot {\\boldsymbol{u}}_{t} = {\\I}_2 ({\\boldsymbol{u}}_t, {\\boldsymbol{u}}_{t-\\Delta t}, \\dot {\\boldsymbol{u}}_{t-\\Delta t}, \\ddot {\\boldsymbol{u}}_{t - \\Delta t}, {\\boldsymbol{u}}_{t - 2\\Delta t}, \\dot {\\boldsymbol{u}}_{t - 2 \\Delta t}. ..., ) \\label{I2}\\] These allow us to rewrite equation [fullTimeForm , in terms of a single response quantity, typically the displacement: \\[\\boldsymbol{r}({\\boldsymbol{u}}_t) = \\boldsymbol{p}_f(t) - \\boldsymbol{p}_{\\mathrm{i}}(\\ddot{\\boldsymbol{u}}_t) - \\boldsymbol{p}_{\\sigma}({\\boldsymbol{u}}_t, \\dot{\\boldsymbol{u}}_t) \\label{genForm}\\] The solution of this equation is typically obtained using an iterative procedure, i.e. making an initial prediction for \\({\\boldsymbol{u}}_{t}\\) , denoted \\({\\boldsymbol{u}}_{t}^{(0)}\\) a sequence of approximations \\({\\boldsymbol{u}}_{t}^{(i)}\\) , \\(i=1,2, ..\\) is obtained which converges (we hope) to the solution \\({\\boldsymbol{u}}_{t}\\) . The most frequently used iterative schemes, such as Newton-Raphson, modified Newton, and quasi Newton schemes, are based on a Taylor expansion of equation [genForm about \\({\\boldsymbol{u}}_{t}\\) : \\[\\boldsymbol{r}({\\boldsymbol{u}}_{t}) = \\boldsymbol{r}({\\boldsymbol{u}}_{t}^{(i)}) + \\left[ {\\frac{\\partial \\boldsymbol{r}}{\\partial {\\boldsymbol{u}}_t} \\vert}_{{\\boldsymbol{u}}_{t}^{(i)}}\\right] \\left( {\\boldsymbol{u}}_{t} - {\\boldsymbol{u}}_{t}^{(i)} \\right)\\] \\[ \\boldsymbol{r}({\\boldsymbol{u}}_{t}) = \\boldsymbol{p}_f (t) - \\boldsymbol{p}_{\\mathrm{i}} \\left( \\ddot {\\boldsymbol{u}}_{t}^{(i)} \\right) - \\boldsymbol{p}_{\\sigma} \\left( \\dot {\\boldsymbol{u}}_{t}^{(i)}, {\\boldsymbol{u}}_{t}^{(i)} \\right)- \\left[ \\boldsymbol{M}^{(i)} {\\I}_2' + \\boldsymbol{C}^{(i)} {\\I}_1' + \\boldsymbol{K}^{(i)} \\right] \\left( {\\boldsymbol{u}}_{t} - {\\boldsymbol{u}}_{t}^{(i)} \\right) \\label{femGenFormTaylor}\\] To start the iteration scheme, trial values for \\({\\boldsymbol{u}}_{t}\\) , \\(\\dot {\\boldsymbol{u}}_{t}\\) and \\(\\ddot {\\boldsymbol{u}}_{t}\\) are required. These are obtained by assuming \\({\\boldsymbol{u}}_{t}^{(0)} = {\\boldsymbol{u}}_{t-\\Delta t}\\) . The \\(\\dot {\\boldsymbol{u}}_{t}^{(0)}\\) and \\(\\ddot {\\boldsymbol{u}}_{t}^{(0)}\\) can then be obtained from the operators for the integration scheme. Subclasses of TransientIntegrator provide methods informing the FE_Element and DOF_Group objects how to build the tangent and residual matrices and vectors. They also provide the method for updating the response quantities at the DOFs with appropriate values; these values being some function of the solution to the linear system of equations. Implementation #include <analysis/analysis/DirectIntegrationAnalysis.h> class DirectIntegrationAnalysis : public TransientAnalysis ; Constructor and Destructor DirectIntegrationAnalysis :: DirectIntegrationAnalysis ( Domain & the_Domain , ConstraintHandler & theHandler , DOF_Numberer & theNumberer , AnalysisModel & theModel , EquiSolnAlgo & theSolnAlgo , LinearSOE & theLinSOE , TransientIntegrator & theTransientIntegrator , ConvergenceTest * theConvergenceTest , int num_SubLevels , int num_SubSteps ) The constructor is responsible for setting up all links needed by the objects in the aggregation. It invokes setLinks(theDomain) on theModel , setLinks(theDomain,theModel,theIntegrator) on theHandler , setLinks(theModel) on theNumberer , setLinks ( theModel , theSOE ) on theIntegrator and setLinks(theModel,theAnalysis, theIntegrator, theSOE) on theSolnAlgo . Sets theModel and theSysOFEqn to 0 and the Algorithm to the one supplied. ~ DirectIntegrationAnalysis Does nothing. clearAll() must be invoked if the destructor on the objects in the aggregation need to be invoked. Public Methods int analyze ( int steps , double dT ); Invokes analyzeStep(dT) steps number of times. int analyzeStep ( double dT ); Invoked to perform a transient analysis on the FE_Model . The method checks to see if the domain has changed before it performs the analysis. The DirectIntegrationAnalysis object performs the following: theAnalysisModel -> analysisStep ( dT ); if ( theDomain -> hasDomainChanged () != this -> domainStamp ) this -> domainChanged (); theIntegrator -> newStep ( dT ); theAlgorithm -> solveCurrentStep (); theIntegrator -> commit (); The type of analysis performed, depends on the type of the objects in the analysis aggregation. If any of the methods invoked returns a negative number, an error message is printed, revertToLastCommit() is invoked on the Domain, and a negative number is immediately returned. Returns a \\(0\\) if the algorithm is successful. void clearAll ( void ); Will invoke the destructor on all the objects in the aggregation. NOTE this means they must have been constructed using new() , otherwise a segmentation fault can occur. void domainChange ( void ); This is a method invoked by a domain which indicates to the analysis that the domain has changed. The method invokes the following: It invokes clearAll() on theModel which causes the AnalysisModel to clear out its list of FE_Elements and DOF_Groups , and clearAll() on theHandler . It then invokes handle() on theHandler . This causes the constraint handler to recreate the appropriate FE_Element and DOF_Groups to perform the analysis subject to the boundary conditions in the modified domain. It then invokes numberDOF() on theNumberer . This causes the DOF numberer to assign equation numbers to the individual DOFs. Once the equation numbers have been set the numberer then invokes setID() on all the FE_Elements in the model. Finally the DOF_Numberer invokes setNumEqn() on theAnalysisModel . Then doneNumberingDOF() is invoked on the ConstraintHandler which invokes setID() on all the FE_Elements in the model. It invokes setSize ( theModel . getDOFGraph ()) on theSOE and theEigenSOE which causes the system of equation to determine its size based on the connectivity of the dofs in the analysis model. It then invokes domainChanged() on theIntegrator and theAlgorithm to inform these objects that changes have occurred in the model. Returns \\(0\\) if successful. At any stage above, if an error occurs the method is stopped, a warning message is printed and a negative number is returned. Public Methods to vary the type of Analysis int setAlgorithm ( EquiSolnAlgo & theNewAlgorithm ) To change the algorithm between analysis. It first invokes the destructor on the old SolutionAlgorithm object associated with the analysis. It then sets the SolutionAlgorithm associated with the analysis to be newAlgorithm and sets the links for this object by invoking setLinks() . Checks then to see if the domain has changed, if true it invokes domainChanged() , otherwise it invokes domainChanged() on the new SolutionAlgorithm. Returns \\(0\\) if successful, a warning message and a negative number if not. int setIntegrator ( TransientIntegrator & theNewIntegrator ) To change the integration scheme between analysis. It first invokes the destructor on the old Integrator object associated with the analysis. It then sets the SolutionAlgorithm associated with the analysis to be newAlgorithm and sets the links for this object by invoking setLinks() . It also invokes setLinks() on the ConstraintHandler and SolutionAlgorithm objects. Checks then to see if the domain has changed, if true it invokes domainChanged() , otherwise it invokes domainChanged() on the new Integrator. Returns \\(0\\) if successful, a warning message and a negative number if not. int setLinearSOE ( LinearSOE & theNewSOE ); int setEigenSOE ( EigenSOE & theNewSOE ); To change the respective system of equation object between analysis. It first invokes the destructor on the old LinearSOE object associated with the analysis. It then sets the SolutionAlgorithm associated with the analysis to be newSOE . links for this object by invoking setLinks() . It then invokes setLinks() on the ConstraintHandler and SolutionAlgorithm objects. Checks then to see if the domain has changed, if true it invokes domainChanged() , otherwise it invokes setSize() on the new LinearSOE. Returns \\(0\\) if successful, a warning message and a negative number if not.","title":"DirectIntegrationAnalysis"},{"location":"library/analysis/DirectIntegration/231-Explicit%20Difference/","text":"Explicit Difference This command is used to construct a Explicit Difference integrator object. integrator Explicitdifference Examples integrator Explicitdifference { \"integrator\" : [ \"Explicitdifference\" ]} Notes When using Rayleigh damping, the damping ratio of high vibration modes is overrated, and the critical time step size will be much smaller. Hence Modal damping is more suitable for this method. There should be no zero element on the diagonal of the mass matrix when using this method. Diagonal solver should be used when lumped mass matrix is used because the equations are uncoupled. For stability, \\(\\Delta t \\leq\\left(\\sqrt{\\zeta^{2}+1}-\\zeta\\right) \\frac{2}{\\omega}\\) Theory The Explicit Difference Integrator is based on the Leap-frog method. The basic formula of Leap-frog method is shown as below: \\[ \\begin{aligned} &\\hat{\\ddot{u}}_{t}=M^{-1}\\left(F-K u_{t}-C \\dot{u}_{t-\\frac{1}{2} \\Delta t}\\right) \\\\ &\\hat{\\dot{u}}_{t+\\frac{1}{2} \\Delta t}=\\dot{u}_{t-\\frac{1}{2} \\Delta t}+\\ddot{\\hat{u}}_{t} \\Delta t \\\\ &u_{t+\\Delta t}=u_{t}+\\dot{\\hat{u}}_{t+\\frac{1}{2} \\Delta t} \\Delta t \\end{aligned} \\] As mass matrix M is a diagonal matrix, the equations can be uncoupled, then the solution procedure will be very efficient. Code Developed by: Shuhao Zhang, Tsinghua University, and Prof. Xinzheng Lu, Tsinghua University","title":"Explicit Difference"},{"location":"library/analysis/DirectIntegration/277-Generalized%20Alpha%20Method/","text":"Generalized Alpha Method This command is used to construct a Generalized \\(\\alpha\\) integration object. This is an implicit method that like the HHT method allows for high frequency energy dissipation and second order accuracy, i.e. \\(\\Delta t^2\\) . Depending on choices of input parameters, the method can be unconditionally stable. integrator GeneralizedAlpha $alphaM $alphaF < $gamma $beta > alphaM \\(\\alpha_M\\) factor alphaF \\(\\alpha_F\\) factor gamma \\(\\gamma\\) factor beta \\(\\beta\\) factor Examples integrator GeneralizedAlpha 1.0 0.8 { \"integrator\" : [ \"GeneralizedAlpha\" , 1.0 , 0.8 ]} NOTES: \\(\\alpha_F\\) and \\(\\alpha_M\\) are defined differently that in the paper, we use \\(\\alpha_F = (1-\\alpha_f)\\) and \\(\\alpha_M=(1-\\gamma_m)\\) where \\(\\alpha_f\\) and \\(\\alpha_m\\) are those used in the paper. Like Newmark and all the implicit schemes, the unconditional stability of this method applies to linear problems. There are no results showing stability of this method over the wide range of nonlinear problems that potentially exist. Experience indicates that the time step for implicit schemes in nonlinear situations can be much greater than those for explicit schemes. \\(\\alpha_M = 1.0, \\alpha_F = 1.0\\) produces the Newmark Method. \\(\\alpha_M = 1.0\\) corresponds to the HHT method. The method is second-order accurate provided \\(\\gamma = \\tfrac{1}{2} + \\alpha_M - \\alpha_F\\) The method is unconditionally stable provided \\(\\alpha_M \\ge \\alpha_F \\ge \\tfrac{1}{2}, \\beta \\ge \\tfrac{1}{4} +\\tfrac{1}{2}(\\gamma_M - \\gamma_F)\\) \\(\\gamma\\) and \\(\\beta\\) are optional. The default values ensure the method is unconditionally stable, second order accurate and high frequency dissipation is maximized. The defaults are: \\[\\gamma = \\tfrac{1}{2} + \\gamma_M - \\gamma_F\\] and \\[\\beta = \\tfrac{1}{4}(1 + \\gamma_M - \\gamma_F)^2\\] Theory The Generalized \\(\\alpha\\) method (sometimes called the \\(\\alpha\\) method) is a one step implicit method for solving the transient problem which attempts to increase the amount of numerical damping present without degrading the order of accuracy. In the HHT method, the same Newmark approximations are used: \\[U_{t+\\Delta t} = U_t + \\Delta t \\dot U_t + [(0.5 - \\beta) \\Delta t^2] \\ddot U_t + [\\beta \\Delta t^2] \\ddot U_{t+\\Delta t}\\] \\[\\dot U_{t+\\Delta t} = \\dot U_t + [(1-\\gamma)\\Delta t] \\ddot U_t + [\\gamma \\Delta t ] \\ddot U_{t+\\Delta t} \\] but the time-discrete momentum equation is modified: \\[R_{t + \\alpha_M \\Delta t} = F_{t+\\Delta t}^{ext} - M \\ddot U_{t + \\alpha_M \\Delta t} - C \\dot U_{t+\\alpha_F \\Delta t} - F^{int}(U_{t + \\alpha_F \\Delta t}) \\] where the displacements and velocities at the intermediate point are given by: \\[U_{t+ \\alpha_F \\Delta t} = (1 - \\alpha_F) U_t + \\alpha_F U_{t + \\Delta t}\\] \\[\\dot U_{t+\\alpha_F \\Delta t} = (1-\\alpha_F) \\dot U_t + \\alpha_F \\dot U_{t + \\Delta t}\\] \\[\\ddot U_{t+\\alpha_M \\Delta t} = (1-\\alpha_M) \\ddot U_t + \\alpha_M \\ddot U_{t + \\Delta t}\\] Following the methods outlined for Newmarks method, linearization of the nonlinear momentum equation results in the following linear equations: \\[K_{t+\\Delta t}^{*i} d U_{t+\\Delta t}^{i+1} = R_{t+\\Delta t}^i\\] \\[K_{t+\\Delta t}^{*i} = \\alpha_F K_t + \\frac{\\alpha_F \\gamma}{\\beta \\Delta t} C_t + \\frac{\\alpha_M}{\\beta \\Delta t^2} M\\] and \\[R_{t+\\Delta t}^i = F_{t + \\Delta t}^{ext} - F(U_{t + \\alpha F \\Delta t}^{i-1})^{int} - C \\dot U_{t+\\alpha F \\Delta t}^{i-1} - M \\ddot U_{t+ \\alpha M \\Delta t}^{i-1}\\] The linear equations are used to solve for \\[U_{t+\\alpha F \\Delta t}, \\dot U_{t + \\alpha F \\Delta t} \\ddot U_{t+ \\alpha M \\Delta t}\\] Once convergence has been achieved the displacements, velocities and accelerations at time \\(t + \\Delta t\\) can be computed. References J. Chung, G.M.Hubert. \u201cA Time Integration Algorithm for Structural Dynamics with Improved Numerical Dissipation: The Generalized- \\(\\alpha\\) Method\u201d ASME Journal of Applied Mechanics, 60, 371:375, 1993. Code Developed by: fmk","title":"Generalized Alpha Method"},{"location":"library/analysis/DirectIntegration/326-Hilber-Hughes-Taylor%20Method/","text":"Hilber-Hughes-Taylor This command is used to construct a Hilber-Hughes-Taylor (HHT) integrator. This is an implicit method that allows for energy dissipation and second order accuracy (which is not possible with the regular Newmark method). Depending on choices of input parameters, the method can be unconditionally stable. integrator HHT $alpha < $gamma $beta > alpha \\(\\alpha\\) factor gamma \\(\\gamma\\) factor beta \\(\\beta\\) factor Examples integrator HHT 0.9 { \"integrator\" : [ \"HHT\" , 0.9 ]} NOTES: \\(\\alpha\\) is defined differently that in the paper, we use \\(\\alpha = \\alpha_{HHT} - 1\\) where \\(\\alpha_{HHT}\\) is that used in the paper. Like Newmark and all the implicit schemes, the unconditional stability of this method applies to linear problems. There are no results showing stability of this method over the wide range of nonlinear problems that potentially exist. Experience indicates that the time step for implicit schemes in nonlinear situations can be much greater than those for explicit schemes. \\(\\alpha = 1.0\\) corresponds to the Newmark method. \\(\\alpha\\) should be between \\(0.67\\) and \\(1.0\\) . The smaller the \\(\\alpha\\) the greater the numerical damping. \\(\\gamma\\) and \\(\\beta\\) are optional. The default values ensure the method is second order accurate and unconditionally stable when \\(\\alpha\\) is \\(\\tfrac{2}{3} \\le \\alpha \\le 1.0\\) . The defaults are: \\[\\beta = \\frac{(2 - \\alpha)^2}{4}\\] and \\[\\gamma = \\frac{3}{2} - \\alpha\\] Theory The HHT method (sometimes called the \\(\\alpha\\) method) is a one step implicit method for solving the transient problem which attempts to increase the amount of numerical damping present without degrading the order of accuracy. In the HHT method, the same Newmark approximations are used: \\[U_{t+\\Delta t} = U_t + \\Delta t \\dot U_t + [(0.5 - \\beta) \\Delta t^2] \\ddot U_t + [\\beta \\Delta t^2] \\ddot U_{t+\\Delta t}\\] \\[\\dot U_{t+\\Delta t} = \\dot U_t + [(1-\\gamma)\\Delta t] \\ddot U_t + [\\gamma \\Delta t ] \\ddot U_{t+\\Delta t} \\] but the time-discrete momentum equation is modified: \\[ R_{t + \\alpha \\Delta t} = F_{t+\\Delta t}^{ext} - M \\ddot U_{t + \\Delta t} - C \\dot U_{t+\\alpha \\Delta t} - F^{int}(U_{t + \\alpha \\Delta t}) \\] where the displacements and velocities at the intermediate point are given by: \\[U_{t+ \\alpha \\Delta t} = (1 - \\alpha) U_t + \\alpha U_{t + \\Delta t}\\] \\[\\dot U_{t+\\alpha \\Delta t} = (1-\\alpha) \\dot U_t + \\alpha \\dot U_{t + \\Delta t}\\] Following the methods outlined for Newmarks method, loinearization of the nonlinear momentum equation results in the following linear equations: \\[K_{t+\\Delta t}^{*i} d U_{t+\\Delta t}^{i+1} = R_{t+\\Delta t}^i\\] where \\[K_{t+\\Delta t}^{*i} = \\alpha K_t + \\frac{\\alpha \\gamma}{\\beta \\Delta t} C_t + \\frac{1}{\\beta \\Delta t^2} M\\] and \\[R_{t+\\Delta t}^i = F_{t + \\Delta t}^{ext} - F(U_{t + \\alpha \\Delta t}^{i-1})^{int} - C \\dot U_{t+\\alpha \\Delta t}^{i-1} - M \\ddot U_{t+ \\Delta t}^{i-1}\\] The linear equations are used to solve for \\(U_{t+\\alpha \\Delta t}, \\dot U_{t + \\alpha \\Delta t} \\ddot U_{t+\\Delta t}\\) . Once convergence has been achieved the displacements and velocities at time \\(t + \\Delta t\\) can be computed. References Hilber, H.M, Hughes,T.J.R and Talor, R.L. \u201cImproved Numerical Dissipation for Time Integration Algorithms in Structural Dynamics\u201d Earthquake Engineering and Structural Dynamics, 5:282-292, 1977. Code developed by: fmk","title":"Hilber-Hughes-Taylor"},{"location":"library/analysis/DirectIntegration/416-Newmark%20Method/","text":"Newmark Method This command is used to construct a Newmark integrator object. integrator Newmark $gamma $beta gamma \\(\\gamma\\) factor beta \\(\\beta\\) factor Examples integrator Newmark 0.5 0.25 { \"integrator\" : [ \"Newmark\" , 0.5 , 0.25 ]} NOTES: If the accelerations are chosen as the unknowns and \\(\\beta\\) is chosen as \\(0\\) , the formulation results in the fast but conditionally stable explicit Central Difference method. Otherwise the method is implicit and requires an iterative solution process. Two common sets of choices are Average Acceleration Method ( \\(\\gamma=\\tfrac{1}{2}, \\beta = \\tfrac{1}{4}\\) Linear Acceleration Method ( \\(\\gamma=\\tfrac{1}{2}, \\beta = \\tfrac{1}{6}\\) \\(\\gamma > \\tfrac{1}{2}\\) results in numerical damping proportional to \\(\\gamma - \\tfrac{1}{2}\\) The method is second order accurate if and only if \\(\\gamma=\\tfrac{1}{2}\\) The method is conditionally stable for \\(\\beta \\ge \\frac{\\gamma}{2} \\ge \\tfrac{1}{4}\\) Theory The Newmark method is a one step implicit method for solving the transient problem, represented by the residual for the momentum equation: \\[R_{t + \\Delta t} = F_{t+\\Delta t}^{ext} - M \\ddot U_{t + \\Delta t} - C \\dot U_{t + \\Delta t} + F(U_{t + \\Delta t})^{int}\\] Using the Taylor series approximation of \\(U_{t+\\Delta t}\\) and \\(\\dot U_{t+\\Delta t}\\) : \\[U_{t+\\Delta t} = U_t + \\Delta t \\dot U_t + \\tfrac{\\Delta t^2}{2} \\ddot U_t + \\tfrac{\\Delta t^3}{6} \\dot \\ddot U_t + \\cdots \\] \\[\\dot U_{t+\\Delta t} = \\dot U_t + \\Delta t \\ddot U_t + \\tfrac{\\Delta t^2}{2} \\dot \\ddot U_t + \\cdots \\] Newton truncated these using the following: \\[U_{t+\\Delta t} = u_t + \\Delta t \\dot U_t + \\tfrac{\\Delta t^2}{2} \\ddot U + \\beta {\\Delta t^3} \\dot \\ddot U \\] \\[\\dot U_{t + \\Delta t} = \\dot U_t + \\Delta t \\ddot U_t + \\gamma \\Delta t^2 \\dot \\ddot U\\] in which he assumed linear acceleration within a time step, i.e. \\[\\dot \\ddot U = \\frac{{\\ddot U_{t+\\Delta t}} - \\ddot U_t}{\\Delta t} \\] which results in the following expressions: \\[U_{t+\\Delta t} = U_t + \\Delta t \\dot U_t + [(0.5 - \\beta) \\Delta t^2] \\ddot U_t + [\\beta \\Delta t^2] \\ddot U_{t+\\Delta t}\\] \\[\\dot U_{t+\\Delta t} = \\dot U_t + [(1-\\gamma)\\Delta t] \\ddot U_t + [\\gamma \\Delta t ] \\ddot U_{t+\\Delta t} \\] The variables \\(\\beta\\) and \\(\\gamma\\) are numerical parameters that control both the stability of the method and the amount of numerical damping introduced into the system by the method. For \\(\\gamma=\\tfrac{1}{2}\\) there is no numerical damping; for \\(\\gamma \\ge \\tfrac{1}{2}\\) numerical damping is introduced. Two well known and commonly used cases are: Average Acceleration Method ( \\(\\gamma=\\tfrac{1}{2}, \\beta = \\tfrac{1}{4}\\) Constant Acceleration Method ( \\(\\gamma=\\tfrac{1}{2}, \\beta = \\tfrac{1}{6}\\) The linearization of the Newmark equations gives: \\[dU_{t+\\Delta t}^{i+1} = \\beta \\Delta t^2 d \\ddot U_{t+\\Delta t}^{i+1}\\] \\[d \\dot U_{t+\\Delta t}^{i+1} = \\gamma \\Delta t \\ddot{U}_{t+\\Delta t}^{i+1}\\] which gives the update formula when displacement increment is used as unknown in the linearized system as: \\[U_{t+\\Delta t}^{i+1} = U_{t+\\Delta t}^i + dU_{t+\\Delta t}^{i+1}\\] \\[\\dot U_{t+\\Delta t}^{i+1} = \\dot U_{t+\\Delta t}^i + \\frac{\\gamma}{\\beta \\Delta t} dU_{t+\\Delta t}^{i+1}\\] \\[\\ddot U_{t+\\Delta t}^{i+1} = \\ddot U_{t+\\Delta t}^i + \\frac{1}{\\beta \\Delta t^2}dU_{t+\\Delta t}^{i+1}\\] The linearization of the momentum equation using the displacements as the unknowns leads to the following linear equation: \\[K_{t+\\Delta t}^{*i} \\Delta U_{t+\\Delta t}^{i+1} = R_{t+\\Delta t}^i\\] where \\[K_{t+\\Delta t}^{*i} = K_t + \\frac{\\gamma}{\\beta \\Delta t} C_t + \\frac{1}{\\beta \\Delta t^2} M\\] and \\[R_{t+\\Delta t}^i = F_{t + \\Delta t}^{ext} - F(U_{t + \\Delta t}^{i-1})^{int} - C \\dot U_{t+\\Delta t}^{i-1} - M \\ddot U_{t+ \\Delta t}^{i-1}\\] References Newmark, N.M. \u201cA Method of Computation for Structural Dynamics\u201d ASCE Journal of Engineering Mechanics Division, Vol 85. No EM3, 1959. Code Developed by: fmk","title":"Newmark Method"},{"location":"library/analysis/DirectIntegration/675-TRBDF2/","text":"TRBDF2 This command is used to construct a TRBDF2 integrator object. The TRBDF2 integrator is a composite scheme that alternates between the Trapezoidal scheme and a 3 point backward Euler scheme. It does this in an attempt to conserve energy and momentum, something newmark does not always do. integrator TRBDF2 NOTES: As opposed to dividing the time-step in 2 as outlined in the papers, we just switch alternate between the 2 integration strategies,i.e. the time step in our implementation is double that described in the papers. Examples integrator TRBDF2 { \"integrator\" : [ \"TRBDF2\" ]} Theory COMING SOON. LOOK AT BATHE\u2019S PAPER FOR NOW. References Bank, R.E., Coughran W.M., Fichter W., Grosse E.H., Rose, D.J., and Smith R.K. \u201cTransient Simulations of Silicon Devices and Circuits\u201d, IEE Trans CAD, Vol(4), 436-451, 1985. Bathe, K.J. \u201cConserving Energy and Momentum in Nonlinear Dynamics: A Simple Impicit Time Integration Scheme\u201d, Computers and Structures, Vol(85), 437-445, 2007. doi:10.1016/j.compstruc.2006.09.004 Code Developed by: fmk","title":"TRBDF2"},{"location":"library/analysis/DirectIntegration/81-Central%20Difference/","text":"Central Difference This command is used to construct a Central Difference integrator object. integrator CentralDifference Examples integrator CentralDifference { \"integrator\" : [ \"CentralDifference\" ]} NOTES: The calculation of \\(U_{t+\\Delta t}\\) , as shown below, is based on using the equilibrium equation at time t. For this reason the method is called an explicit integration method . If there is no rayleigh damping and the \\(C\\) matrix is 0, for a diagonal mass matrix a diagonal solver may and should be used. For stability, \\(\\frac{\\Delta t}{T_n} < \\frac{1}{\\pi}\\) Theory The Central difference approximations for velocity and acceleration: \\[v_n = \\frac{d_{n+1} - d_{n-1}}{2 \\Delta t}\\] \\[a_n = \\frac{d_{n+1} - 2 d_n + d_{n-1}}{\\Delta t^2}\\] In the Central Difference method we determine the displacement solution at time \\(t+\\delta t\\) by considering the the eqilibrium equation for the finite element system in motion at time t: \\[M \\ddot U_t + C \\dot U_t + K U_t = R_t\\] which when using the above two expressions of becomes: \\[\\left ( \\frac{1}{\\Delta t^2} M + \\frac{1}{2 \\Delta t} C \\right ) U_{t+\\Delta t} = R_t - \\left (K - \\frac{2}{\\Delta t^2}M \\right )U_t - \\left (\\frac{1}{\\Delta t^2}M - \\frac{1}{2 \\Delta t} C \\right) U_{t-\\Delta t} \\] References Code Developed by: fmk","title":"Central Difference"},{"location":"library/analysis/Eigen_Analysis/","text":"Eigen Analysis eigen numEigenvalues? To perform a generalized eigenvalue problem to determine the first numEigenvalues eigenvalues and eigenvectors. The eigenvectors are stored at the nodes and can be printed out. Currently each invocation of this command constructs a new EigenvalueAnalysis object, each with new component objects: a ConstraintHandler of type Plain, an EigenvalueSOE and solver of type BandArpackSOE and BandArpackSolver and an algorithm of type FrequencyAlgo. These objects are destroyed when the command has finished. This will change.","title":"Eigen Analysis"},{"location":"library/analysis/Eigen_Analysis/ArpackSolver/","text":"ArpackSolver This is the solver that works on the ArpackSOE. It uses the LinearSOE in the SOE to perform the solve() operation if required. It uses the ARPACK library to perform the eigenvalue analysis. ARPACK is an eigen analysis package which was developed by R.B.Lehoucq, D.C.Sorensen and C.Yang at Rice University. ARPACK is a collection of FORTRAN77 subroutines designed to solve large scale eigen problems. ARPACK is capable of solving large scale non-Hermitian standard and generalized eigen problems. When the matrix K is symmetric, the method is a variant of the Lanczos process called Implicitly Restarted Lanczos Method (IRLM). It is based on previous work of Jun Peng(Stanford) Written: fmk Created: 05.09","title":"ArpackSolver"},{"location":"library/analysis/Eigen_Analysis/EigenAlgorithm/","text":"/* ****************************************************************** OpenSees - Open System for Earthquake Engineering Simulation Pacific Earthquake Engineering Research Center (C) Copyright 1999, The Regents of the University of California All Rights Reserved. Commercial use of this program without express permission of the University of California, Berkeley, is strictly prohibited. See file \u2018COPYRIGHT\u2019 in main directory for information on usage and redistribution, and for a DISCLAIMER OF ALL WARRANTIES. Developed by: Frank McKenna (fmckenna@ce.berkeley.edu) Gregory L. Fenves (fenves@ce.berkeley.edu) Filip C. Filippou (filippou@ce.berkeley.edu) ****************************************************************** */ // $Revision: 1.2 $ // $Date: 2003-02-14 23:00:41 $ // $Source: /usr/local/cvs/OpenSees/SRC/analysis/algorithm/eigenAlgo/EigenAlgorithm.h,v $ // File: ~/analysis/algorithm/eigenAlgo/EigenAlgorithm.h // // Written: Jun Peng // Created: Wed Jan 27, 1999 // Revision: A // // Description: This file contains the class definition of EigenAlgorithm. // EigenAlgorithm is a class which performs a eigen solution algorithm // to solve the equations. // // This class is inheritanted from the base class of SolutionAlgorithm // which was created by fmk (Frank). #ifndef EigenAlgorithm_h #define EigenAlgorithm_h #include <SolutionAlgorithm.h> #include <OPS_Globals.h> class AnalysisModel; class EigenSOE; class EigenIntegrator; class EigenAlgorithm : public SolutionAlgorithm { public: EigenAlgorithm(int classTag); virtual ~EigenAlgorithm(); // public functions defined for subclasses virtual void setLinks(AnalysisModel &theModel, EigenIntegrator &theIntegrator, EigenSOE &theSOE); // pure virtual functions virtual int solveCurrentStep(int numModes) = 0; virtual void Print(OPS_Stream &s, int flag=0) = 0; virtual AnalysisModel *getAnalysisModelPtr() const; virtual EigenIntegrator *getEigenIntegratorPtr() const; virtual EigenSOE *getEigenSOEptr() const; protected: private: AnalysisModel theModel; EigenIntegrator theIntegrator; EigenSOE *theSOE; }; #endif","title":"EigenAlgorithm"},{"location":"library/analysis/Eigen_Analysis/FrequencyAlgo/","text":"FrequencyAlgo // $Revision: 1.2 $ // $Date: 2003-02-14 23:00:41 $ // $Source: /usr/local/cvs/OpenSees/SRC/analysis/algorithm/eigenAlgo/FrequencyAlgo.h,v $ // File: ~/analysis/algorithm/eigenAlgo/FrequencyAlgo.h // // Written: Jun Peng // Created: Wed Feb. 8, 1999 // Revision: A FrequencyAlgo is a class which performs a eigen solution algorithm to solve the Generalized eigen equations. It is not expected that this class will have subclasses. This class is inheritanted from the base class of SolutionAlgorithm which was created by fmk (Frank). #include <EigenAlgorithm.h> class FrequencyAlgo : public EigenAlgorithm { public : FrequencyAlgo (); virtual ~ FrequencyAlgo (); virtual int solveCurrentStep ( int numModes ); virtual int sendSelf ( int commitTag , Channel & theChannel ); virtual int recvSelf ( int commitTag , Channel & theChannel , FEM_ObjectBroker & theBroker ); virtual void Print ( OPS_Stream & s , int flag = 0 ); protected : private : };","title":"FrequencyAlgo"},{"location":"library/analysis/Eigen_Analysis/StandardEigenAlgo/","text":"StandardEigenAlgo // $Revision: 1.2 $ // $Date: 2003-02-14 23:00:41 $ // $Source: /usr/local/cvs/OpenSees/SRC/analysis/algorithm/eigenAlgo/StandardEigenAlgo.h,v $ // Written: MHS // Created: Oct 2001 // StandardEigenAlgo is a class which performs a eigen solution algorithm to solve standard eigenvalue equations. It is not expected that this class will have subclasses. #include <EigenAlgorithm.h> class StandardEigenAlgo : public EigenAlgorithm { public : StandardEigenAlgo (); virtual ~ StandardEigenAlgo (); virtual int solveCurrentStep ( int numModes ); virtual int sendSelf ( int commitTag , Channel & theChannel ); virtual int recvSelf ( int commitTag , Channel & theChannel , FEM_ObjectBroker & theBroker ); virtual void Print ( OPS_Stream & s , int flag = 0 ); protected : private : };","title":"StandardEigenAlgo"},{"location":"library/analysis/StaticAnalysis/","text":"Static Analysis In static nonlinear finite element problems we seek a solution ( \\(\\boldsymbol{u}\\) , \\(\\lambda\\) ) to the nonlinear vector function \\[ \\boldsymbol{r}(\\boldsymbol{u}, \\lambda) = \\lambda \\boldsymbol{p}_f - \\boldsymbol{p}_r(\\boldsymbol{u}) = \\boldsymbol{0} %\\label{staticGenForm} \\] The most widely used technique for solving the non-linear finite element equation, equation femGenForm , is to use an incremental scheme. In the incremental formulation, a solution to the equation is sought at successive incremental steps. \\[ \\boldsymbol{r}(\\boldsymbol{u}_{n}, \\lambda_n) = \\lambda_n \\boldsymbol{p}_f - \\boldsymbol{p}_{\\sigma}(\\boldsymbol{u}_{n}) \\] The solution of this equation is typically obtained using an iterative procedure, in which a sequence of approximations ( \\(\\boldsymbol{u}_{n}^{(i)}\\) , \\(\\lambda_n^{(i)}\\) ), \\(i=1,2, ..\\) is obtained which converges to the solution ( \\(\\boldsymbol{u}_n\\) , \\(\\lambda_n)\\) . The most frequently used iterative schemes, such as Newton-Raphson, modified Newton, and quasi Newton schemes, are based on a Taylor expansion of equation staticIncForm about ( \\(\\boldsymbol{u}_{n}\\) , \\(\\lambda_n\\) ): \\[ \\boldsymbol{r}(\\boldsymbol{u}, \\lambda)(\\boldsymbol{u}_{n},\\lambda_n) = \\lambda_n^{(i)} \\boldsymbol{p}_f - \\boldsymbol{p}_{\\sigma}\\left(\\boldsymbol{u}_{n}^{(i)} \\right) - \\left[ \\begin{array}{cc} \\boldsymbol{K}_n^{(i)} & -\\boldsymbol{p}_f \\\\ \\end{array} \\right] \\left\\{ \\begin{array}{c} \\boldsymbol{u}_{n} - \\boldsymbol{u}_{n}^{(i)} \\\\ \\lambda_n - \\lambda_n^{(i)} \\end{array} \\right\\} %\\label{staticFormTaylor} \\] which a system of of \\(N\\) equations with ( \\(N+1\\) ) unknowns. Two solve this, an additional equation is required, the constraint equation. The constraint equation used depends on the static integration scheme, of which there are a number, for example load control, arc length, and displacement control. The following are the aggregates of such an analysis type: StaticIntegrator - an algorithmic class which provides methods which are invoked by the FE_Element to determine their current tangent and residual matrices; that is this is the class that sets up the system of equations. It also provides the update() method which is invoked to set up the appropriate dof response values once the solution algorithm has formed and solved the system of equations. Load Control \u2013 Specifies the incremental load factor to be applied to the loads in the domain Displacement Control \u2013 Specifies the incremental displacement at a specified DOF in the domain Minimum Unbalanced Displacement Norm \u2013 Specifies the incremental load factor such that the residual displacement norm in minimized Arc Length \u2013 Specifies the incremental arc-length of the load-displacement path EquiSolnAlgo - an algorithmic class specifying the sequence of operations to be performed in setting up and solving the finite element equation which can be represented by the equation \\[ \\boldsymbol{K}_{\\mathrm{eff}}(\\boldsymbol{u}) \\boldsymbol{u} = \\boldsymbol{p}(\\boldsymbol{u}) \\] ConstraintHandler - a class which creates the DOF_Group and FE_Element objects, the type of objects created depending on how the specified constraints in the domain are to be handled. DOF_Numberer - a class responsible for providing equation numbers to the individual degrees of freedom in each DOF_Group object. LinearSOE - a numeric class responsible for the creation and subsequent solution of large systems of linear equations of the form \\(Ax = b\\) , where \\(A\\) is a matrix and \\(x\\) and \\(b\\) are vectors. -det -iterScale -exp phat -min/max MinUnbalDisp Fix ArcLength Add Add Add LoadControl Add DispControl Add -det Umfpack FullGen BandGen ProfileSPD Band SPD SparseGen SparseSym UmfGen Conjugate Gradient","title":"Static Analysis"},{"location":"library/analysis/StaticAnalysis/154-Displacement%20Control/","text":"Displacement Control In an analysis step with Displacement Control we seek to determine the time step \\(\\Delta \\lambda\\) that will result in a displacement increment for a particular degree-of-freedom at a node to be a prescribed value. integrator DisplacementControl $node $dof $incr < $numIter $DeltaUmin $ $DeltaUmax $ > node node whose response controls solution dof degree of freedom at the node, valid options: 1 through ndf at node. incr first displacement increment \\(\\Delta U_{\\text{dof}}\\) numIter the number of iterations the user would like to occur in the solution algorithm. Optional, default = 1.0. \\(\\Delta U\\text{min}\\) the min stepsize the user will allow. optional, defualt = \\(\\Delta U_{min} = \\Delta U_0\\) \\(\\Delta U \\text{max}\\) the max stepsize the user will allow. optional, default = \\(\\Delta U_{max} = \\Delta U_0\\) Examples displacement control algorithm seking constant increment of 0.1 at node 1 at 2\u2019nd dof. integrator DisplacementControl 1 2 0.1 ; { \"integrator\" : [ \"DisplacementControl\" , 1 , 2 , 0.1 ]} Theory If we write the governing finite element equation at \\(t + \\Delta t\\) as: \\[ R(\\boldsymbol{u}_{n}, \\lambda_{n}) = \\lambda_{t+\\Delta t} \\boldsymbol{p}_f - \\boldsymbol{p}_{\\sigma}(\\boldsymbol{u}_{n}) \\] where ( {}( {n})) are the internal forces which are a function of the displacements (_{n}), (_f) is the set of reference loads and () is the load multiplier. Linearizing the equation results in: \\[ \\mathbf{K}_{n}^{*i} \\Delta \\mathbf{u}_{n}^{i+1} = \\left( \\lambda^i_{n} + \\Delta \\lambda^i \\right) \\boldsymbol{p}_f - \\boldsymbol{p}_{\\sigma}(\\boldsymbol{u}_{n}) \\] This equation represents \\(n\\) equations in \\(n+1\\) unknowns, and so an additional equation is needed to solve the equation. For displacement control, we introduce a new constraint equation in which in each analysis step we set to ensure that the displacement increment for the degree-of-freedom \\(\\text{dof}\\) at the specified node is: \\[ \\Delta u_\\text{dof} = \\text{incr} \\] Incrementation In Displacement Control \\(\\Delta u_{\\text{dof}}\\) is incremented at \\(t +\\Delta t\\) to \\[ \\Delta u_\\text{dof}^{t+1} = \\max \\left( \\Delta U_{\\text{min}}, \\min \\left( \\Delta U_{\\text{max}}, \\frac{\\text{numIter}}{\\text{lastNumIter}} \\Delta U_\\text{dof}^{t} \\right) \\right) \\] Code Developed by: fmk","title":"Displacement Control"},{"location":"library/analysis/StaticAnalysis/24-Arc-Length%20Control/","text":"Arc-Length Control This command is used to construct an ArcLength integrator object. In an analysis step with ArcLength we seek to determine the time step that will result in our constraint equation being satisfied. integrator ArcLength $s $alpha s \\(s\\) the arcLength. alpha \\(\\alpha\\) a scaling factor on the reference loads. Examples integrator ArcLength 1.0 0.1 ; { \"integrator\" : [ \"ArcLength\" , 1.0 , 0.1 ]} Theory If we write the governing finite element equation at \\(t + \\Delta t\\) as: \\[ \\boldsymbol{r}(\\boldsymbol{u}_{n}, \\lambda_{n}) = \\lambda_{n} \\boldsymbol{p}_f - \\boldsymbol{p}_{\\sigma}(\\boldsymbol{u}_{n}) \\] where \\(\\boldsymbol{p}_{\\sigma}(\\boldsymbol{u}_{n})\\) are the internal forces which are a function of the displacements \\(\\boldsymbol{u}_{n}\\) , \\(\\boldsymbol{p}_f\\) is the set of reference applied loads and \\(\\lambda\\) is the load multiplier. Linearizing the equation results in: \\[ \\boldsymbol{K}_{n}^{*i} \\Delta \\boldsymbol{u}_{n}^{i+1} = \\left( \\lambda^i_{n} + \\Delta \\lambda^i \\right) \\boldsymbol{p}_f - \\boldsymbol{p}_{\\sigma}(\\boldsymbol{u}_{n}) \\] This equation represents \\(n\\) equations in \\(n+1\\) unknowns, and so an additional equation is needed to solve the equation. For displacement control, we introduce a new constraint equation in which in each analysis step we set to ensure that the displacement increment for the degree-of-freedom dof at the specified node is: On the first equilibrium iteration within a load step, both arc length integrators compute the change in load factor, \\(\\Delta \\lambda^1\\) , from the \u201ctangent displacements\u201d, \\(\\mathbf{U}_{f T}=\\mathbf{K}_T \\backslash \\mathbf{P}_{r e f}\\) , and the user specified arc length and \\(\\alpha\\) . \\[ \\Delta \\lambda^1=\\sqrt{\\frac{s^2}{\\mathbf{U}_{f T} \\cdot \\mathbf{U}_{f T}+\\alpha^2}} \\] Code Developed by: fmk","title":"Arc-Length Control"},{"location":"library/analysis/StaticAnalysis/372-Load%20Control/","text":"Load Control This command is used to construct a LoadControl integrator object. integrator LoadControl $lambda < $numIter $minLambda $maxLambda > lambda the load factor increment \\(\\lambda\\) numIter the number of iterations the user would like to occur in the solution algorithm. Optional, default = 1.0. minLambda the min stepsize the user will allow. optional, defualt = \\(\\lambda_{\\text{min}} = \\lambda\\) maxLambda the max stepsize the user will allow. optional, default = \\(\\lambda_{\\text{max}} = \\lambda\\) NOTES: The change in applied loads that this causes depends on the active load patterns (those load patterns not set constant) and the loads in the load patterns. If the only active loads acting on the domain are in load patterns with a Linear time series with a factor of 1.0, this integrator is the same as the classical load control method. The optional arguments are supplied to speed up the step size in cases where convergence is too fast and slow down the step size in cases where convergence is too slow. Examples integrator LoadControl 0.1 ; { \"integrator\" : [ \"LoadControl\" , 0.1 ]} ; Theory Incrementation In Load Control the time in the domain is set to \\(\\lambda + \\lambda_{t+1}\\) where, \\[ \\Delta \\lambda_i^1=\\Delta \\lambda_{i-1}^1\\left(\\frac{J_{\\mathrm{d}}}{J_{i-1}}\\right) \\] \\[\\lambda_{t+1} = \\max \\left ( \\lambda_{\\text{min}}, \\min \\left ( \\lambda_{\\text{max}}, \\frac{\\text{numIter}}{\\text{lastNumIter}} \\lambda_{t} \\right ) \\right ) \\] Code Developed by: fmk LoadControl #include <analysis/integrator/LoadControl.h> LoadControl is a subclass of StaticIntegrator, it is used to when performing a static analysis on the FE_Model using the load control method. In the load control method, the following constraint equation is added to equation staticFormTaylor of the StaticIntegrator class: \\[ \\lambda_n^{(i)} - \\lambda_{n-1} = \\delta \\lambda_n \\] where \\(\\delta \\lambda_n\\) depends on \\(\\delta \\lambda_{n-1}\\) , the load increment at the previous time step, \\(J_{n-1}\\) , the number of iterations required to achieve convergence in the previous load step, and \\(J_d\\) , the desired number of iteraions. \\(\\delta \\lambda_n\\) is bounded by \\(\\delta \\lambda_{\\text{min}}\\) and \\(\\delta \\lambda_{\\text{max}}\\) . \\[ \\delta \\lambda_n = \\max \\left( \\delta \\lambda_{\\text{min}}, \\min \\left( \\frac{J_d}{J_{n-1}} \\delta \\lambda_{n-1}, \\delta \\lambda_{\\text{max}} \\right) \\right) \\] Knowing \\(\\lambda_n^{(i)}\\) prior to each iteration, the \\(N+1\\) unknowns in equation staticFormTaylor , is reduced to \\(N\\) unknowns and results in the following equation: \\[ \\boldsymbol{r}(\\boldsymbol{u}_{n}) = \\lambda_n^{(i)} \\boldsymbol{p}_f - \\boldsymbol{p}_{\\sigma}\\left(\\boldsymbol{u}_{n}^{(i)} \\right) - \\boldsymbol{K}_n^{(i)} (\\boldsymbol{u}_{n} - \\boldsymbol{u}_{n}^{(i)}) \\label{staticFormLoadControl} \\] Implementation \\(\\delta \\lambda_1\\) is the load factor used in the first step. The arguments \\(J_d\\) , \\(\\delta \\lambda_{\\text{min}}\\) , and \\(\\delta \\lambda_{\\text{max}}\\) are used in the determination of the increment in the load factor at each step. int newStep ( void ); The object obtains the current value of \\(\\lambda\\) from the AnalysisModel object. It increments this by \\(\\delta \\lambda_n\\) . \\[ \\delta \\lambda_n = \\max \\left( \\delta \\lambda_{\\text{min}}, \\min \\left( \\frac{J_d}{J_{n-1}} \\delta \\lambda_{n-1}, \\delta \\lambda_{\\text{max}} \\right) \\right) \\] It will then invoke applyLoadDomain ( 0.0 , $ \\lambda $ ) on the AnalysisModel object. Returns \\(0\\) if successful. A warning message is printed and a \\(-1\\) is returned if no AnalysisModel is associated with the object. int update ( const Vector & $ \\Delta \\boldsymbol { u } $ ); Invoked this causes the object to first increment the DOF_Group displacements with \\(\\Delta \\boldsymbol{u}\\) , by invoking incrDisp( \\(\\Delta \\boldsymbol{u})\\) on the AnalysisModel, and then to update the domain, by invoking updateDomain() on the AnalysisModel. Returns \\(0\\) if successful, a warning message and a \\(-1\\) is returned if no AnalysisModel is associated with the object. Sets the value of the load increment in newStep() to be \\(\\delta \\lambda\\) . Returns \\(0\\) . int sendSelf ( int commitTag , Channel & theChannel ); Places in a vector if size 5 the value of \\(\\delta \\lambda_{n-1}\\) , \\(J_d\\) , \\(J_{n-1}\\) , \\(\\delta \\lambda_{\\text{min}}\\) and \\(\\delta \\lambda_{\\text{max}}\\) ) and then sends the Vector. Returns \\(0\\) if successful, a warning message is printed and a \\(-1\\) is returned if theChannel fails to send the Vector. int recvSelf ( int commitTag , Channel & theChannel , FEM_ObjectBroker & theBroker ); Receives in a Vector of size 5 the data that was sent in sendSelf() . Returns \\(0\\) if successful, a warning message is printed, \\(\\delta \\lambda\\) is set to \\(0\\) , and a \\(-1\\) is returned if theChannel fails to receive the Vector . int Print ( OPS_Stream & s , int flag = 0 ); The object sends to \\(s\\) its type, the current value of \\(\\lambda\\) , and \\(\\delta \\lambda\\) .","title":"Load Control"},{"location":"library/analysis/StaticAnalysis/387-Minimum%20Unbalanced%20Displacement%20Norm/","text":"Minimum Unbalanced Displacement Norm integrator MinUnbalDispNorm $dlambda1 < $Jd $minLambda $maxLambda > dlambda1 first load increment (pseudo-time step) at the first iteration in the next invocation of the analysis command. Jd factor relating first load increment at subsequent time steps (optional, default: 1.0) $minLambda, $maxLambda arguments used to bound the load increment (optional, default: $dLambda1 for both) Examples integrator MinUnbalDispNorm 0.1 ; { \"integrator\" : [ \"MinUnbalDispNorm\" , 0.1 ]} ; Theory Continuation In this instance, the constraint equation involving \\(\\Delta \\lambda_i^j\\) is \\[ \\frac{\\partial}{\\partial \\Delta \\lambda_i^j}\\left[\\{\\Delta u\\}_i^{j} \\cdot \\{\\Delta \\delta\\}_i^j\\right]=0 \\] which guarantees a minimum value for the unbalanced displacement norm in each iteration. Expanding \\(\\{\\Delta \\delta\\}_i^j\\) as defined in equation (9) and evaluating equation (28) furnishes \\[ \\Delta \\lambda_i^j=\\frac{-\\left\\{\\delta_1\\right\\}_i^{\\mathrm{T}}\\left\\{\\Delta \\delta_{\\mathrm{R}}\\right\\}_i^j}{\\left\\{\\delta_1\\right\\}_i^{\\mathrm{T}}\\left\\{\\delta_{\\mathrm{I}}\\right\\}_i} \\] Incrementation The load increment at iteration \\(i\\) , \\(d\\lambda_{1,i}\\) , is related to the load increment at \\((i-1)\\) , \\(d\\lambda_{1,i-1}\\) , and the number of iterations at \\((i-1)\\) , \\(J_{i-1}\\) , by the following: \\[ d\\lambda_{1,i} = d\\lambda_{1,i-1}\\frac{J_d}{J_{i-1}} \\] Code Developed by: fmk","title":"Minimum Unbalanced Displacement Norm"},{"location":"library/analysis/StaticAnalysis/EQPath/","text":"EQPath integrator EQPath $arc_length $type { \"integrator\" : [ \"EQPath\" , arc_length, type ]} References Comprehensive evaluation of structural geometrical nonlinear solution techniques Part I : Formulation and characteristics of the methods M.Rezaiee - Pajand, M.Ghalishooyan and M.Salehi - Ahmadabad Structural Engineeringand Mechanics Volume 48, Number 6, December25 2013, pages 849 - 878 DOI: https://doi.org/10.12989/sem.2013.48.6.849 Comprehensive evaluation of structural geometrical nonlinear solution techniques Part II : Comparing efficiencies of the methods M.Rezaiee - Pajand, M.Ghalishooyan and M.Salehi - Ahmadabad Structural Engineeringand Mechanics Volume 48, Number 6, December25 2013, pages 879 - 914 DOI: https://doi.org/10.12989/sem.2013.48.6.879 Code developed by: M. Salehi opensees.net@gmail.com Created: 02/19","title":"EQPath"},{"location":"library/analysis/StaticAnalysis/HSConstraint/","text":"HSConstraint","title":"HSConstraint"},{"location":"library/analysis/StaticAnalysis/LoadPath/","text":"LoadPath #include <analysis/integrator/LoadPath.h> LoadPath is a subclass of StaticIntegrator , it is used to when performing a static analysis on the FE_Model using a user specified load path. The load path is specified in a Vector, path , to the objects constructor and at each step in the analysis: \\[ \\lambda_n^{(i)} - \\lambda_{n-1} = \\texttt{path}[n] - \\texttt{path}[n-1] \\] Knowing \\(\\lambda_n^{(i)} = path(n)\\) prior to each iteration, the \\(N+1\\) unknowns in equation staticFormTaylor , is reduced to \\(N\\) unknowns and results in the following equation: \\[\\boldsymbol{r}(\\boldsymbol{u}_{n}) = \\lambda_n^{(i)} \\boldsymbol{p}_f - \\boldsymbol{p}_{\\sigma}\\left(\\boldsymbol{u}_{n}^{(i)} \\right) - \\boldsymbol{K}_n^{(i)} (\\boldsymbol{u}_{n} - \\boldsymbol{u}_{n}^{(i)}) \\label{staticFormLoadPath}\\] Methods A vector object path is created which is a copy of loadPath and an index into this vector is set to \\(0\\) . The integer INTEGRATOR_TAGS_LoadPath (defined in <classTags.h> ) is passed to the StaticIntegrator classes constructor. No vector object is created. Provided for the FEM_ObjectBroker to create a blank object, recvSelf() should be invoked on this object. Invokes the destructor on the vector path . The object obtains the current value of \\(\\lambda\\) from the path vector using the current index. The index is then incremented by \\(1\\) . If the index is greater than the size of path , \\(\\lambda\\) is set to \\(0\\) and an error message is printed. It will then invoke applyLoadDomain(0.0, \\(\\lambda\\) ) on the AnalysisModel object. Returns \\(0\\) if successful. A warning message is printed and a \\(-1\\) is returned if no AnalysisModel is associated with the object. int update ( const Vector & $ \\Delta U $ ); Invoked this causes the object to first increment the DOF_Group displacements with \\(\\Delta U\\) , by invoking incrDisp( \\(\\Delta U)\\) on the AnalysisModel, and then to update the domain, by invoking updateDomain() on the AnalysisModel. Returns \\(0\\) if successful, a warning message and a \\(-1\\) is returned if no AnalysisModel is associated with the object. int Print ( OPS_Stream & s , int flag = 0 ); The object sends to \\(s\\) its type, the current value of \\(\\lambda\\) .","title":"LoadPath"},{"location":"library/analysis/StaticAnalysis/ParkLMS3/","text":"ParkLMS3","title":"ParkLMS3"},{"location":"library/modeling/constraints/","text":"Constraints In OpenSees there are two types of constraints: Single Point constraints which prescribe the movement (typically 0) of a single dof at a node. There are a number of commands for defining single-point coonstraints: fix fixX fixY fixZ Multi-Point constraints which prescribe that the movement of certain dof at one node are defined by the movement of certain dof at another node. There again are a number of commands for defining multi-point constraints. equalDOF rigidDiaphragm rigidLink","title":"Constraints"},{"location":"library/modeling/constraints/213-EqualDOF/","text":"EqualDOF This command is used to construct a multi-point constraint between nodes. equalDOF $rNodeTag $cNodeTag $dof1 $dof2 ... rNodeTag integer tag identifying the retained node (rNode) cNodeTag integer tag identifying the constrained node (cNode) $dof1 $dof2 \u2026 nodal degrees-of-freedom that are constrained at the cNode to be the same as those at the rNode Valid range is from 1 through ndf, the number of nodal degrees-of-freedom. Examples Impose the displacements at dof\u2019s 1,3 and 5 of node 3 to be the same as those of node 2: equalDOF 2 3 1 3 5 ; References Cook, R.D., Malkus, D.S., Plesha, M. E., and Witt, R. J., \u201cConcepts and Applications of Finite Element Analysis,\u201d 4th edition, John Wiley and Sons publishers, 2002. Code Developed by: fmk","title":"EqualDOF"},{"location":"library/modeling/constraints/601-RigidDiaphragm/","text":"RigidDiaphragm This command is used to construct a number of Multi-Point Constraint ( MP_Constraint ) objects. These objects will constrain certain degrees-of-freedom at the listed constrained nodes to move as if in a rigid plane with the retained node. rigidDiaphragm $perpDirn $rNodeTag $cNodeTag1 $cNodeTag2 ... perpDirn direction perpendicular to the rigid plane (i.e. direction 3 corresponds to the 1-2 plane) rNodeTag integer tag identifying the retained node $cNodeTag1 $cNodeTag2 \u2026 integer tags identifying the constrained nodes NOTE: The constraint object is constructed assuming small rotations. NOTE: The rigidDiaphragm command works only for problems in three dimensions with six-degrees-of-freedom at the nodes (ndf = 6). Examples rigidDiaphragm 2 2 4 5 6; constrain nodes 4,5,6 to move as if in the same x-z plane as node 2. Code Developed by: fmk","title":"RigidDiaphragm"},{"location":"library/modeling/constraints/602-RigidLink/","text":"RigidLink This command is used to construct a single MP_Constraint object. NOTE: The constraint object constructed for the beam option assumes small rotations Examples connect node 3 to node 2 via a rigid link-beam. rigidLink beam 2 3 ; References Cook, R.D., Malkus, D.S., Plesha, M. E., and Witt, R. J., \u201cConcepts and Applications of Finite Element Analysis,\u201d 4th edition, John Wiley and Sons publishers, 2002. Code Developed by: fmk","title":"RigidLink"},{"location":"library/modeling/constraints/fix/","text":"Fix FixX command This command is used to construct multiple homogeneous single-point boundary constraints for all nodes whose x-coordinate lies within a specified distance from a specified coordinate. fixX $xCoordinate (ndf $ConstrValues ) &lt;-tol $tol &gt; xCoordinate x-coordinate of nodes to be constrained constrValues ndf constraint values (0 or 1) corresponding to the ndf degrees-of-freedom. 0 unconstrained (or free) 1 constrained (or fixed) tol user-defined tolerance (optional, default = 1e-10) Examples fixX 0.0 1 1 1 1 1 1; # fully restrain all nodes in y-z plane at origin (x=0.0) FixY command This command is used to construct multiple homogeneous single-point boundary constraints for all nodes whose y-coordinate lies within a specified distance from a specified coordinate. fixY $yCoordinate (ndf $ConstrValues ) &lt;-tol $tol &gt; yCoordinate y-coordinate of nodes to be constrained constrValues ndf constraint values (0 or 1) corresponding to the ndf degrees-of-freedom. 0 unconstrained (or free) 1 constrained (or fixed) tol user-defined tolerance (optional, default = 1e-10) Examples fixY 0.0 1 1 1 1 1 1; # fully restrain all nodes in x=z plane at origin (y=0.0) FixZ command This command is used to construct multiple homogeneous single-point boundary constraints for all nodes whose z-coordinate lies within a specified distance from a specified coordinate. fixZ $zCoordinate (ndf $ConstrValues ) &lt;-tol $tol &gt; zCordinate z-coordinate of nodes to be constrained constrValues ndf constraint values (0 or 1) corresponding to the ndf degrees-of-freedom. 0 unconstrained (or free) 1 constrained (or fixed) tol user-defined tolerance (optional, default = 1e-10) Examples fixZ 0.0 1 1 1 1 1 1; # fully restrain all nodes in x-y plane at origin (z=0.0) Fix command This command is used to construct single-point homogeneous boundary constraints. fix $nodeTag (ndf $constrValues ) nodeTag integer tag identifying the node to be constrained constrValues ndf constraint values (0 or 1) corresponding to the ndf degrees-of-freedom. 0 unconstrained (or free) 1 constrained (or fixed) Examples fix 1 1 1 1 1 1 1 ; # node 1: fully fixed fix 2 0 1 0 0 1 0 # node 2 : homogeneous constraints (movement = 0 ) at dof 2 and 5 only. Code Developed by: fmk","title":"Fix"},{"location":"library/modeling/damping/","text":"Modeling viscous damping in nonlinear response history analysis of buildings for earthquake excitation Anil K. Chopra, Frank McKenna First published: 17 September 2015 https://doi.org/10.1002/eqe.2622","title":"Index"},{"location":"library/modeling/damping/570-Rayleigh%20Damping%20Command/","text":"Rayleigh Damping This command is used to assign damping to all previously-defined elements and nodes. When using Rayleigh damping in OpenSees, the damping matrix for an element or node, \\(D\\) is specified as a combination of stiffness and mass-proportional damping matrices: \\[ D = \\alpha_M M + \\beta_K K_{t} + \\beta_\\text{Kinit} K_{0} + \\beta_\\text{Kcomm} K_{t - 1} \\] rayleigh $alphaM $betaK $betaKinit $betaKcomm alphaM factor applied to elements or nodes mass matrix betaK factor applied to elements current stiffness matrix. betaKinit factor applied to elements initial stiffness matrix. betaKcomm factor applied to elements committed stiffness matrix. NOTE: The command overwrites any existing damping coeeficients at the Elements and Nodes. The following paper is something that you should read if you are new to the damping and nonlinear analysis. Finley A. Charney, \u201cUnintended Consequences of Modeling Damping in Structures\u201d, J. Struct. Engrg. Volume 134, Issue 4, pp. 581-592 (April 2008) DOI Other useful papers to read: Petrini, Lorenza , Maggi, Claudio , Priestley, M. J. Nigel and Calvi, G. Michele (2008) \u201cExperimental Verification of Viscous Damping Modeling for Inelastic Time History Analyzes\u201d, Journal of Earthquake Engineering, 12:S1, pp. 125 \u2014 145 DOI Hall, J. F.(2006) \u201cProblems encountered from the use (or misuse) of Rayleigh damping,\u201d Earthquake Engineering and Structural Dynamic, 35, 525-545 DOI Examples rayleigh 0.01 0.02 0.0 0.0 Code Developed by: fmk","title":"Rayleigh Damping"},{"location":"library/modeling/damping/RayleighElement/","text":"Rayleigh Damping This command is used to assign damping to all previously-defined elements and nodes. When using Rayleigh damping in OpenSees, the damping matrix for an element or node, \\(D\\) is specified as a combination of stiffness and mass-proportional damping matrices: \\[ D = \\alpha_M M + \\beta_K K_{t} + \\beta_\\text{Kinit} K_{0} + \\beta_\\text{Kcomm} K_{t - 1} \\] setElementRayleighDampingFactors $alphaM $betaK $betaK0 $betaKc alphaM factor applied to elements or nodes mass matrix betaK factor applied to elements current stiffness matrix. betaKinit factor applied to elements initial stiffness matrix. betaKcomm factor applied to elements committed stiffness matrix. NOTE: The command overwrites any existing damping coeeficients at the Elements and Nodes. The following paper is something that you should read if you are new to the damping and nonlinear analysis. Finley A. Charney, \u201cUnintended Consequences of Modeling Damping in Structures\u201d, J. Struct. Engrg. Volume 134, Issue 4, pp. 581-592 (April 2008) DOI Other useful papers to read: Petrini, Lorenza , Maggi, Claudio , Priestley, M. J. Nigel and Calvi, G. Michele (2008) \u201cExperimental Verification of Viscous Damping Modeling for Inelastic Time History Analyzes\u201d, Journal of Earthquake Engineering, 12:S1, pp. 125 \u2014 145 DOI Hall, J. F.(2006) \u201cProblems encountered from the use (or misuse) of Rayleigh damping,\u201d Earthquake Engineering and Structural Dynamic, 35, 525-545 DOI Examples rayleigh 0.01 0.02 0.0 0.0 Code Developed by: fmk","title":"Rayleigh Damping"},{"location":"library/modeling/element/","text":"Element \\[ \\begin{aligned} &\\begin{array}{lccc} \\hline \\multicolumn{1}{c}{\\text { Problem }} & \\begin{array}{c} \\text { Displacement } \\\\ \\text { components } \\end{array} & \\text { Strain vector } \\epsilon^{T} & \\text { Stress vector } \\tau^{T} \\\\ \\hline \\text { Bar } & u & {\\left[\\epsilon_{x x}\\right]} & {\\left[\\tau_{x x}\\right]} \\\\ \\text { Beam } & w & {\\left[\\kappa_{x x}\\right]} & {\\left[M_{x x}\\right]} \\\\ \\text { Plane stress } & u, v & {\\left[\\epsilon_{x x} \\epsilon_{y y} \\gamma_{x y}\\right]} & {\\left[\\tau_{x x} \\tau_{y y} \\tau_{x y}\\right]} \\\\ \\text { Plane strain } & u, v & {\\left[\\epsilon_{x x} \\epsilon_{y y} \\gamma_{x y}\\right]} & {\\left[\\tau_{x x} \\tau_{y y} \\tau_{x y}\\right]} \\\\ \\text { Axisymmetric } & u, v & {\\left[\\epsilon_{x x} \\epsilon_{y y} \\gamma_{x y} \\epsilon_{z z}\\right]} & {\\left[\\tau_{x x} \\tau_{y y} \\tau_{x y} \\tau_{z z}\\right]} \\\\ \\text { Three-dimensional } & u, v, w & {\\left[\\epsilon_{x x} \\epsilon_{y y} \\epsilon_{z z} \\gamma_{x y} \\gamma_{y z} \\gamma_{z x}\\right]} & {\\left[\\tau_{x x} \\tau_{y y} \\tau_{z z} \\tau_{x y} \\tau_{y z} \\tau_{z x}\\right]} \\\\ \\text { Plate bending } & w & {\\left[\\kappa_{x x} \\kappa_{y y} \\kappa_{x y}\\right]} & {\\left[M_{x x} M_{y y} M_{x y}\\right]} \\\\ \\hline \\end{array} \\end{aligned} \\] \\[ \\epsilon_{x x}=\\frac{\\partial u}{\\partial x}, \\epsilon_{y y}=\\frac{\\partial v}{\\partial y}, \\gamma_{x y}=\\frac{\\partial u}{\\partial y}+\\frac{\\partial v}{\\partial x}, \\ldots, \\kappa_{x x}=\\frac{\\partial^{2} w}{\\partial x^{2}}, \\kappa_{y y}=\\frac{\\partial^{2} w}{\\partial y^{2}}, \\kappa_{x y}=2 \\frac{\\partial^{2} w}{\\partial x \\partial y} \\text {. } \\] .grid.cards>:-webkit-any(ul,ol) { display: contents !important; } ul { list-style-type: disc; margin-block-start: 1em; margin-block-end: 1em; margin-inline-start: 0px; margin-inline-end: 0px; padding-inline-start: 40px; } .grid { grid-gap: .4rem; display: grid !important; grid-template-columns: repeat(auto-fit,minmax(16rem,1fr)); margin: 1em 0; } .grid>.card { text-size-adjust: none; -webkit-font-smoothing: antialiased; font-feature-settings: \"kern\",\"liga\"; color: var(--md-typeset-color); font-family: var(--md-text-font-family); -webkit-print-color-adjust: exact; font-size: .8rem; line-height: 1.6; box-sizing: inherit; grid-gap: .4rem; display: grid; grid-template-columns: repeat(auto-fit,minmax(16rem,1fr)); margin: 1em 0; } .li { text-size-adjust: none; --md-text-font: \"Roboto\"; --md-code-font: \"Roboto Mono\"; -webkit-font-smoothing: antialiased; --md-text-font-family: var(--md-text-font,_),-apple-system,BlinkMacSystemFont,Helvetica,Arial,sans-serif; --md-code-font-family: var(--md-code-font,_),SFMono-Regular,Consolas,Menlo,monospace; font-feature-settings: \"kern\",\"liga\"; color: var(--md-typeset-color); font-family: var(--md-text-font-family); --md-default-fg-color: rgba(0,0,0,.87); --md-default-fg-color--light: rgba(0,0,0,.54); --md-default-fg-color--lighter: rgba(0,0,0,.32); --md-default-fg-color--lightest: rgba(0,0,0,.07); --md-default-bg-color: #fff; --md-default-bg-color--light: hsla(0,0%,100%,.7); --md-default-bg-color--lighter: hsla(0,0%,100%,.3); --md-default-bg-color--lightest: hsla(0,0%,100%,.12); --md-shadow-z1: 0 0.2rem 0.5rem rgba(0,0,0,.05),0 0 0.05rem rgba(0,0,0,.1); --md-shadow-z2: 0 0.2rem 0.5rem rgba(0,0,0,.1),0 0 0.05rem rgba(0,0,0,.25); --md-shadow-z3: 0 0.2rem 0.5rem rgba(0,0,0,.2),0 0 0.05rem rgba(0,0,0,.35); --md-typeset-table-sort-icon: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"m18 21-4-4h3V7h-3l4-4 4 4h-3v10h3M2 19v-2h10v2M2 13v-2h7v2M2 7V5h4v2H2Z\"/></svg>'); --md-typeset-table-sort-icon--asc: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M19 17h3l-4 4-4-4h3V3h2M2 17h10v2H2M6 5v2H2V5m0 6h7v2H2v-2Z\"/></svg>'); --md-typeset-table-sort-icon--desc: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M19 7h3l-4-4-4 4h3v14h2M2 17h10v2H2M6 5v2H2V5m0 6h7v2H2v-2Z\"/></svg>'); --md-toc-icon: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M3 9h14V7H3v2m0 4h14v-2H3v2m0 4h14v-2H3v2m16 0h2v-2h-2v2m0-10v2h2V7h-2m0 6h2v-2h-2v2Z\"/></svg>'); --md-search-result-icon: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h7c-.41-.25-.8-.56-1.14-.9-.33-.33-.61-.7-.86-1.1H6V4h7v5h5v1.18c.71.16 1.39.43 2 .82V8l-6-6m6.31 16.9c1.33-2.11.69-4.9-1.4-6.22-2.11-1.33-4.91-.68-6.22 1.4-1.34 2.11-.69 4.89 1.4 6.22 1.46.93 3.32.93 4.79.02L22 23.39 23.39 22l-3.08-3.1m-3.81.1a2.5 2.5 0 0 1-2.5-2.5 2.5 2.5 0 0 1 2.5-2.5 2.5 2.5 0 0 1 2.5 2.5 2.5 2.5 0 0 1-2.5 2.5Z\"/></svg>'); --md-source-forks-icon: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"M5 3.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0zm0 2.122a2.25 2.25 0 1 0-1.5 0v.878A2.25 2.25 0 0 0 5.75 8.5h1.5v2.128a2.251 2.251 0 1 0 1.5 0V8.5h1.5a2.25 2.25 0 0 0 2.25-2.25v-.878a2.25 2.25 0 1 0-1.5 0v.878a.75.75 0 0 1-.75.75h-4.5A.75.75 0 0 1 5 6.25v-.878zm3.75 7.378a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0zm3-8.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5z\"/></svg>'); --md-source-repositories-icon: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"M2 2.5A2.5 2.5 0 0 1 4.5 0h8.75a.75.75 0 0 1 .75.75v12.5a.75.75 0 0 1-.75.75h-2.5a.75.75 0 1 1 0-1.5h1.75v-2h-8a1 1 0 0 0-.714 1.7.75.75 0 0 1-1.072 1.05A2.495 2.495 0 0 1 2 11.5v-9zm10.5-1V9h-8c-.356 0-.694.074-1 .208V2.5a1 1 0 0 1 1-1h8zM5 12.25v3.25a.25.25 0 0 0 .4.2l1.45-1.087a.25.25 0 0 1 .3 0L8.6 15.7a.25.25 0 0 0 .4-.2v-3.25a.25.25 0 0 0-.25-.25h-3.5a.25.25 0 0 0-.25.25z\"/></svg>'); --md-source-stars-icon: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"M8 .25a.75.75 0 0 1 .673.418l1.882 3.815 4.21.612a.75.75 0 0 1 .416 1.279l-3.046 2.97.719 4.192a.75.75 0 0 1-1.088.791L8 12.347l-3.766 1.98a.75.75 0 0 1-1.088-.79l.72-4.194L.818 6.374a.75.75 0 0 1 .416-1.28l4.21-.611L7.327.668A.75.75 0 0 1 8 .25zm0 2.445L6.615 5.5a.75.75 0 0 1-.564.41l-3.097.45 2.24 2.184a.75.75 0 0 1 .216.664l-.528 3.084 2.769-1.456a.75.75 0 0 1 .698 0l2.77 1.456-.53-3.084a.75.75 0 0 1 .216-.664l2.24-2.183-3.096-.45a.75.75 0 0 1-.564-.41L8 2.694v.001z\"/></svg>'); --md-source-version-icon: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"M2.5 7.775V2.75a.25.25 0 0 1 .25-.25h5.025a.25.25 0 0 1 .177.073l6.25 6.25a.25.25 0 0 1 0 .354l-5.025 5.025a.25.25 0 0 1-.354 0l-6.25-6.25a.25.25 0 0 1-.073-.177zm-1.5 0V2.75C1 1.784 1.784 1 2.75 1h5.025c.464 0 .91.184 1.238.513l6.25 6.25a1.75 1.75 0 0 1 0 2.474l-5.026 5.026a1.75 1.75 0 0 1-2.474 0l-6.25-6.25A1.75 1.75 0 0 1 1 7.775zM6 5a1 1 0 1 0 0 2 1 1 0 0 0 0-2z\"/></svg>'); --md-tag-icon: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"m5.41 21 .71-4h-4l.35-2h4l1.06-6h-4l.35-2h4l.71-4h2l-.71 4h6l.71-4h2l-.71 4h4l-.35 2h-4l-1.06 6h4l-.35 2h-4l-.71 4h-2l.71-4h-6l-.71 4h-2M9.53 9l-1.06 6h6l1.06-6h-6Z\"/></svg>'); --md-tooltip-width: 20rem; --md-version-icon: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 320 512\"><!--! Font Awesome Free 6.1.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) Copyright 2022 Fonticons, Inc.--><path d=\"m310.6 246.6-127.1 128c-7.1 6.3-15.3 9.4-23.5 9.4s-16.38-3.125-22.63-9.375l-127.1-128C.224 237.5-2.516 223.7 2.438 211.8S19.07 192 32 192h255.1c12.94 0 24.62 7.781 29.58 19.75s3.12 25.75-6.08 34.85z\"/></svg>'); --md-footnotes-icon: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M19 7v4H5.83l3.58-3.59L8 6l-6 6 6 6 1.41-1.42L5.83 13H21V7h-2Z\"/></svg>'); --md-details-icon: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M8.59 16.58 13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.42Z\"/></svg>'); --md-tasklist-icon: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M1 12C1 5.925 5.925 1 12 1s11 4.925 11 11-4.925 11-11 11S1 18.075 1 12zm16.28-2.72a.75.75 0 0 0-1.06-1.06l-5.97 5.97-2.47-2.47a.75.75 0 0 0-1.06 1.06l3 3a.75.75 0 0 0 1.06 0l6.5-6.5z\"/></svg>'); --md-tasklist-icon--checked: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M1 12C1 5.925 5.925 1 12 1s11 4.925 11 11-4.925 11-11 11S1 18.075 1 12zm16.28-2.72a.75.75 0 0 0-1.06-1.06l-5.97 5.97-2.47-2.47a.75.75 0 0 0-1.06 1.06l3 3a.75.75 0 0 0 1.06 0l6.5-6.5z\"/></svg>'); --md-accent-fg-color: #526cfe; --md-accent-fg-color--transparent: rgba(82,108,254,.1); --md-accent-bg-color: #fff; --md-accent-bg-color--light: hsla(0,0%,100%,.7); --md-primary-fg-color: #4051b5; --md-primary-fg-color--light: #5d6cc0; --md-primary-fg-color--dark: #303fa1; --md-primary-bg-color: #fff; --md-primary-bg-color--light: hsla(0,0%,100%,.7); --md-code-fg-color: #36464e; --md-code-bg-color: #f5f5f5; --md-code-hl-color: rgba(255,255,0,.5); --md-code-hl-number-color: #d52a2a; --md-code-hl-special-color: #db1457; --md-code-hl-function-color: #a846b9; --md-code-hl-constant-color: #6e59d9; --md-code-hl-keyword-color: #3f6ec6; --md-code-hl-string-color: #1c7d4d; --md-code-hl-name-color: var(--md-code-fg-color); --md-code-hl-operator-color: var(--md-default-fg-color--light); --md-code-hl-punctuation-color: var(--md-default-fg-color--light); --md-code-hl-comment-color: var(--md-default-fg-color--light); --md-code-hl-generic-color: var(--md-default-fg-color--light); --md-code-hl-variable-color: var(--md-default-fg-color--light); --md-typeset-color: var(--md-default-fg-color); --md-typeset-a-color: var(--md-primary-fg-color); --md-typeset-mark-color: rgba(255,255,0,.5); --md-typeset-del-color: rgba(245,80,61,.15); --md-typeset-ins-color: rgba(11,213,112,.15); --md-typeset-kbd-color: #fafafa; --md-typeset-kbd-accent-color: #fff; --md-typeset-kbd-border-color: #b8b8b8; --md-typeset-table-color: rgba(0,0,0,.12); --md-admonition-fg-color: var(--md-default-fg-color); --md-admonition-bg-color: var(--md-default-bg-color); --md-footer-fg-color: #fff; --md-footer-fg-color--light: hsla(0,0%,100%,.7); --md-footer-fg-color--lighter: hsla(0,0%,100%,.3); --md-footer-bg-color: rgba(0,0,0,.87); --md-footer-bg-color--dark: rgba(0,0,0,.32); --md-mermaid-font-family: var(--md-text-font-family),sans-serif; --md-mermaid-edge-color: var(--md-code-fg-color); --md-mermaid-node-bg-color: var(--md-accent-fg-color--transparent); --md-mermaid-node-fg-color: var(--md-accent-fg-color); --md-mermaid-label-bg-color: var(--md-default-bg-color); --md-mermaid-label-fg-color: var(--md-code-fg-color); -webkit-print-color-adjust: exact; font-size: .8rem; line-height: 1.6; list-style-type: disc; box-sizing: inherit; border: .05rem solid var(--md-default-fg-color--lightest); border-radius: .1rem; display: block; margin: 0; padding: .8rem; transition: border .25s,box-shadow .25s; } Beams and Columns \u2026 beams Cables and Trusses \u2026 Reference Quadrilaterals Quadrilaterals Quadrilaterals Triangle \u2026 Triangles Truss Elements Truss - Basic 2D/3D truss Truss2 - Truss element for concrete walls CorotTruss - Corotational truss element Beam-Column Elements Elastic Beam Column Elastic Beam Column Element with Stiffness Modifiers Elastic Timoshenko Beam Column Element Beam With Hinges Element Displacement-Based Beam-Column Element Force-Based Beam-Column Element Flexure-Shear Interaction Displacement-Based Beam-Column Element MVLEM - Multiple-Vertical-Line-Element-Model for flexure dominated RC Walls SFI_MVLEM - Cyclic shear-flexure interaction model for RC walls Zero-Length Elements zeroLength zeroLengthND zeroLengthSection Element CoupledZeroLength zeroLengthContact zeroLengthContactNTS2D zeroLengthInterface2D zeroLengthImpact3D Joint Elements BeamColumnJoint Element ElasticTubularJoint Element Joint2D Element Link Elements Two Node Link Element Bearing Elements elastomericBearingPlasticity Elastomeric Bearing (Plasticity) elastomericBearingBoucWen Elastomeric Bearing (Bouc-Wen) Flat Slider Bearing Single Friction Pendulum Bearing TFP Triple Friction Pendulum Bearing TripleFrictionPendulum MultipleShearSpring KikuchiBearing YamamotoBiaxialHDR Element ElastomericX LeadRubberX HDR high damping rubber bearing (3D) RJWatsonEqsBearing RJ-Watson EQS Bearing Element FPBearingPTV Quadrilateral Elements Quad Element Shell Element ShellDKGQ ShellNLDKGQ ShellNL Bbar Plane Strain Quadrilateral Element Enhanced Strain Quadrilateral Element SSPquad Element Triangular Elements Tri31 Element ShellDKGT ShellNLDKGT Brick Elements Standard Brick Bbar Brick Twenty Node Brick Twenty Seven Node Brick SSPbrick Tetrahedron Elements FourNodeTetrahedron The \\(u / p\\) formulation . In this formulation, the pressure variables pertain only to the specific element being considered. In the analysis of almost incompressible media, the element pressure variables can be statically condensed out prior to the element assemblage. Continuity of pressure is not enforced between elements but will be a result of the finite element solution if the mesh used is fine enough. UC San Diego u-p element (saturated soil) Four Node Quad u-p Brick u-p bbarQuad u-p bbarBrick u-p Nine Four Node Quad u-p Twenty Eight Node Brick u-p Twenty Node Brick u-p Brick Large Displacement u-p SSPquadUP SSPbrickUP Contact Elements SimpleContact2D SimpleContact3D BeamContact2D BeamContact3D BeamEndContact3D zeroLengthImpact3D Cable Elements CatenaryCable Misc. ShallowFoundationGen SurfaceLoad Element VS3D4 AC3D8 ASI3D8 AV3D4","title":"Element"},{"location":"library/modeling/element/beam/2056-Beam%20With%20Hinges%20Element/","text":"BeamWithHinges This command is used to construct a forceBeamColumn element object, which is based on the non-iterative (or iterative) flexibility formulation. The locations and weights of the element integration points are based on so-called plastic hinge integration, which allows the user to specify plastic hinge lenghts at the element ends. Two-point Gauss integration is used on the element interior while two-point Gauss-Radau integration is applied over lengths of \\(4\\ell_{p,i}\\) and \\(4\\ell_{p,j}\\) at the element ends, viz. \u201cmodified Gauss-Radau plastic hinge integration\u201d. A total of six integration points are used in the element state determination (two for each hinge and two for the interior). Users may be familiar with the beamWithHinges command format (see below); however, the format shown here allows for the simple but important case of using a material nonlinear section model on the element interior. The previous beamWithHinges command constrained the user to an elastic interior, which often led to unconservative estimates of the element resisting force when plasticity spread beyond the plastic hinge regions in to the element interior. The advantages of this new format over the previous beamWithHinges command are Plasticity can spread beyond the plastic hinge regions Hinges can form on the element interior, e.g., due to distributed member loads element forceBeamColumn $eleTag $iNode $jNode $transfTag \"HingeRadau $ secTagI $ LpI $ secTagJ $ LpJ $ secTagInterior\" < -mass $massDens > < -iter $maxIters $tol > eleTag unique element object tag iNode jNode nodes at element ends I and J, respectively secTagI identifier for previously-defined section object at end I LpI plastic hinge length at end I secTagJ identifier for previously-defined section object at end J LpJ plastic hinge length at end J secTagInterior identifier for previously-defined section object on the element interior (DOES NOT HAVE TO BE ELASTIC, but can be any type of section, including fiber) transfTag identifier for previously-defined coordinate-transformation maxIters maximum number of iterations to undertake to satisfy element compatibility (optional, default=1) tol tolerance for satisfaction of element compatibility (optional, default=10-16) NOTE: The keyword HingeRadau can be changed to one of the following in order to use a different hinge integration approach: HingeRadau \u2013 two-point Gauss-Radau applied to the hinge regions over \\(4\\ell_{pI}\\) and \\(4\\ell_{pJ}\\) (six element integration points) HingeRadauTwo \u2013 two-point Gauss-Radau in the hinge regions applied over \\(\\ell_{pI}\\) and \\(\\ell_{pJ}\\) (six element integration points) HingeMidpoint \u2013 midpoint integration over the hinge regions (four element integration points) HingeEndpoint \u2013 endpoint integration over the hinge regions (four element integration points) For more information on the behavior, advantages, and disadvantages of these approaches to plastic hinge integration, see Scott, M.H. and G.L. Fenves. \u201c Plastic Hinge Integration Methods for Force-Based Beam-Column Elements \u201d, Journal of Structural Engineering, 132(2):244-252, February 2006. Scott, M.H. and K.L. Ryan. \u201c Moment-Rotation Behavior of Force-Based Plastic Hinge Elements \u201d, Earthquake Spectra, 29(2):597-607, May 2013. The primary advantages of HingeRadau are The user can specify a physically meaningful plastic hinge length The largest bending moment is captured at the element ends The exact numerical solution is recovered for a linear-elastic prismatic beam The characteristic length is equal to the user-specified plastic hinge length when deformations localize at the element ends while the primary disadvantages are The element post-yield response is too flexible for strain-hardening section response (consider using HingeRadauTwo ) The user needs to know the plastic hinge length a priori (empirical equations are available) NOTE: See the forceBeamColumn page for valid recorder queries. Original command (maintained for backward compatibility) NOTE: this form of the command forces the element interior to be linear-elastic, which is not always the best approach. For 2D: element beamWithHinges $eleTag $iNode $jNode $secTagI $Lpi $secTagJ $Lpj $E $A $Iz $transfTag < -mass $massDens > < -iter $maxIters $tol > For 3D: element beamWithHinges $eleTag $iNode $jNode $secTagI $Lpi $secTagJ $Lpj $E $A $Iz $Iy $G $J $transfTag < -mass $massDens > < -iter $maxIters $tol > All inputs are the same as above, with the following additional inputs, which are used solely to create a \u201cdummy\u201d elastic section at the two Gauss integration points of the element interior E Youngs modulus elastic portion A Area for elastic portion Iz second moment of area for elastic portion about local z Iy second moment of area for elastic portion about local y G torsional moment of inertia of cross section for elastic portion J Shear Modulus of elastic portion. C++ Interface (BeamWithHinges2D) #include <element/BeamWithHinges2D.h> class BeamWithHinges2D : public DomainComponent BeamWithHinges2D is a beam-column element which uses the force based formulation for its state determination. This element has material non-linear hinges at both ends and exhibits linear elastic behavior through its interior region, including linear elastic shear effects. Constructors Destructor Constructs a BeamWithHinges2D object with tag tag , unique among all elements in the domain. The end nodes of the element are set to be those with tags nodeI and nodeJ . The elastic properties of the interior beam region are set to be E , the modulus of elasticity; I , the second moment of area of the beam cross-section; A , the beam cross-sectional area; G , the shear modulus; and alpha , the cross-section shape factor for elastic shear effects. Element hinges are created by obtaining copies of sectionI and sectionJ . The hinge lengths are specified as ratios of the total element length, ratioI and ratioJ . The element distributed load (reference value) is set to be distrLoad , and the element mass density per unit length is massDens . Constructs a BeamWithHinges2D object with tag tag , unique among all elements in the domain. The end nodes of the element are set to be those with tags nodeI and nodeJ . The elastic properties of the interior beam region are set to be E , the modulus of elasticity; I , the second moment of area of the beam cross-section; A , the beam cross-sectional area; G , the shear modulus; and alpha , the cross-section shape factor for elastic shear effects. Element hinges are created by obtaining copies of sectionI and sectionJ . The hinge lengths are specified as ratios of the total element length, ratioI and ratioJ . The element mass density per unit length is massDens . Constructs a blank BeamWithHinges2D object. Invokes the section destructors. // Public Methods dealing with Nodes and dof // Public Methods dealing with State // Public Methods for obtaining Linearized Stiffness, Mass and Damping Matrices // Public Methods for obtaining Resisting Forces Returns 2, the number of external nodes for this element. Returns an ID containing the tags of the two external nodes for this element. Returns 6, the number of degrees of freedom for this element. int commitState ( void ); Invokes commitState() on each section and returns the sum of the result of these invocations. int revertToLastCommit ( void ); Invokes revertToLastCommit() on each section and returns the sum of the result of these invocations. int revertToStart ( void ); Invokes revertToStart() on each section and returns the sum of the result of these invocations. const Matrix & getTangentStiff ( void ); Computes the element flexibility matrix, then returns its inverse, the element stiffness matrix. The element flexibility is the sum of the hinge flexibilities, \\(\\mathbf{f}_I\\) and \\(\\mathbf{f}_J\\) , and the elastic flexibility of the beam interior, \\(\\mathbf{f}_{mid}\\) . \\[\\label{eq:fele} \\fbas := \\int_{0}^{L}{\\bint^T \\fsec \\bint \\: dx} = \\mathbf{f}_I + \\mathbf{f}_{mid} + \\mathbf{f}_J\\] The flexibility of the beam interior is obtained in closed form, \\[\\mathbf{f}_{mid} = \\int_{l_I}^{L-l_J}{\\bint^T \\fsec_{mid} \\bint \\: dx}\\] where \\(\\bint\\) is the force interpolation matrix, \\[\\bint := \\left[ \\begin{array}{c c c} 1 & 0 & 0 \\\\ 0 & \\frac{x}{L} & \\frac{x}{L} - 1 \\\\ 0 & \\frac{1}{L} & \\frac{1}{L} \\end{array} \\right]\\] and \\(\\fsec\\) is the elastic section flexibility of the beam interior. \\[\\fsec_{mid} = \\left[ \\begin{array}{c c c} \\frac{1}{EA} & 0 & 0 \\\\ 0 & \\frac{1}{EI} & 0 \\\\ 0 & 0 & \\frac{1}{\\alpha GA} \\end{array} \\right]\\] The hinge flexibilities, \\(\\mathbf{f}_I\\) and \\(\\mathbf{f}_J\\) , are obtained by the midpoint integration rule, \\[{\\mathbf{f}}_i = \\bint(x_i)^T \\fsec_i \\bint(x_i) * l_i, \\:\\: i=I,J\\] where \\(x_i\\) is the midpoint of hinge \\(i\\) , measured along the length of the beam, and is the point at which the force interpolation matrix, \\(\\bint\\) is evaluated. The flexiblity, \\(\\fsec_i\\) , is obtained from the constitutive relation for section \\(i\\) . The element stiffness is then obtained by inversion of the element flexibility, given by Equation [eq:fele$$ . \\[\\label{eq:kele} \\kbas = \\fbas^{-1}\\] The element then obtains the matrix, \\(\\mathbf{A}\\) , which transforms the element basic stiffness from its corotating frame to the global frame of reference. The transformed stiffness matrix, \\(\\kele\\) , is then assembled into the structural system of equations. \\[\\kele = \\mathbf{A}^T \\kbas \\mathbf{A}\\] const Matrix & getSecantStiff ( void ); To return the elements secant stiffness matrix. THIS SECANT MAY BE REMOVED. const Matrix & getDamp ( void ); To return the damping matrix. const Matrix & getMass ( void ); Returns the element lumped mass matrix, \\(\\textrm{mass}\\) . It is assumed that the mass density per unit length, \\(\\rho\\) , is constant along the entire element, including the hinge regions. \\[\\label{eq:mele} \\textrm{mass} = \\left[ \\begin{array}{c c c c c c} \\frac{\\rho L}{2} & 0 & 0 & 0 & 0 & 0 \\\\ 0 & \\frac{\\rho L}{2} & 0 & 0 & 0 & 0 \\\\ 0 & 0 & 0 & 0 & 0 & 0 \\\\ 0 & 0 & 0 & \\frac{\\rho L}{2} & 0 & 0 \\\\ 0 & 0 & 0 & 0 & \\frac{\\rho L}{2} & 0 \\\\ 0 & 0 & 0 & 0 & 0 & 0 \\end{array} \\right]\\] void zeroLoad ( void ); This is a method invoked to zero the element load contributions to the residual. const Vector & getResistingForce ( void ); Returns the element resisting force vector. The basic element force vector is obtained as the product of the basic element stiffness, \\(\\kbas\\) , given by Equation [eq:kele$$ , and the basic element deformations, \\(\\vbas\\) . \\[\\qbas = \\kbas \\vbas\\] The basic element force vector is then transformed from the corotating frame to the global frame of reference. The transformed force vector is then assembled into the structural system of equations. \\[\\label{eq:qele} \\qele = \\mathbf{A}^T \\qbas\\] const Vector & getResistingForceIncInertia ( void ); Returns the element resisting force vector, \\(\\tilde{\\qele}\\) with inertia forces included, \\[\\tilde{\\qele} = \\qele - \\textrm{mass} \\ddot{\\mathbf u}\\] where \\(\\qele\\) and \\(\\textrm{mass}\\) are obtained from Equations [eq:qele \\[ ](#eq:qele){reference-type=\"ref\" reference=\"eq:qele\"} and [\\[eq:mele\\] , respectively, and \\(\\ddot{\\mathbf u}\\) is the vector of trial nodal accelerations for the element. Code maintained by: Michael H. Scott, Oregon State University NEED TO ADD ADD_INERTIA_LOAD TO INTERFACE .. SEE EARTHQUAKE_PATTERN CLASS.","title":"BeamWithHinges"},{"location":"library/modeling/element/beam/2057-Force-Based%20Beam-Column%20Element/","text":"Force-Based Beam-Column This command is used to construct a forceBeamColumn element object, which is based on the iterative force-based formulation. A variety of numerical integration options can be used in the element state determination and encompass both distributed plasticity and plastic hinge integration. See image:IntegrationTypes.pdf for more details on the available numerical integration options. Model.element(\u201c forceBeamColumn \u201d, name, nodes, geom, integration, cMass) nodes [iNode,jNode] , iNode Ref(Node) jNode Ref(Node) geom Ref(geomTransf) integration BeamInt cMass = False bool Flag indicating whether to use consistent mass matrix. mass = 0.0 float element mass per unit length Original command that assumes Gauss-Lobatto integration with a copy of the same section force-deformation model at each integration point: element forceBeamColumn $eleTag $iNode $jNode $numIntgrPts $secTag $transfTag < -mass $massDens > < -iter $maxIters $tol > < -integration $intType > eleTag unique element object tag numIntgrPts number of Gauss-Lobatto integration points along the element. secTag identifier for previously-defined section object Alternative command (kept for backward compatability): element nonlinearBeamColumn $eleTag $iNode $jNode $numIntgrPts $secTag $transfTag < -mass $massDens > < -iter $maxIters $tol > < -integration $intType > eleTag unique element object tag intType numerical integration type, options are Lobatto, Legendre, Radau, NewtonCotes, Trapezoidal (optional, default= Lobatto) NOTE: The following three commands give the same element definition (with Gauss-Lobatto integration) despite some apparent permutations of the input arguments: element forceBeamColumn $eleTag $iNode $jNode $transfTag Lobatto $secTag $numIntgrPts element forceBeamColumn $eleTag $iNode $jNode $numIntgrPts $secTag $transfTag element nonlinearBeamColumn $eleTag $iNode $jNode $numIntgrPts $secTag $transfTag Notes The -iter switch enables the iterative form of the flexibility formulation. Note that the iterative form can improve the rate of global convergence at the expense of more local element computation. The valid response elements that an element of this type will respond to are: force or globalForce localForce basicForce section $sectionNumber $arg1 $arg2 ... (note: sectionNumer is integer 1 through numIntegrPts ) basicDeformation plasticDeformation inflectionPoint tangentDrift integrationPoints integrationWeights Here is a link to the source code to obtain information about the location and weight of the Gauss-Lobatto integration points 1 Examples force beam column element added with tag 1 between nodes 2 and 4 that has Gauss-Lobatto 5 integration points, each using section 8, and the element uses geometric transformation 9 element forceBeamColumn 1 2 4 9 Lobatto 8 5 ; FURTHER DOCUMENTATION ON INTEGRATION OPTIONS: image:IntegrationTypes.pdf References Neuenhofer, Ansgar, FC Filippou. Geometrically Nonlinear Flexibility-Based Frame Finite Element. ASCE Journal of Structural Engineering, Vol. 124, No. 6, June, 1998. ISSN 0733-9445/98/0006-0704-0711. Paper 16537. pp. 704-711. Neuenhofer, Ansgar, FC Filippou. Evaluation of Nonlinear Frame Finite-Element Models. ASCE Journal of Structural Engineering, Vol. 123, No. 7, July, 1997. ISSN 0733-9445/97/0007-0958-0966. Paper No. 14157. pp. 958-966. Neuenhofer, Ansgar, FC Filippou. ERRATA \u2013 Geometrically Nonlinear Flexibility-Based Frame Finite Element. ASCE Journal of Structural Engineering, Vol. 124, No. 6, June, 1998. ISSN 0733-9445/98/0006-0704-0711. Paper 16537. pp. 704-711. Taucer, Fabio F, E Spacone, FC Filippou. A Fiber Beam-Column Element for Seismic Response Analysis of Reinforced Concrete Structures. Report No. UCB/EERC-91/17. Earthquake Engineering Research Center, College of Engineering, University of California, Berkeley. December 1991. Spacone, Enrico, V Ciampi, FC Filippou. A Beam Element for Seismic Damage Analysis. Report No. UCB/EERC-92/07. Earthquake Engineering Research Center, College of Engineering, University of California, Berkeley. August 1992. Code maintained by: Michael H. Scott, Oregon State University","title":"Force-Based Beam-Column"},{"location":"library/modeling/element/beam/2153-Displacement-Based%20Beam-Column%20Element/","text":"Displacement-Based Beam-Column This command is used to construct a displacement beam element object, which is based on the displacement formulation, and considers the spread of plasticity along the element. element dispBeamColumn $eleTag $iNode $jNode $numIntgrPts $secTag $transfTag < -mass $massDens > < -cMass > < -integration $intType > To change the sections along the element length, the following form of command may be used: element dispBeamColumn $eleTag $iNode $jNode $numIntgrPts -sections $secTag1 $secTag2 ... $transfTag < -mass $massDens > < -cMass > < -integration $intType > eleTag unique element object tag iNode jNode end nodes numIntgrPts number of integration points along the element. secTag identifier for previously-defined section object secTag1 secTag2 \u2026 numIntgrPts identifiers of previously-defined section object transfTag identifier for previously-defined coordinate-transformation (CrdTransf) object massDens element mass density (per unit length), from which a lumped-mass matrix is formed (optional, default = 0.0) -cMass to form consistent mass matrix (optional, default = lumped mass matrix) intType numerical integration type, options are Lobotto, Legendre, Radau, NewtonCotes, Trapezoidal (optional, default = Legendre) NOTE: The default integration along the element is based on Gauss-Legendre quadrature rule. The default element is prismatic, i.e. the beam is represented by the section model identified by secTag at each integration point. The valid queries to a displacement-based beam-column element when creating an ElementRecorder object are force , and section $secNum $secArg1 $secArg2... Where secNum refers to the integration point whose data is to be output valid entries being 1 through numIntgrPts . Examples displacement-based beam column element added with tag 1 between nodes 2 and 4 that has 5 integration points, each using section 8, and the element uses geometric transformation 9 element dispBeamColumn 1 2 4 5 8 9 ; References Code Developed by: Michael H. Scott, Oregon State University","title":"Displacement-Based Beam-Column"},{"location":"library/modeling/element/beam/2184-Elastic%20Beam%20Column%20Element/","text":"ElasticBeamColumn This command is used to construct an elasticBeamColumn element object. The arguments for the construction of an elastic beam-column element depend on the dimension of the problem, ndm: Model.element(\u201c ElasticBeamColumn3D \u201d, \u2003\u2003\u2003name, \u2003\u2003\u2003nodes, \u2003\u2003\u2003A, \u2003\u2003\u2003E, \u2003\u2003\u2003G, \u2003\u2003\u2003J, \u2003\u2003\u2003iyc, \u2003\u2003\u2003ixc, \u2003\u2003\u2003geom, \u2003\u2003\u2003cMass) nodes [iNode,jNode] , iNode Ref(Node) jNode Ref(Node) A float cross-sectional area E float Young\u2019s modulus of elasticity G float J float iyc float Centroidal moment of inertia ixc float geom Ref(geomTransf) mass = 0.0 float element mass per unit length cMass = False bool Flag indicating whether to use consistent mass matrix. For a two-dimensional problem: element elasticBeamColumn $eleTag $iNode $jNode $A $E $Iz $transfTag < -mass $massDens > < -cMass > For a three-dimensional problem: element elasticBeamColumn $eleTag $iNode $jNode $A $E $G $J $Iy $Iz $transfTag < -mass $massDens > < -cMass > eleTag unique element object tag iNode jNode end nodes A cross-sectional area of element E Young\u2019s Modulus G Shear Modulus J torsional moment of inertia of cross section Iz second moment of area about the local z-axis Iy second moment of area about the local y-axis transfTag identifier for previously-defined coordinate-transformation (CrdTransf) object massDens element mass per unit length (optional, default = 0.0) -cMass to form consistent mass matrix (optional, default = lumped mass matrix) NOTE: The valid queries to an elastic beam-column element when creating an ElementRecorder object are \u2018force\u2019. Examples element elasticBeamColumn 1 2 4 5.5 100.0 1e6 9; # elastic element tag 1 between nodes 2 and 4 with area 5.5, E 100 and Iz 1e6 which uses transformation 9 Code Developed by: fmk","title":"ElasticBeamColumn"},{"location":"library/modeling/element/beam/2194-Elastic%20Timoshenko%20Beam%20Column%20Element/","text":"Elastic Timoshenko Beam Column This command is used to construct an ElasticTimoshenkoBeam element object. A Timoshenko beam is a frame member that accounts for shear deformations. The arguments for the construction of an elastic Timoshenko beam element depend on the dimension of the problem, ndm: For a two-dimensional problem: element ElasticTimoshenkoBeam $eleTag $iNode $jNode $E $G $A $Iz $Avy $transfTag &lt;-mass $massDens &gt; &lt;-cMass&gt; For a three-dimensional problem: element ElasticTimoshenkoBeam $eleTag $iNode $jNode $E $G $A $Jx $Iy $Iz $Avy $Avz $transfTag &lt;-mass $massDens &gt; &lt;-cMass&gt; eleTag unique element object tag iNode jNode end nodes E Young\u2019s Modulus G Shear Modulus A cross-sectional area of element Jx torsional moment of inertia of cross section Iy second moment of area about the local y-axis Iz second moment of area about the local z-axis Avy Shear area for the local y-axis Avz Shear area for the local z-axis transfTag identifier for previously-defined coordinate-transformation (CrdTransf) object massDens element mass per unit length (optional, default = 0.0) -cMass to form consistent mass matrix (optional, default = lumped mass matrix) NOTES: The valid queries to an elastic Timoshenko beam element when creating an ElementRecorder object are \u2018force\u2019. For solid rectangular sections, the shear area is 5/6 of the gross area. For solid circular sections, the shear area is 9/10 of the gross area. For I-shapes, the shear area can be approximated as Aweb. Examples element ElasticTimoshenkoBeam 1 2 4 100.0 45.0 6.0 4.5 5.0 9; # elastic Timoshenko element with tag 1 between nodes 2 and 4 with E=100, G=45, A=6.0, I=4.5 and Av=5.0 which uses transformation 9 Code Developed by: Andreas Schellenberg","title":"Elastic Timoshenko Beam Column"},{"location":"library/modeling/element/beam/2210-DispBeamColumnW3D/","text":"DispBeamColumnW3D Warping beam column Example script from report # -------------------------------------------------------------------------------------------------- # Appendix 2. Cantilever beam subject to end torque (Displacement Based Beam-Column Warping Element) # SET UP ---------------------------------------------------------------------------- wipe; # clear opensees model source Wsection.tcl; # include definition for I-section source LibUnits.tcl; # include units model basic -ndm 3 -ndf 7 ; # 3 dimensions, 7 dof per node set dir Cantilever-endtorque file mkdir $dir ; # create data directory # define GEOMETRY ------------------------------------------------------------- # nodal coordinates: node 1 0 0 0 ; node 2 12 0 0 # node#, X Y z node 3 24 0 0 node 4 36 0 0 node 5 48 0 0 node 6 60 0 0 node 7 72 0 0 node 8 84 0 0 node 9 96 0 0 node 10 108 0 0 node 11 120 0 0 node 12 132 0 0 node 13 144 0 0 node 14 156 0 0 node 15 168 0 0 node 16 180 0 0 node 17 192 0 0 node 18 204 0 0 node 19 216 0 0 node 20 228 0 0 node 21 240 0 0 # Single point constraints -- Boundary Conditions fix 1 1 1 1 1 1 1 0 ; # define material and section set IDsteel 1 ; # assign material tag set Fy 500000 ; # assign a super large yielding stress set Es 29000.0 ; set Bs 0.000001 ; # strain-hardening ratio set R0 15 ; set poisson 0.3 set G 11200.0 ; set J 5.861 set GJ [expr $G * $J ] set BeamSecTagFiber 1 ; # assign a tag number to the beam section fiber set SecTagTorsion 70 ; # assign a tag number to the torsion information of the beam set BeamSecTag 3 uniaxialMaterial Steel02 $IDsteel $Fy $Es $Bs ; # build steel material set d [expr 21.62 * $in ] ; # depth set bf [expr 8.42 * $in ] ; # flange width set tf [expr 0.93 * $in ] ; # flange thickness set tw [expr 0.58 * $in ] ; # web thickness set nfdw 32 ; # number of fibers along dw set nftw 4 ; # number of fibers along tw set nfbf 32 ; # number of fibers along bf set nftf 4 ; # number of fibers along tf Wsection $BeamSecTagFiber $IDsteel $d $bf $tf $tw $nfdw $nftw $nfbf $nftf ; #build beam section uniaxialMaterial Elastic $SecTagTorsion $GJ section Aggregator $BeamSecTag $SecTagTorsion T -section $BeamSecTagFiber ; # add elastic torsion set numIntgrPts 5 ; # number of integration points for dis-based element set BeamTransfTag 1 ; # associate a tag to beam transformation # define geometric transformation: performs a corotational geometric # transformation of beam stiffness and resisting force from the basic system to # the global-coordinate system geomTransf Corotational $BeamTransfTag 0 0 1 # Define ELEMENTS ------------------------------------------------------------- element dispBeamColumn 1 1 2 $numIntgrPts $BeamSecTag $BeamTransfTag element dispBeamColumn 2 2 3 $numIntgrPts $BeamSecTag $BeamTransfTag element dispBeamColumn 3 3 4 $numIntgrPts $BeamSecTag $BeamTransfTag element dispBeamColumn 4 4 5 $numIntgrPts $BeamSecTag $BeamTransfTag element dispBeamColumn 5 5 6 $numIntgrPts $BeamSecTag $BeamTransfTag element dispBeamColumn 6 6 7 $numIntgrPts $BeamSecTag $BeamTransfTag element dispBeamColumn 7 7 8 $numIntgrPts $BeamSecTag $BeamTransfTag element dispBeamColumn 8 8 9 $numIntgrPts $BeamSecTag $BeamTransfTag element dispBeamColumn 9 9 10 $numIntgrPts $BeamSecTag $BeamTransfTag element dispBeamColumn 10 10 11 $numIntgrPts $BeamSecTag $BeamTransfTag element dispBeamColumn 11 11 12 $numIntgrPts $BeamSecTag $BeamTransfTag element dispBeamColumn 12 12 13 $numIntgrPts $BeamSecTag $BeamTransfTag element dispBeamColumn 13 13 14 $numIntgrPts $BeamSecTag $BeamTransfTag element dispBeamColumn 14 14 15 $numIntgrPts $BeamSecTag $BeamTransfTag element dispBeamColumn 15 15 16 $numIntgrPts $BeamSecTag $BeamTransfTag element dispBeamColumn 16 16 17 $numIntgrPts $BeamSecTag $BeamTransfTag element dispBeamColumn 17 17 18 $numIntgrPts $BeamSecTag $BeamTransfTag element dispBeamColumn 18 18 19 $numIntgrPts $BeamSecTag $BeamTransfTag element dispBeamColumn 19 19 20 $numIntgrPts $BeamSecTag $BeamTransfTag element dispBeamColumn 20 20 21 $numIntgrPts $BeamSecTag $BeamTransfTag # Define RECORDERS ------------------------------------------------------------- # record displacements the free node recorder Node -file $dir /DFree.out -time -node 21 -dof 1 2 3 4 5 6 7 disp; # define end torque ------------------------------------------------------------- pattern Plain 1 Linear { load 21 0.0 0.0 0.0 1000.0 0.0 0.0 0.0 } constraints Plain; # how it handles boundary conditions numberer Plain; # renumber dof's to minimize band-width (optimization), if you want to system BandGeneral; # how to store and solve the system of equations in the analysis test NormDispIncr 1.0e-8 10 ; # determine if convergence has been achieved at the end of an iteration step algorithm NewtonLineSearch; # use Newton line search algorithm: updates tangent stiffness at every iteration integrator DisplacementControl 21 4 0.01 ; # determine the time step analysis Static; # define type of analysis static or transient analyze 100 ; # perform analysis puts \"Done!\"","title":"DispBeamColumnW3D"},{"location":"library/modeling/element/beam/2285-Elastic%20Beam%20Column%20Element%20with%20Stiffness%20Modifiers/","text":"ModElasticBeam2d This command is used to construct a ModElasticBeam2d element object. The arguments for the construction of an elastic beam-column element with stiffness modifiers is applicable for 2-D problems. This element should be used for modelling of a structural element with an equivalent combination of one elastic element with stiffness-proportional damping, and two springs at its two ends with no stiffness proportional damping to represent a prismatic section. The modelling technique is based on a number of analytical studies discussed in Zareian and Medina (2010) and Zareian and Krawinkler (2009) and is utilized in order to solve problems related to numerical damping in dynamic analysis of frame structures with concentrated plasticity springs. element ModElasticBeam2d $eleTag $iNode $jNode $A $E $Iz $K11 $K33 $K44 $transfTag &lt;-mass $massDens &gt; &lt;-cMass&gt; eleTag unique element object tag iNode jNode end nodes A cross-sectional area of element E Young\u2019s Modulus Iz second moment of area about the local z-axis K11 stiffness modifier for translation K33 stiffness modifier for translation K44 stiffness modifier for rotation transfTag identifier for previously-defined coordinate-transformation (CrdTransf) object massDens element mass per unit length (optional, default = 0.0) -cMass to form consistent mass matrix (optional, default = lumped mass matrix) Element Formation : For structural elements with time invariant moment gradient, a two-dimensional, prismatic beam element with six degrees of freedom is to be replaced with a two-dimensional, prismatic beam element composed of semi-rigid rotational springs at the ends and an elastic beam element in the middle. The rotational stiffness at the end of the original beam element is Ke = 6EIz/L (where E is the modulus of elasticity, Iz the moment of inertia, and L the length of the beam), and the ratio of the rotational spring stiffness, Ks, to the elastic beam stiffness, Ke, of the modified beam element is defined as n = Ks/Ke. Elastic Element with 2-end Springs: The elastic element in between the two springs should have an elastic moment of inertia equal to Iz,mod = (n+1)/n * Iz The \u201cn\u201d times stiff rotational springs should have an elastic stiffness of Ks=n 6 EIz,mod/L the elastic element should have an elastic stiffness coefficient K44 = 6 (1+n)/(2+3 n) The elastic element should have an elastic stiffness coefficient K11 = K33 = (1+2 n) K44/(1+n) The modified stiffness coefficient bmod for stiffness proportional damping of the elastic element is: \u201cbmod\u201d = 1+(1/2n)*b Elastic Element with 1-end Spring: The elastic element in between the two springs should have an elastic moment of inertia equal to Iz,mod = (n+1)/n * Iz The \u201cn\u201d times stiff rotational springs should have an elastic stiffness of Ks=n 6 EIz,mod/L The elastic element should have an elastic stiffness coefficient K44 = 6 n/( 1+3 n ) the elastic element should have an elastic stiffness coefficient K11 = (1+2 n) K44/(1+n) the elastic element should have an elastic stiffness coefficient K33 = 2*K44 The modified stiffness coefficient bmod for stiffness proportional damping of the elastic element is: \u201cbmod\u201d = 1+(1/2n)*b EXAMPLE : element ModelasticBeam2d 1 2 4 5.5 100.0 1e6 4.0 4.0 2.0 1; # elastic element tag 1 between nodes 2 and 4 with area 5.5, E 100 and IZ 1e6 with K11=K33=4.0, K44=2.0 which uses transformation 1 Note: For n = 1 rigid spring, the stiffness coefficients of the elastic springs are as follows: K11=K33 = 4.0 and K44 = 2.0 References : [1] Zareian, F. and Medina, R. A. (2010). \u201cA practical method for proper modeling of structural damping in inelastic plane structural systems,\u201d Computers & Structures, Vol. 88, 1-2, pp. 45-53. [2] Zareian, F. and Krawinkler, H. (2009). \u201cSimplified performance-based earthquake engineering\u201d Technical Report 169, The John A. Blume Earthquake Engineering Research Center, Department of Civil Engineering, Stanford University, Stanford, CA. [electronic version: https://blume.stanford.edu/tech_reports ] Code Developed by: by Dr. Dimitrios G. Lignos (McGill University)","title":"ModElasticBeam2d"},{"location":"library/modeling/element/beam/252-Flexure-Shear%20Interaction%20Displacement-Based%20Beam-Column%20Element/","text":"DispBeamColumnInt This command is used to construct a dispBeamColumnInt element object, which is a distributed-plasticity, displacement-based beam-column element which includes interaction between flexural and shear components. element dispBeamColumnInt $eleTag $iNode $jNode $numIntgrPts $secTag $transfTag $cRot < -mass $massDens > eleTag unique element object tag iNode jNode end nodes numIntgrPts number of integration points along the element. secTag identifier for previously-defined section object transfTag identifier for previously-defined coordinate-transformation (CrdTransf) object cRot identifier for element center of rotation (or center of curvature distribution). Fraction of the height distance from bottom to the center of rotation (0 to 1) massDens element mass density (per unit length), from which a lumped-mass matrix is formed (optional, default=0.0) NOTE: The valid queries to a nonlinear beam-column element when creating an ElementRecorder object are force, and section $secNum secArg1 secArg2... Where secNum refers to the integration point whose data is to be output. The element requires a special section and special care when numbering the materials. see Discussion below for section command and material numbering. Examples geomTransf LinearInt 1 element dispBeamColumnInt 1 1 3 2 2 1 0.4 DISCUSSION: In the original fiber element (Displacement-Based Beam-Column Element) implemented in OpenSees, based on linear interpolation of the curvature and constant axial strain, a third strain component was included to account for shear flexibility. The fiber discretization leads no longer to just uniaxial behavior, but rather a biaxial response by incorporating a membrane material model based on simple uniaxial stress-strain curves for concrete and steel. Although the material models can be cyclic, the element model formulation has been implemented and verified initially for monotonic static analysis. Details of the formulation can be found elsewhere (Massone et al., 2006; Massone 2006). The compatibility equations to relate nodal displacements (6 DOF) and internal strains (axial strain, curvature and shear strain) are defined only in a 2D plane, so that no 3D analysis is possible with this element. It also requires a specific geometric transformation called \u201cLinearInt\u201d, which is based on the traditional geometric linear transformation, and therefore no other geometric transformation can be used. The input parameters are the same as the original fiber element, however a new term, the location of the center of rotation (c), is required to distribute transversal displacement between flexural (curvature) and shear (shear strain) components. This parameter is defined as the fraction of the element height (measured from top) that corresponds to the center of curvature. The section formulation required for each element is based also on a similar formulation implemented in OpenSees. However, not all capabilities are included as in the original formulation. The section is defined as a fiber section, but based only in fiber components and not in patch or layer components for simplicity. It has been formulated in this way to make sure that the strip modeling is understood since differently to the standard fiber section analysis the strips in the model with interaction between shear and flexure requires that all the strips are formed with smeared (average) concrete and reinforcement areas. SECTIONAL ANALYSIS The definition of the fiber section is initiated by establishing in the heading of the command the thickness of the section (three in this case to represent boundary elements). The thickness of the element is required to verify equilibrium in the horizontal direction (assuming that same area ratio holds between concrete materials inside a strip in horizontal and vertical directions). For generality, the section is allowed to have three different thicknesses to be able to model barbell or T-shaped walls (Fig. 1). Each thickness may be associated to several strips. Strips are created from concrete and steel materials. Since the strip unit corresponds to the membrane (panel) element, the location of each of them is defined by the fiber coordinate ($yLoc), and therefore, tributary concrete and steel areas inside each strip are located at one same point (Fig. 1). This may difficult the analysis, but the model is based on uniform (smeared) steel and concrete distribution. Even though a center of area (concrete and steel) defined by using a transformed area for steel may be acceptable, in tensile governed elements a better approximation may be using the steel location. For simplicity, the center of area of concrete may be selected for calculations, regarding a reasonable small strip size selection. In the fiber section definition, each strip is defined by fibers with same coordinate, and strips are organized from negative to positive location. Therefore all steel and concrete components of one strip have to be together (one after the other). The change in fiber location tells the program that a different strip is initiated. To complete the strip definition, the horizontal steel reinforcement has to be included. The steel is assumed uniformly distributed in the section, so that it may be located as only one fiber (recommended). In the case of horizontal steel, the component is called as \u201cHfiber\u201d and the area defined in such fiber corresponds to the total horizontal steel area in one single element (for the entire element). This steel is assumed to be the same for all strips inside the section. For consistency when defining the fiber section, the command requires to define the number of strips within each sub-section with the same thickness, which has to add up the same number of different fiber locations defined in the section (total number of strips). BeamShearFlexure.png The original uniaxial definition of the fiber components inside the fiber section recorded only uniaxial stresses and strains for the fiber, and resultant axial force, moment, axial strain and curvature for the section. In the membrane (panel) formulation for the strips, other quantities may be useful to record. At the strip level new recorders have been included: eX (horizontal strain), eY (axial strain), e1 (principal strain in direction 1), e2 (principal strain in direction 2), alpha (angle for principal axis, measured counterclockwise from eY to e1), sX (average horizontal steel stress), sY (average vertical steel stress), s1 (average principal concrete stress in direction 1) and s2 (average principal concrete stress in direction 2). The mentioned recorders are called by sections, so that the output gives the results organized in columns for each strip inside the section, using the same order defined in the fiber section. At the section level, axial strain, curvature, shear strain, resultant axial force, moment and shear force are obtained with the standard recorder forceAndDeformation. Examples recorder Element -file Sect_eX.out -ele 1 section 1 eX recorder Element -file Sect_s2.out -ele 1 section 1 s2 This commnand allows the user to construct a FiberSection object. Each FiberSection object is composed of Fibers, with each fiber containing a UniaxialMaterial, an area and a location (y,z). The command to generate FiberSection object contains in { } the commands to generate all the fibers in the object. To construct a FiberSection and populate it, the following command is used: section FiberInt $secTag -NStrip $nStrip1 $thick1 $nStrip2 $thick2 $nStrip3 $thick3 { fiber \u2026 Hfiber \u2026 \u2026 } sectTag unique tag among FiberSections thick1 section thickness 1. nStrip1 \u2019 number of strips with thickness thick1 . Considers first nStrip1 strips in the fiber section with thickness thick1 . thick2 section thickness 2. nStrip2 \u2019 number of strips with thickness thick2 . Considers next nStrip2 strips in the fiber section with thickness thick2 . thick3 section thickness 3. nStrip3 \u2019 umber of strips with thickness thick3 . Considers last nStrip3 strips in the fiber section with thickness thick3 . Total number of strips has to match the fiber section defined. fiber \u2026 command to generate concrete and vertical steel fibers. Hfiber\u2026 command to generate horizontal steel fibers (stirrups) \u2018\u2026\u2019\u2019\u2019 Examples section FiberInt 2 -NStrip 1 6.5 1 2.0 1 6.5 { fiber -25 .55 0 15.6 2 fiber -25 .55 0 1.24 1003 fiber 0 0 35.6 2 fiber 0 0 0.84 1003 fiber + 25.55 0 15.6 2 fiber + 25.55 0 1.24 1003 Hfiber 0 0 0.0718 1005 } FIBER MODELLING: As described previously, the section is created based on strips, and each strip consists of vertical fibers (fiber) that represent steel and concrete materials and horizontal fibers (Hfiber) that represent the horizontal steel. Since uniform distribution of reinforcement steel is assumed at strip level, all horizontal steel reinforcement can be included as only one horizontal fiber. The location of such fiber is included in the command just for completeness, but it is not necessary for any calculation. The area required in the Hfiber corresponds to the total steel tributary area present in the element that holds the defined section. The internal numerical scheme defined to achieve equilibrium handles two different types of materials: steel and concrete. Since different steel and concrete stress-strain laws can be implemented and used with this model, the program needs to distinguish between concrete and steel. For simplicity, it has been selected the material tag ( matTag ) to define whether a material is concrete or steel. Concrete materials are defined as materials with tag number under (or equal to) 1000 and steel materials use tag numbers over 1000 (see example). HFiber Command Hfiber $yLoc $zLoc $A $matTag yLoc y coordinate of the fiber in the section (just for completeness, not required in calculations) zLoc z coordinate of the fiber in the section (just for completeness, not required in calculations) A total steel area located inside the section matTag identifier for previously-defined material object Examples uniaxialMaterial Concrete01 2 -3 -0 .002 0 -0 .01 uniaxialMaterial Steel02 1003 60 29000 0.02 20 0.9 0.2 0 0.1 0 0.1 uniaxialMaterial Steel02 1005 60 29000 0.02 20 0.9 0.2 0 0.1 0 0.1 . . . fiber -25 .55 0 15.6 2 ; # vert. concrete fiber -25 .55 0 1.24 1003 ; # vert. steel Hfiber 0 0 0.0718 1005 ; # horz. steel NOTE Note: concrete materials are defined as materials with tag number under (or equal) 1000 and steel materials use tag numbers over 1000 (see example). Wall01.tcl <tcl>Wall01.tcl</tcl> References Massone, L. M., 2006; \u201cRC Wall Shear - Flexure Interaction: Analytical and Experimental Responses\u201d, Ph.D. Dissertation, University of California, Los Angeles, June 2006, 398 pp. Massone, L. M.; Orakcal, K.; and Wallace, J. W. , 2006; \u201cShear - Flexure Interaction for Structural Walls\u201d; SP-236, ACI Special Publication - Deformation Capacity and Shear Strength of Reinforced Concrete Members Under Cyclic Loading, editors: Adolfo Matamoros & Kenneth Elwood, p. 127-150. Code Developed by: Leo Massone, University of Chile and Kutay Orakcal and John Wallace, UCLA","title":"DispBeamColumnInt"},{"location":"library/modeling/element/beam/ElasticForceBeamColumn2d/","text":"ElasticForceBeamColumn2d References State Determination Algorithm Neuenhofer, A. and F. C. Filippou (1997). \u201cEvaluation of Nonlinear Frame Finite Element Models.\u201d Journal of Structural Engineering, 123(7):958-966. Spacone, E., V. Ciampi, and F. C. Filippou (1996). \u201cMixed Formulation of Nonlinear Beam Finite Element.\u201d Computers and Structures, 58(1):71-83. Plastic Hinge Integration Scott, M. H. and G. L. Fenves (2006). \u201cPlastic Hinge Integration Methods for Force-Based Beam-Column Elements.\u201d Journal of Structural Engineering, 132(2):244-252. Analytical Response Sensitivity (DDM) Scott, M. H., P. Franchin, G. L. Fenves, and F. C. Filippou (2004). \u201cResponse Sensitivity for Nonlinear Beam-Column Elements.\u201d Journal of Structural Engineering, 130(9):1281-1288. Software Design Scott, M. H., G. L. Fenves, F. T. McKenna, and F. C. Filippou (2007). \u201cSoftware Patterns for Nonlinear Beam-Column Models.\u201d Journal of Structural Engineering, Approved for publication, February 2007. // $Revision: 1.1 $ // $Date: 2007-10-13 01:21:43 $ // $Source: /usr/local/cvs/OpenSees/SRC/element/forceBeamColumn/ElasticForceBeamColumn2d.h,v $ #include <Element.h> #include <Node.h> #include <Matrix.h> #include <Vector.h> #include <Channel.h> #include <BeamIntegration.h> #include <SectionForceDeformation.h> #include <CrdTransf.h> class Response ; class ElementalLoad ; class ElasticForceBeamColumn2d : public Element { public : ElasticForceBeamColumn2d (); ElasticForceBeamColumn2d ( int tag , int nodeI , int nodeJ , int numSections , SectionForceDeformation ** sec , BeamIntegration & beamIntegr , CrdTransf & coordTransf , double rho = 0.0 ); ~ ElasticForceBeamColumn2d (); const char * getClassType ( void ) const { return \"ElasticForceBeamColumn2d\" ;}; int getNumExternalNodes ( void ) const ; const ID & getExternalNodes ( void ); Node ** getNodePtrs ( void ); int getNumDOF ( void ); void setDomain ( Domain * theDomain ); int commitState ( void ); int revertToLastCommit ( void ); int revertToStart ( void ); int update ( void ); const Matrix & getTangentStiff ( void ); const Matrix & getInitialStiff ( void ); const Matrix & getMass ( void ); void zeroLoad ( void ); int addLoad ( ElementalLoad * theLoad , double loadFactor ); int addInertiaLoadToUnbalance ( const Vector & accel ); const Vector & getResistingForce ( void ); const Vector & getResistingForceIncInertia ( void ); int sendSelf ( int cTag , Channel & theChannel ); int recvSelf ( int cTag , Channel & theChannel , FEM_ObjectBroker & theBroker ); int displaySelf ( Renderer & theViewer , int displayMode , float fact , const char ** displayModes = 0 , int numModes = 0 ); friend OPS_Stream & operator <<( OPS_Stream & s , ElasticForceBeamColumn2d & E ); void Print ( OPS_Stream & s , int flag = 0 ); Response * setResponse ( const char ** argv , int argc , OPS_Stream & s ); int getResponse ( int responseID , Information & eleInformation ); int setParameter ( const char ** argv , int argc , Parameter & param ); int updateParameter ( int parameterID , Information & info ); int activateParameter ( int parameterID ); protected : int getInitialFlexibility ( Matrix & fe ); private : void compSectionDisplacements ( Vector sectionCoords [], Vector sectionDispls []) const ; // Reactions of basic system due to element loads void computeReactions ( double * p0 ); // Section forces due to element loads void computeSectionForces ( Vector & sp , int isec ); void computeBasicForces ( Vector & q ); // internal data ID connectedExternalNodes ; // tags of the end nodes enum { maxNumSections = 20 }; enum { maxSectionOrder = 5 }; BeamIntegration * beamIntegr ; int numSections ; SectionForceDeformation * sections [ maxNumSections ]; // array of pointers to sections CrdTransf * crdTransf ; // pointer to coordinate transformation object // (performs the transformation between the global and basic system) double rho ; // mass density per unit length int initialFlag ; // indicates if the element has been initialized Node * theNodes [ 2 ]; // pointers to the nodes enum { maxNumEleLoads = 100 }; enum { NDM = 2 }; // dimension of the problem (2d) enum { NND = 3 }; // number of nodal dof's enum { NEGD = 6 }; // number of element global dof's enum { NEBD = 3 }; // number of element dof's in the basic system int numEleLoads ; // Number of element load objects int sizeEleLoads ; ElementalLoad ** eleLoads ; double * eleLoadFactors ; static Matrix theMatrix ; static Vector theVector ; static double workArea []; int parameterID ; };","title":"ElasticForceBeamColumn2d"},{"location":"library/modeling/element/beam/ElasticForceBeamColumn3d/","text":"ElasticForceBeamColumn3d State Determination Algorithm Neuenhofer, A. and F. C. Filippou (1997). \u201cEvaluation of Nonlinear Frame Finite Element Models.\u201d Journal of Structural Engineering, 123(7):958-966. Spacone, E., V. Ciampi, and F. C. Filippou (1996). \u201cMixed Formulation of Nonlinear Beam Finite Element.\u201d Computers and Structures, 58(1):71-83. Plastic Hinge Integration Scott, M. H. and G. L. Fenves (2006). \u201cPlastic Hinge Integration Methods for Force-Based Beam-Column Elements.\u201d Journal of Structural Engineering, 132(2):244-252. Analytical Response Sensitivity (DDM) Scott, M. H., P. Franchin, G. L. Fenves, and F. C. Filippou (2004). \u201cResponse Sensitivity for Nonlinear Beam-Column Elements.\u201d Journal of Structural Engineering, 130(9):1281-1288. Software Design Scott, M. H., G. L. Fenves, F. T. McKenna, and F. C. Filippou (2007). \u201cSoftware Patterns for Nonlinear Beam-Column Models.\u201d Journal of Structural Engineering, Approved for publication, February 2007. // $Revision: 1.1 $ // $Date: 2007-10-13 01:21:43 $ // $Source: /usr/local/cvs/OpenSees/SRC/element/forceBeamColumn/ElasticForceBeamColumn3d.h,v $ #include <Element.h> #include <Node.h> #include <Matrix.h> #include <Vector.h> #include <Channel.h> #include <BeamIntegration.h> #include <SectionForceDeformation.h> #include <CrdTransf.h> class Response ; class ElementalLoad ; class ElasticForceBeamColumn3d : public Element { public : ElasticForceBeamColumn3d (); ElasticForceBeamColumn3d ( int tag , int nodeI , int nodeJ , int numSections , SectionForceDeformation ** sec , BeamIntegration & beamIntegr , CrdTransf & coordTransf , double rho = 0.0 ); ~ ElasticForceBeamColumn3d (); const char * getClassType ( void ) const { return \"ElasticForceBeamColumn3d\" ;}; int getNumExternalNodes ( void ) const ; const ID & getExternalNodes ( void ); Node ** getNodePtrs ( void ); int getNumDOF ( void ); void setDomain ( Domain * theDomain ); int commitState ( void ); int revertToLastCommit ( void ); int revertToStart ( void ); int update ( void ); const Matrix & getTangentStiff ( void ); const Matrix & getInitialStiff ( void ); const Matrix & getMass ( void ); void zeroLoad ( void ); int addLoad ( ElementalLoad * theLoad , double loadFactor ); int addInertiaLoadToUnbalance ( const Vector & accel ); const Vector & getResistingForce ( void ); const Vector & getResistingForceIncInertia ( void ); int sendSelf ( int cTag , Channel & theChannel ); int recvSelf ( int cTag , Channel & theChannel , FEM_ObjectBroker & theBroker ); int displaySelf ( Renderer & theViewer , int displayMode , float fact , const char ** displayModes = 0 , int numModes = 0 ); friend OPS_Stream & operator <<( OPS_Stream & s , ElasticForceBeamColumn3d & E ); void Print ( OPS_Stream & s , int flag = 0 ); Response * setResponse ( const char ** argv , int argc , OPS_Stream & s ); int getResponse ( int responseID , Information & eleInformation ); int setParameter ( const char ** argv , int argc , Parameter & param ); int updateParameter ( int parameterID , Information & info ); int activateParameter ( int parameterID ); protected : int getInitialFlexibility ( Matrix & fe ); private : void compSectionDisplacements ( Vector sectionCoords [], Vector sectionDispls []) const ; // Reactions of basic system due to element loads void computeReactions ( double * p0 ); // Section forces due to element loads void computeSectionForces ( Vector & sp , int isec ); void computeBasicForces ( Vector & q ); // internal data ID connectedExternalNodes ; // tags of the end nodes enum { maxNumSections = 20 }; enum { maxSectionOrder = 10 }; BeamIntegration * beamIntegr ; int numSections ; SectionForceDeformation * sections [ maxNumSections ]; // array of pointers to sections CrdTransf * crdTransf ; // pointer to coordinate transformation object // (performs the transformation between the global and basic system) double rho ; // mass density per unit length int initialFlag ; // indicates if the element has been initialized Node * theNodes [ 2 ]; // pointers to the nodes Vector Se ; // element resisting forces in the basic system enum { maxNumEleLoads = 100 }; enum { NDM = 3 }; // dimension of the problem (2d) enum { NND = 6 }; // number of nodal dof's enum { NEGD = 12 }; // number of element global dof's enum { NEBD = 6 }; // number of element dof's in the basic system int numEleLoads ; // Number of element load objects int sizeEleLoads ; ElementalLoad ** eleLoads ; double * eleLoadFactors ; static Matrix theMatrix ; static Vector theVector ; static double workArea []; int parameterID ; }; #endif","title":"ElasticForceBeamColumn3d"},{"location":"library/modeling/element/beam/ForceBeamColumnCBDI2d/","text":"ForceBeamColumnCBDI2d ::: element ForceBeamColumnCBDI eleTag iNode jNode transfTag integrationTag <-iter $maxIter > <-mass $mass > ::: // $Revision: 1.13 $ // $Date: 2009-02-05 16:28:20 $ // $Source: /usr/local/cvs/OpenSees/SRC/element/forceBeamColumn/ForceBeamColumnCBDI2d.h,v $ References State Determination Algorithm Neuenhofer, A. and F. C. Filippou (1997). \u201cEvaluation of Nonlinear Frame Finite Element Models.\u201d Journal of Structural Engineering, 123(7):958-966. Spacone, E., V. Ciampi, and F. C. Filippou (1996). \u201cMixed Formulation of Nonlinear Beam Finite Element.\u201d Computers and Structures, 58(1):71-83. Plastic Hinge Integration Scott, M. H. and G. L. Fenves (2006). \u201cPlastic Hinge Integration Methods for Force-Based Beam-Column Elements.\u201d Journal of Structural Engineering, 132(2):244-252. Analytical Response Sensitivity (DDM) Scott, M. H., P. Franchin, G. L. Fenves, and F. C. Filippou (2004). \u201cResponse Sensitivity for Nonlinear Beam-Column Elements.\u201d Journal of Structural Engineering, 130(9):1281-1288. Software Design Scott, M. H., G. L. Fenves, F. T. McKenna, and F. C. Filippou (2007). \u201cSoftware Patterns for Nonlinear Beam-Column Models.\u201d Journal of Structural Engineering, Approved for publication, February 2007.","title":"ForceBeamColumnCBDI2d"},{"location":"library/modeling/element/beam/ForceBeamColumnWarping2d/","text":"ForceBeamColumnWarping References State Determination Algorithm Neuenhofer, A. and F. C. Filippou (1997). \u201cEvaluation of Nonlinear Frame Finite Element Models.\u201d Journal of Structural Engineering, 123(7):958-966. Spacone, E., V. Ciampi, and F. C. Filippou (1996). \u201cMixed Formulation of Nonlinear Beam Finite Element.\u201d Computers and Structures, 58(1):71-83. Plastic Hinge Integration Scott, M. H. and G. L. Fenves (2006). \u201cPlastic Hinge Integration Methods for Force-Based Beam-Column Elements.\u201d Journal of Structural Engineering, 132(2):244-252. Analytical Response Sensitivity (DDM) Scott, M. H., P. Franchin, G. L. Fenves, and F. C. Filippou (2004). \u201cResponse Sensitivity for Nonlinear Beam-Column Elements.\u201d Journal of Structural Engineering, 130(9):1281-1288. Software Design Scott, M. H., G. L. Fenves, F. T. McKenna, and F. C. Filippou (2007). \u201cSoftware Patterns for Nonlinear Beam-Column Models.\u201d Journal of Structural Engineering, Approved for publication, February 2007. // $Revision: 1.13 $ // $Date: 2009-02-05 16:28:20 $ // $Source: /usr/local/cvs/OpenSees/SRC/element/forceBeamColumn/ForceBeamColumnWarping2d.h,v $ #include <Element.h> #include <Node.h> #include <Matrix.h> #include <Vector.h> #include <Channel.h> #include <BeamIntegration.h> #include <SectionForceDeformation.h> #include <CrdTransf.h> class Response ; class ElementalLoad ; class ForceBeamColumnWarping2d : public Element { public : ForceBeamColumnWarping2d (); ForceBeamColumnWarping2d ( int tag , int nodeI , int nodeJ , int numSections , SectionForceDeformation ** sec , BeamIntegration & beamIntegr , CrdTransf & coordTransf , double rho = 0.0 , int maxNumIters = 10 , double tolerance = 1.0e-12 ); ~ ForceBeamColumnWarping2d (); const char * getClassType ( void ) const { return \"ForceBeamColumnWarping2d\" ;}; int getNumExternalNodes ( void ) const ; const ID & getExternalNodes ( void ); Node ** getNodePtrs ( void ); int getNumDOF ( void ); void setDomain ( Domain * theDomain ); int commitState ( void ); int revertToLastCommit ( void ); int revertToStart ( void ); int update ( void ); const Matrix & getTangentStiff ( void ); const Matrix & getInitialStiff ( void ); const Matrix & getMass ( void ); void zeroLoad ( void ); int addLoad ( ElementalLoad * theLoad , double loadFactor ); int addInertiaLoadToUnbalance ( const Vector & accel ); const Vector & getResistingForce ( void ); const Vector & getResistingForceIncInertia ( void ); int sendSelf ( int cTag , Channel & theChannel ); int recvSelf ( int cTag , Channel & theChannel , FEM_ObjectBroker & theBroker ); int displaySelf ( Renderer & theViewer , int displayMode , float fact , const char ** displayModes = 0 , int numModes = 0 ); friend OPS_Stream & operator <<( OPS_Stream & s , ForceBeamColumnWarping2d & E ); void Print ( OPS_Stream & s , int flag = 0 ); Response * setResponse ( const char ** argv , int argc , OPS_Stream & s ); int getResponse ( int responseID , Information & eleInformation ); int getResponseSensitivity ( int responseID , int gradNumber , Information & eleInformation ); // AddingSensitivity: BEGIN ////////////////////////////////////////// int setParameter ( const char ** argv , int argc , Parameter & param ); int updateParameter ( int parameterID , Information & info ); int activateParameter ( int parameterID ); const Vector & getResistingForceSensitivity ( int gradNumber ); const Matrix & getKiSensitivity ( int gradNumber ); const Matrix & getMassSensitivity ( int gradNumber ); int commitSensitivity ( int gradNumber , int numGrads ); // AddingSensitivity: END /////////////////////////////////////////// protected : void setSectionPointers ( int numSections , SectionForceDeformation ** secPtrs ); int getInitialFlexibility ( Matrix & fe ); int getInitialDeformations ( Vector & v0 ); private : void getForceInterpolatMatrix ( double xi , Matrix & b , const ID & code , int isec ); void getDistrLoadInterpolatMatrix ( double xi , Matrix & bp , const ID & code ); void compSectionDisplacements ( Vector sectionCoords [], Vector sectionDispls []) const ; void initializeSectionHistoryVariables ( void ); // Reactions of basic system due to element loads void computeReactions ( double * p0 ); // Section forces due to element loads void computeSectionForces ( Vector & sp , int isec ); // internal data ID connectedExternalNodes ; // tags of the end nodes BeamIntegration * beamIntegr ; int numSections ; SectionForceDeformation ** sections ; // array of pointers to sections CrdTransf * crdTransf ; // pointer to coordinate transformation object // (performs the transformation between the global and basic system) double rho ; // mass density per unit length int maxIters ; // maximum number of local iterations double tol ; // tolerance for relative energy norm for local iterations int initialFlag ; // indicates if the element has been initialized Node * theNodes [ 2 ]; // pointers to the nodes Matrix kv ; // stiffness matrix in the basic system Vector Se ; // element resisting forces in the basic system Matrix kvcommit ; // committed stiffness matrix in the basic system Vector Secommit ; // committed element end forces in the basic system Matrix * fs ; // array of section flexibility matrices Vector * vs ; // array of section deformation vectors Vector * Ssr ; // array of section resisting force vectors Vector * vscommit ; // array of committed section deformation vectors enum { maxNumEleLoads = 100 }; enum { NDM = 2 }; // dimension of the problem (2d) enum { NND = 4 }; // number of nodal dof's enum { NEGD = 8 }; // number of element global dof's enum { NEBD = 5 }; // number of element dof's in the basic system int numEleLoads ; // Number of element load objects int sizeEleLoads ; ElementalLoad ** eleLoads ; double * eleLoadFactors ; Matrix * Ki ; static Matrix theMatrix ; static Vector theVector ; static double workArea []; enum { maxNumSections = 20 }; enum { maxSectionOrder = 5 }; // following are added for subdivision of displacement increment int maxSubdivisions ; // maximum number of subdivisons of dv for local iterations static Vector vsSubdivide []; static Vector SsrSubdivide []; static Matrix fsSubdivide []; //static int maxNumSections; // AddingSensitivity: BEGIN ////////////////////////////////////////// int parameterID ; const Vector & computedqdh ( int gradNumber ); const Matrix & computedfedh ( int gradNumber ); void computeReactionSensitivity ( double * dp0dh , int gradNumber ); void computeSectionForceSensitivity ( Vector & dspdh , int isec , int gradNumber ); // AddingSensitivity: END /////////////////////////////////////////// };","title":"ForceBeamColumnWarping"},{"location":"library/modeling/element/bearing/3057-YamamotoBiaxialHDR/","text":"YamamotoBiaxialHDR This command is used to construct a YamamotoBiaxialHDR element object, which is defined by two nodes. This element can be used to represent the isotropic behavior of high-damping rubber bearing in the local y-z plane. element YamamotoBiaxialHDR $eleTag $iNode $jNode $Tp $DDo $DDi $Hr &lt;-coRS $cr $cs &gt; &lt;-orient &lt; $x1 $x2 $x3 &gt; $y1 $y2 $y3 &gt; &lt;-mass $m &gt; eleTag unique element object tag inode jnode end nodes Tp compound type = 1 : X0.6R manufactured by Bridgestone corporation. DDo outer diameter [m] DDi bore diameter [m] Hr total thickness of rubber layer [m] Optional Data cr cs coefficients for shear stress components of \\(\\tau_{r}\\) and <math>_{s}</math> x1 x2 x3 vector components in global coordinates defining local x-axis yp1 yp2 yp3 vector components in global coordinates defining vector yp which lies in the local x-y plane for the element m element mass [kg] NOTES: The valid queries to a YamamotoBiaxialHDR element when creating an ElementRecorder object are \u2018globalForce\u2019, \u2018localForce\u2019, \u2018basicForce\u2019, \u2018localDisplacement\u2019 and \u2018basicDeformation\u2019. YamamotoBiaxialHDR_Model.png Examples element YamamotoBiaxialHDR 1 1 2 1 1.300 0.030 0.261 -orient 0 0 1 1 0 0 YamamotoBiaxialHDR_Sample.tcl , YamamotoBiaxialHDR_input_X.tcl , YamamotoBiaxialHDR_input_Y.tcl &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; References Masashi Yamamoto, Shigeo Minewaki, Harumi Yoneda and Masahiko Higashino, \u201cNonlinear behavior of high-damping rubber bearings under horizontal bidirectional loading: full-scale tests and analytical modeling\u201d, Earthquake Engineering and Structural Dynamics , 41 , 1845-1860, 2012. Code Developed by: mkiku","title":"YamamotoBiaxialHDR"},{"location":"library/modeling/element/bearing/3196-ElastomericX/","text":"ElastomericX This command is used to construct an ElastomericX bearing element object in three-dimension. The 3D continuum geometry of an elastomeric bearing is modeled as a 2-node, 12 DOF discrete element. This elements extends the formulation of Elastomeric_Bearing_(Bouc-Wen)_Element element. However, instead of the user providing material models as input arguments, it only requires geometric and material properties of an elastomeric bearing as arguments. The material models in six direction are formulated within the element from input arguments. The time-dependent values of mechanical properties (e.g., shear stiffness, buckling load capacity) can also be recorded using the \u201cparameters\u201d recorder . For a 3D problem: element ElastomericX $eleTag $Nd1 $Nd2 $Fy $alpha $Gr $Kbulk $D1 $D2 $ts $tr $n < < $x1 $x2 $x3 > $y1 $y2 $y3 > < $kc > < $PhiM > < $ac > < $sDratio > < $m > < $cd > < $tc > < $tag1 > < $tag2 > < $tag3 > < $tag4 > eleTag unique element object tag Nd1 Nd2 end nodes Fy yield strength alpha post-yield stiffness ratio Gr shear modulus of elastomeric bearing Kbulk bulk modulus of rubber D1 internal diameter D2 outer diameter (excluding cover thickness) ts single steel shim layer thickness tr single rubber layer thickness n number of rubber layers x1 x2 x3 vector components in global coordinates defining local x-axis (optional) y1 y2 y3 vector components in global coordinates defining local y-axis (optional) kc cavitation parameter (optional, default = 10.0) PhiM damage parameter (optional, default = 0.5) ac strength reduction parameter (optional, default = 1.0) sDratio shear distance from iNode as a fraction of the element length (optional, default = 0.5) m element mass (optional, default = 0.0) cd viscous damping parameter (optional, default = 0.0) tc cover thickness (optional, default = 0.0) tag1 Tag to include cavitation and post-cavitation (optional, default = 0) tag2 Tag to include buckling load variation (optional, default = 0) tag3 Tag to include horizontal stiffness variation (optional, default = 0) tag4 Tag to include vertical stiffness variation (optional, default = 0) Important note: Because default values of heating parameters are in SI units, user must override the default heating parameters values if using Imperial units <br /> User should distinguish between yield strength of elastomeric bearing (Fy) and characteristic strength (Qd): Qd=Fy*(1-alpha) Physical Model and Mechanical Properties The physical model of an elastomeric bearing is considered as a two-node, twelve degrees-of-freedom discrete element. The two nodes are connected by six springs that represent the mechanical behavior in the six basic directions of a bearing. The degrees of freedom and discrete spring representation of an elastomeric bearing is shown in the below figures. The general form of element force vector, $$, and element stiffness matrix,<math></math> , for element representation considered above is given by equation below: <math>=; =</math> The coupling of the two shear springs is considered directly by using a coupled bidirectional model. All other springs are uncoupled. The coupling of vertical and horizontal directions are considered indirectly by using expressions for mechanical properties in one direction that are dependent on the response parameters in the other direction. Linear uncoupled springs are considered in the torsion and the two rotational springs as they are not expected to significantly affect the response of an elastomeric bearing. The off-diagonal terms due to coupling between axial and shear, and axial and rotation, are not considered in the two-spring model (Koh and Kelly, 1987) used here. An exact model would have non-zero values of these off-diagonal terms. A discussion on the formulation of the two-spring model and the exact model is presented in Ryan et al.(1991). The subscript b refers to the element\u2019s basic coordinate system. The response quantities are transformed between the basic, local and global coordinates to perform computations. The discrete spring model presented here has the advantages of easy implementation and being computationally efficient. The mechanical properties of the six springs (also referred to as material models in OpenSees) are defined using analytical solutions available from the analysis of elastomeric bearings. The expression for mechanical properties, including stiffness and buckling load capacity, are derived using explicit consideration for geometric nonlinearity due to large displacement effects. The material models in six directions are: Axial direction: a new mathematical model that captures the behavior under cyclic tension Link Two shear directions: a special case of the Bouc-Wen model extended by Nagarajaiah et al.(1991) for seismic isolation bearings Torsion: a linear elastic model Two rotational directions: linear elastic models In addition to the behavior captured by existing bearing elements, this element can capture following characteristics: Cavitation and post-cavitation behavior in tension (tag1) Variation in critical buckling load capacity due to lateral displacement (tag2) Variation in horizontal shear stiffness with axial load on the bearing (tag3) Variation in vertical axial stiffness with horizontal displacement (tag4) User may choose to include an individual or a combination of these behaviors through user tags (include:1, exclude:0) in their analysis. For the full capabilities of this element, users are referred to: EESD Article Consideration of characteristics to include under extreme loading A recent paper by Kumar et. al (2015) explains which of the four tags should be included in the analysis. Although the analysis presented in the paper is for the base-isolated NPP, the conclusions are valid for design earthquake and maximum considered earthquake for regular building structures as well. Following are few thumb rules that can be followed: tag 1: Unless you are investigating the tensile behavior, the effect of the tensile model on shear response is insignificant. tag 2: It is recommended to use tag to include variable buckling load capacity. It affects the compression capacity and shear stiffness. The apparent softening in shear force-deformation behavior at high axial load is due to this. A constant buckling load will show less softening. tag 3: Recommended if axial load expected during the loading is more than 10% of the buckling load capacity. tag2+tag3 provide greater softening. tag 4: Unless you are investigating the axial behavior, the effect of the tensile model on shear response is insignificant. Verification and validation This is element has been verified per ASME guidelines. Users are referred to the SMiRT23 Paper and chapter 4 of the Manish Kumar\u2019s Dissertation for complete details. Recorders In addition to regular recorders provided by the bearing elements ( Element Recorder ), this element can also record instantaneous values of cavitation force (Fcn), buckling load capacity (Fcrn), vertical stiffness (Kv) and horizontal stiffness (ke) using the \u201cParameters\u201d recorder in that order. Example: recorder Element <-file \\(fileName&gt; -time &lt;-ele (\\) ele1 $ele2 \u2026)> Parameters recorder Element -file param.out -time -ele 1 Parameters To check if bearing has buckled or cavitated, an user can obtain the histories of Fcn and Fcrn as described above and divide the axial force (obtained from basicForce recorder, qb(2)) by Fcn and Fcrn at each time step, which provides demand vs capacity (D/C) ratios at each time step. If Fcn/qb(0) > 1.0 : Cavitation, or Fcrn/qb(0)>1.0 : Buckling. Examples An example is presented here in which a low damping rubber bearing (LDR 5 in Warn(2006)) is subjected to a tensile harmonic loading in laboratory (SEESL at UB). The response obtained from ElastomericX element in OpenSees is compared with the experimental results. The behavior of elastomeric bearing in shear and compression is well established, and is not explored here. element ElastomericX 1 1 2 $Fy_h $alpha $G $K $D1 $D2 $ts $tr $n 0 1 0 1 0 0 $kc $PhiM $ac 0.5 0.0 $cd $tc 1 0 0 0 Excitation files: \u200e Tcl files: inline|Numerical and experimental response comparison More examples of this element would be uploaded soon! References Kumar, M., Whittaker, A., and Constantinou, M. (2014). \u201cAn advanced numerical model of elastomeric seismic isolation bearings.\u201d Earthquake Engineering & Structural Dynamics, 43(13), 1955-1974. Link Kumar, M., Whittaker, A., and Constantinou, M. (2015). \u201cExperimental investigation of cavitation in elastomeric seismic isolation bearings.\u201d Engineering Structures, 101, 290-305. Link Kumar, M., Whittaker, A., and Constantinou, M. (2015). \u201cResponse of base-isolated nuclear structures to extreme earthquake shaking.\u201d Nuclear Engineering and Design (In press). Link Warn, G. P. (2006). \u201cThe coupled horizontal-vertical response of elastomeric and lead-rubber seismic isolation bearings.\u201d PhD Dissertation, Civil, Structural and Environmental Engineering, University at Buffalo. Koh, C. G., and Kelly, J. M. (1987). \u201cEffects of axial load on elastomeric isolation bearings.\u201d EERC/UBC 86/12, Earthquake Engineering Research Center, University of California, Berkeley, United States, 108p. Nagarajaiah, S., Reinhorn, A. M., and Constantinou, M. C. (1991). \u201cNonlinear dynamic analysis of 3-d-base-isolated structures.\u201d Journal of structural engineering New York, N.Y., 117(7), 2035-2054. Ryan, K. L., Kelly, J. M., and Chopra, A. K. (2005). \u201cNonlinear model for lead-rubber bearings including axial-load effects.\u201d Journal of Engineering Mechanics, 131(12), 1270-1278. Code Developed by: Manish Kumar, University at Buffalo, SUNY. Any bugs in this element can be reported to mkumar2 AT buffalo dot edu","title":"ElastomericX"},{"location":"library/modeling/element/bearing/3197-Elastomeric%20Bearing%20%28Bouc-Wen%29%20Element/","text":"Bouc-Wen Bearing This command is used to construct an elastomericBearing element object, which is defined by two nodes. The element can have zero length or the appropriate bearing height. The bearing has unidirectional (2D) or coupled (3D) plasticity properties for the shear deformations, and force-deformation behaviors defined by UniaxialMaterials in the remaining two (2D) or four (3D) directions. By default ( sDratio = \\(0.5\\) ) \\(P-\\Delta\\) moments are equally distributed to the two end-nodes. To avoid the introduction of artificial viscous damping in the isolation system (sometimes referred to as \u201cdamping leakage in the isolation system\u201d), the bearing element does not contribute to the Rayleigh damping by default. If the element has non-zero length, the local \\(x\\) -axis is determined from the nodal geometry unless the optional \\(x\\) -axis vector is specified in which case the nodal geometry is ignored and the user-defined orientation is utilized. For a two-dimensional problem: element elastomericBearingBoucWen $eleTag $iNode $jNode $kInit $qd $alpha1 $alpha2 $mu $eta $beta $gamma -P $matTag -Mz $matTag < -orient $x1 $x2 $x3 $y1 $y2 $y3 > < -shearDist $sDratio > < -doRayleigh > < -mass $m > For a three-dimensional problem: element elastomericBearingBoucWen $eleTag $iNode $jNode $kInit $qd $alpha1 $alpha2 $mu $eta $beat $gamma -P $matTag -T $matTag -My $matTag -Mz $matTag < -orient < $x1 $x2 $x3 > $y1 $y2 $y3 > < -shearDist $sDratio > < -doRayleigh > < -mass $m > eleTag unique element object tag iNode jNode end nodes kInit initial elastic stiffness in local shear direction qd characteristic strength alpha1 post yield stiffness ratio of linear hardening component alpha2 post yield stiffness ratio of non-linear hardening component mu exponent of non-linear hardening component eta yielding exponent (sharpness of hysteresis loop corners) (default = 1.0) beta first hysteretic shape parameter (default = 0.5) gamma second hysteretic shape parameter (default = 0.5) -P $matTag tag associated with previously-defined UniaxialMaterial in axial direction -T $matTag tag associated with previously-defined UniaxialMaterial in torsional direction -My $matTag tag associated with previously-defined UniaxialMaterial in moment direction around local y-axis -Mz $matTag tag associated with previously-defined UniaxialMaterial in moment direction around local z-axis x1 x2 x3 vector components in global coordinates defining local x-axis (optional) y1 y2 y3 vector components in global coordinates defining local y-axis (optional) sDratio shear distance from iNode as a fraction of the element length (optional, default = 0.5) -doRayleigh to include Rayleigh damping from the bearing (optional, default = no Rayleigh damping contribution) m element mass (optional, default = 0.0) NOTE: If the element has zero length and optional orientation vectors are not specified, the local element axes coincide with the global axes. Otherwise the local z-axis is defined by the cross product between the x- and y-vectors specified on the command line. Elastomeric bearings are very stiff in compression, but not rigid. It is not a good idea to specify an extremely large axial stiffness (such as 1E10), because it can lead to problems with numerical sensitivity. Always specify a realistic value for the stiffness of the material that is assigned along the axial direction. To assign different compression and tension stiffness the Elastic or ElasticMultiLinear material can be used. The valid queries to an elastomeric bearing element when creating an ElementRecorder object are force, localForce, basicForce, localDisplacement, basicDisplacement and material $matNum matArg1 matArg2 ... Where $matNum is the number associated with the material whose data is to be output. Examples element elastomericBearingBoucWen 1 1 2 20.0 2.50 0.02 0.0 3.0 1.0 \\ 0.5 0.5 -P 1 -Mz 2 ; # for a 2D elastomeric bearing element elastomericBearingBoucWen 1 1 2 20 2.50 0.02 0.0 3.0 1.0 0.5 \\ 0.5 -P 1 -T 2 -My 3 -Mz 4 ; # for a 3D elastomeric bearing Code Developed by: Andreas Schellenberg, University of California, Berkeley.","title":"Bouc-Wen Bearing"},{"location":"library/modeling/element/bearing/3198-Elastomeric%20Bearing%20%28Plasticity%29%20Element/","text":"Elastomeric Bearing (Plasticity) This command is used to construct an elastomericBearing element object, which is defined by two nodes. The element can have zero length or the appropriate bearing height. The bearing has unidirectional (2D) or coupled (3D) plasticity properties for the shear deformations, and force-deformation behaviors defined by UniaxialMaterials in the remaining two (2D) or four (3D) directions. By default (sDratio = 0.5) P-Delta moments are equally distributed to the two end-nodes. To avoid the introduction of artificial viscous damping in the isolation system (sometimes referred to as \u201cdamping leakage in the isolation system\u201d), the bearing element does not contribute to the Rayleigh damping by default. If the element has non-zero length, the local x-axis is determined from the nodal geometry unless the optional x-axis vector is specified in which case the nodal geometry is ignored and the user-defined orientation is utilized. For a two-dimensional problem: element elastomericBearingPlasticity $eleTag $iNode $jNode $kInit $qd $alpha1 $alpha2 $mu -P $matTag -Mz $matTag < -orient $x1 $x2 $x3 $y1 $y2 $y3 > < -shearDist $sDratio > < -doRayleigh > < -mass $m > For a three-dimensional problem: element elastomericBearingPlasticity $eleTag $iNode $jNode $kInit $qd $alpha1 $alpha2 $mu -P $matTag -T $matTag -My $matTag -Mz $matTag < -orient < $x1 $x2 $x3 > $y1 $y2 $y3 > < -shearDist $sDratio > < -doRayleigh > < -mass $m > eleTag unique element object tag iNode jNode end nodes kInit initial elastic stiffness in local shear direction qd characteristic strength alpha1 post yield stiffness ratio of linear hardening component alpha2 post yield stiffness ratio of non-linear hardening component mu exponent of non-linear hardening component -P $matTag tag associated with previously-defined UniaxialMaterial in axial direction -T $matTag tag associated with previously-defined UniaxialMaterial in torsional direction -My $matTag tag associated with previously-defined UniaxialMaterial in moment direction around local y-axis -Mz $matTag tag associated with previously-defined UniaxialMaterial in moment direction around local z-axis x1 x2 x3 vector components in global coordinates defining local x-axis (optional) y1 y2 y3 vector components in global coordinates defining local y-axis (optional) sDratio shear distance from iNode as a fraction of the element length (optional, default = 0.5) -doRayleigh to include Rayleigh damping from the bearing (optional, default = no Rayleigh damping contribution) m element mass (optional, default = 0.0) ElastomericBearingPlasticityFig01.png NOTE: If the element has zero length and optional orientation vectors are not specified, the local element axes coincide with the global axes. Otherwise the local \\(z\\) -axis is defined by the cross product between the \\(x\\) - and \\(y\\) -vectors specified on the command line. Elastomeric bearings are very stiff in compression, but not rigid. It is not a good idea to specify an extremely large axial stiffness (such as 1E10), because it can lead to problems with numerical sensitivity. Always specify a realistic value for the stiffness of the material that is assigned along the axial direction. To assign different compression and tension stiffness the Elastic or ElasticMultiLinear material can be used. The valid queries to an elastomeric bearing element when creating an ElementRecorder object are force, localForce, basicForce, localDisplacement, basicDisplacement and material $matNum matArg1 matArg2 ... Where matNum is the number associated with the material whose data is to be output. Examples For a 2D elastomeric bearing: element elastomericBearingPlasticity 1 1 2 20.0 2.50 0.02 0.0 3.0 -P 1 -Mz 2 ; For a 3D elastomeric bearing: element elastomericBearingPlasticity 1 1 2 20 2.50 0.02 0.0 3.0 -P 1 -T 2 -My 3 -Mz 4 ; Code developed by: Andreas Schellenberg, University of California, Berkeley.","title":"Elastomeric Bearing (Plasticity)"},{"location":"library/modeling/element/bearing/320-HDR/","text":"HDR This command is used to construct an HDR bearing element object in three-dimension. The 3D continuum geometry of an high damping rubber bearing is modeled as a 2-node, 12 DOF discrete element. This is the third element in the series of elements developed for analysis of base-isolated structures under extreme loading (others being ElastomericX and LeadRubberX ). The major difference between HDR element with ElastomericX is the hysteresis model in shear. The HDR element uses a model proposed by Grant et al. (2004) to capture the shear behavior of a high damping rubber bearing. The time-dependent values of mechanical properties (e.g., vertical stiffness, buckling load capacity) can also be recorded using the \u201cparameters\u201d recorder . For a 3D problem: element HDR $eleTag $Nd1 $Nd2 $Gr $Kbulk $D1 $D2 $ts $tr $n $a1 $a2 $a3 $b1 $b2 $b3 $c1 $c2 $c3 $c4 < < $x1 $x2 $x3 > $y1 $y2 $y3 > < $kc > < $PhiM > < $ac > < $sDratio > < $m > < $tc > eleTag unique element object tag Nd1 Nd2 end nodes Gr shear modulus of elastomeric bearing Kbulk bulk modulus of rubber D1 internal diameter D2 outer diameter (excluding cover thickness) ts single steel shim layer thickness tr single rubber layer thickness n number of rubber layers a1 , a2 , a3 , b1 , b2 , b3 , c1 , c2 , c3 , c4 parameters of the Grant model x1 x2 x3 vector components in global coordinates defining local x-axis (optional) y1 y2 y3 vector components in global coordinates defining local y-axis (optional) kc cavitation parameter (optional, default = 10.0) PhiM damage parameter (optional, default = 0.5) ac strength reduction parameter (optional, default = 1.0) sDratio shear distance from iNode as a fraction of the element length (optional, default = 0.5) m element mass (optional, default = 0.0) tc cover thickness (optional, default = 0.0) Physical Model and Mechanical Properties The physical model is considered as a two-node, twelve degrees-of-freedom discrete element. The two nodes are connected by six springs that represent the mechanical behavior in the six basic directions of a bearing. The degrees of freedom and discrete spring representation of an elastomeric bearing is shown in the below figures. The general form of element force vector, $$, and element stiffness matrix,<math></math> , for element representation considered above is given by equation below: \\[=\\left[ \\begin{matrix} Axial \\\\ Shear1 \\\\ Shear2 \\\\ Torsion \\\\ Rotation1 \\\\ Rotation2 \\\\ \\end{matrix} \\right];\\ \\ \\ \\ \\ \\ =\\left[ \\begin{matrix} Axial & 0 & 0 & 0 & 0 & 0 \\\\ 0 & Shear1 & Shear12 & 0 & 0 & 0 \\\\ 0 & Shear21 & Shear2 & 0 & 0 & 0 \\\\ 0 & 0 & 0 & Torsion & 0 & 0 \\\\ 0 & 0 & 0 & 0 & Rotation1 & 0 \\\\ 0 & 0 & 0 & 0 & 0 & Rotation2 \\\\ \\end{matrix} \\right]\\] The coupling of the two shear springs is considered directly by using a coupled bidirectional model. All other springs are uncoupled. The coupling of vertical and horizontal directions are considered indirectly by using expressions for mechanical properties in one direction that are dependent on the response parameters in the other direction. Linear uncoupled springs are considered in the torsion and the two rotational springs as they are not expected to significantly affect the response of an elastomeric bearing. The off-diagonal terms due to coupling between axial and shear, and axial and rotation, are not considered in the two-spring model (Koh and Kelly, 1987) used here. An exact model would have non-zero values of these off-diagonal terms. A discussion on the formulation of the two-spring model and the exact model is presented in Ryan et al.(1991). The subscript b refers to the element\u2019s basic coordinate system. Response quantities are transformed between the basic, local and global coordinates to perform computations. The discrete spring model presented here has the advantages of easy implementation and being computationally efficient. The mechanical properties of the six springs (also referred to as material models in OpenSees) are defined using analytical solutions available from the analysis of elastomeric bearings. The expression for mechanical properties, including stiffness and buckling load capacity, are derived using explicit consideration for geometric nonlinearity due to large displacement effects. The P-Delta effect, which is an approximate method to account for geometric nonlinearity in structural analysis problems, is therefore not considered. The material models in six directions are: Axial direction: a new mathematical model that captures the behavior under cyclic tension Link Two shear directions: a bidirectional model proposed by Grant et al. (2004) Torsion: a linear elastic model Two rotational directions: linear elastic models In addition to the behavior captured by existing bearing elements, this element can capture the following: Degradation of bearing stiffness and damping due to scragging effects in shear Cavitation and post-cavitation behavior in tension Variation in critical buckling load capacity due to lateral displacement Variation in vertical axial stiffness with horizontal displacement Recorders In addition to regular recorders provided by the bearing elements ( Element Recorder ), this element can also record instantaneous values of cavitation force (Fcn), buckling load capacity (Fcrn), and vertical stiffness (Kv) using the \"Parameters\" recorder in that order. Example: recorder Element < -file $fileName > -time < -ele ( $ele1 $ele2 ...) > Parameters recorder Element -file param.out -time -ele 1 Parameters To check if bearing has buckled or cavitated, an user can obtain the histories of Fcn and Fcrn as described above and divide the axial force (obtained from basicForce recorder, qb(2)) by Fcn and Fcrn at each time step, which provides demand vs capacity (D/C) ratios at each time step. If Fcn/qb(0) > 1.0 : Cavitation, or Fcrn/qb(0)>1.0 : Buckling. Examples An example is presented here, in which a high damping rubber bearing (bearing KL301 in Grant et al. (2004)) is subjected to different amplitudes and sequences of loading. The bearing (KL301) and parameters of Grant\u2019s model presented in Grant et al. (2004) have been used. The tcl files can be found here: References Kumar, M., Whittaker, A., and Constantinou, M. (2014). \u201cAn advanced numerical model of elastomeric seismic isolation bearings.\u201d Earthquake Engineering & Structural Dynamics, Published online, DOI: 10.1002/eqe.2431. Link Grant, D. N., Fenves, G. L., and Whittaker, A. S. (2004). \u201cBidirectional modeling of high-damping rubber bearings.\u201d Journal of Earthquake Engineering, 8(sup001), 161-185. Kumar, M., Whittaker, A., and Constantinou, M. (2015). \u201cExperimental investigation of cavitation in elastomeric seismic isolation bearings.\u201d Engineering Structures, 101, 290-305. Link Kumar, M., Whittaker, A., and Constantinou, M. (2015). \u201cResponse of base-isolated nuclear structures to extreme earthquake shaking.\u201d Nuclear Engineering and Design (In press). Link Code developed by: Manish Kumar, University at Buffalo, SUNY. Any bugs in this element can be reported to mkumar2 AT buffalo dot edu","title":"HDR"},{"location":"library/modeling/element/bearing/3233-FPBearingPTV/","text":"FPBearingPTV The FPBearingPTV command creates a single Friction Pendulum bearing element, which is capable of accounting for the changes in the coefficient of friction at the sliding surface with instantaneous values of the sliding velocity, axial pressure and temperature at the sliding surface. The constitutive modelling is similar to the existing singleFPBearing element, otherwise. The FPBearingPTV element has been verified and validated in accordance with the ASME guidelines, details of which are presented in Chapter 4 of Kumar et al. (2015a). element FPBearingPTV $eleTag $iNode $jNode $MuRef $IsPressureDependent $pRef $isTemperatureDependent $Diffusivity $Conductivity $IsVelocityDependent $rateParameter $ReffectiveFP $Radius_Contact $kInitial $theMaterialA $theMaterialB $theMaterialC $theMaterialD $x1 $x2 $x3 $y1 $y2 $y3 $shearDist $doRayleigh $mass $iter $tol $unit eleTag unique element object tag iNode jNode End nodes MuRef Reference coefficient of friction IsPressureDependent 1.0 if the coefficient of friction is a function of instantaneous axial pressure pRef Reference axial pressure (the bearing pressure under static loads) IsTemperatureDependent 1.0 if the coefficient of friction is a function of instantaneous temperature at the sliding surface Diffusivity Thermal diffusivity of steel Conductivity Thermal conductivity of steel IsVelocityDependent 1.0 if the coefficient of friction is a function of instantaneous velocity at the sliding surface rateParameter The exponent that determines the shape of the coefficient of friction vs. sliding velocity curve ReffectiveFP Effective radius of curvature of the sliding surface of the FPbearing Radius_Contact Radius of contact area at the sliding surface kInitial Lateral stiffness of the sliding bearing before sliding begins theMaterialA Tag for the uniaxial material in the axial direction theMaterialB Tag for the uniaxial material in the torsional direction theMaterialC Tag for the uniaxial material for rocking about local Y axis theMaterialD Tag for the uniaxial material for rocking about local Z axis x1 x2 x3 Vector components to define local X axis y1 y2 y3 Vector components to define local Y axis shearDist Shear distance from iNode as a fraction of the length of the element doRayleigh To include Rayleigh damping from the bearing mass Element mass iter Maximum number of iterations to satisfy the equilibrium of element tol Convergence tolerance to satisfy the equilibrium of the element unit Tag to identify the unit from the list below. 1: N, m, s, C 2: kN, m, s, C 3: N, mm, s, C 4: kN, mm, s, C 5: lb, in, s, C 6: kip, in, s, C 7: lb, ft, s, C 8: kip, ft, s, C NOTE: Updating the coefficient of friction during analysis The coefficient of friction at the sliding surface of a sliding bearing changes continuously with instantaneous values of sliding velocity, temperature at the sliding surface and axial pressure. The following definition of the coefficient of friction is implemented in the element. \\[Kv=1-0.5e^{-av} \\quad(1)\\] \\[kp = 0.70^{(p-p_0)/50} \\quad(2)\\] \\[kt = 0.79(0.70^{T/50} + 0.40) \\qquad (3)\\] where kv,kp and kt and are the factors to account for the effects of sliding velocity, axial pressure and temperature at the sliding surface, respectively, v,p and T are velocity of sliding, axial pressure and temperature at the sliding surface, respectively, controls the shape of the kv vs. v curve, and p0 is the reference axial pressure. The reference coefficient of friction, Uref , is defined as the coefficient of friction at a reference axial pressure on the bearing p0, measured at 20\u02daC at a high velocity of sliding (e.g., 1000 mm/s). The coefficient of friction, adjusted for the effects of sliding velocity, axial pressure and temperature, U(p,T,v), is obtained as follows. U(p,T,v) = Uref(kpktkv)(4) where all parameters were defined previously. More details on this definition of the coefficient of friction are presented in Kumar et al. (2015a, 2015b). OUTPUT The global and local forces, displacements, velocities and accelerations can be output through node and element recorders. In addition, temperature, three friction factors ( in sequence), and adjusted coefficient of friction can be output using the element recorder with tags Temperature, FrictionFactors, MuAdjusted, respectively. Examples are given below. recorder Element -file Results/Temperature.out -time -ele 1 Temperature; recorder Element -file Results/Mu.out -time -ele 1 MuAdjusted; recorder Element -file Results/MuFactors.out -time -ele 1 MuFactors; EXAMPLE (All numbers are in SI units (kg, m, C, S)): set iNode 1 ; set jNode 2 ; set R 2.2352 ; set Mu_Ref 0.06 ; set p_Ref 50000000 ; set kp_Factor 1 ; set kT_Factor 1 ; set kv_Factor 1 ; set DF 4.44e-6 ; set TK 18.0 ; set a 100.0 ; set Radius 0.2 ; set pi [expr 22.0 / 7.0 ] ; set Mass_Slider [expr $p_Ref * 1.0 * $pi * $Radius * $Radius / 9.81 ] ; set kInit [expr $Mass_Slider * $accelGravity * $Mu_Ref / $uy ] ; element FPBearingPTV 1 $iNode $jNode $Mu_Ref $kp_Factor $p_Ref $kT_Factor $DF \\ $TK $kv_Factor $a $R $Radius $kInit 1 2 3 4 0.0 0.0 1.0 1.0 0.0 0.0 \\ 0.0 0 0.0 100 1.0E-8 1 ; FPWithUpdate.tcl files models a single concave sliding bearing with the mass concentrated on the slider. Download the example file and the ground motions. References Kumar, M., Whittaker, A. S., and Constantinou (2015a). \u201cSeismic isolation of nuclear power plants using sliding bearings,\u201d Report MCEER-15- 0006, University at Buffalo, State University of New York, Buffalo, NY. Kumar, M., Whittaker, A. S., and Constantinou, M. C. (2015b). &quot;Characterizing friction in sliding isolation bearings,&quot; Earthquake Engineering &amp; Structural Dynamics, Vol. 44, No. 9, pp. 1409-1425.","title":"FPBearingPTV"},{"location":"library/modeling/element/bearing/3251-FlatSliderBearing/","text":"FlatSliderBearing This command is used to construct a flatSliderBearing element object, which is defined by two nodes. The iNode represents the flat sliding surface and the jNode represents the slider. The element can have zero length or the appropriate bearing height. The bearing has unidirectional (2D) or coupled (3D) friction properties for the shear deformations, and force-deformation behaviors defined by UniaxialMaterials in the remaining two (2D) or four (3D) directions. To capture the uplift behavior of the bearing, the user-specified UniaxialMaterial in the axial direction is modified for no-tension behavior. By default (sDratio = 0.0) P-Delta moments are entirely transferred to the flat sliding surface (iNode). It is important to note that rotations of the flat sliding surface (rotations at the iNode) affect the shear behavior of the bearing. To avoid the introduction of artificial viscous damping in the isolation system (sometimes referred to as \u201cdamping leakage in the isolation system\u201d), the bearing element does not contribute to the Rayleigh damping by default. If the element has non-zero length, the local x-axis is determined from the nodal geometry unless the optional x-axis vector is specified in which case the nodal geometry is ignored and the user-defined orientation is utilized. For a two-dimensional problem: element flatSliderBearing $eleTag $iNode $jNode $frnMdlTag $kInit -P $matTag -Mz $matTag < -orient $x1 $x2 $x3 $y1 $y2 $y3 > < -shearDist $sDratio > < -doRayleigh > < -mass $m > < -iter $maxIter $tol > For a three-dimensional problem: element flatSliderBearing $eleTag $iNode $jNode $frnMdlTag $kInit -P $matTag -T $matTag -My $matTag -Mz $matTag < -orient < $x1 $x2 $x3 > $y1 $y2 $y3 > < -shearDist $sDratio > < -doRayleigh > < -mass $m > < -iter $maxIter $tol > eleTag unique element object tag iNode jNode end nodes frnMdlTag tag associated with previously-defined FrictionModel kInit initial elastic stiffness in local shear direction -P $matTag tag associated with previously-defined UniaxialMaterial in axial direction -T $matTag tag associated with previously-defined UniaxialMaterial in torsional direction -My $matTag tag associated with previously-defined UniaxialMaterial in moment direction around local y-axis -Mz $matTag tag associated with previously-defined UniaxialMaterial in moment direction around local z-axis x1 x2 x3 vector components in global coordinates defining local x-axis (optional) y1 y2 y3 vector components in global coordinates defining local y-axis (optional) sDratio shear distance from iNode as a fraction of the element length (optional, default = 0.0) -doRayleigh to include Rayleigh damping from the bearing (optional, default = no Rayleigh damping contribution) m element mass (optional, default = 0.0) maxIter maximum number of iterations to undertake to satisfy element equilibrium (optional, default = 20) tol convergence tolerance to satisfy element equilibrium (optional, default = 1E-8) FlatSliderBearingFig01.png NOTE: If the element has zero length and optional orientation vectors are not specified, the local element axes coincide with the global axes. Otherwise the local z-axis is defined by the cross product between the x- and y-vectors specified on the command line. Because the friction force is affected by both the axial force and the slip rate, the element can be sensitive numerically. It is recommended that for dynamic analysis a smaller time step is being used than what would be used for a comparable structure with no isolators. If there is uplift (and therefore impact) in the bearing element, it can be helpful to use an integration method that provides numerical damping. Providing some viscous damping for the material that is assigned to the axial direction can also be helpful in dissipating impact energy. The valid queries to a flat slider bearing element when creating an ElementRecorder object are force , localForce , basicForce , localDisplacement , basicDisplacement and material $matNum matArg1 matArg2 ... Where matNum is the number associated with the material whose data is to be output. Examples For a 2D flat slider bearing: element flatSliderBearing 1 1 2 1 250.0 -P 1 -Mz 2 -orient 0 1 0 -1 0 0 ; TestSlider2d_0.tcl models a rigid isolated mass and the bearing element has zero length. It also tests the different friction models. TestSlider2d_1.tcl models a rigid isolated mass and the bearing element has finite length. TestSlider2d_2.tcl models an isolated one story stick and the bearing element has finite length. TestSlider2d_3.tcl models an isolated one story one bay building and the bearing element has finite length. TestSlider2d_4.tcl models an isolated five story one bay building and the bearing element has finite length. For a 3D flat slider bearing: element flatSliderBearing 1 1 2 1 250.0 -P 1 -T 2 -My 3 -Mz 4 -orient 0 0 1 -1 0 0 ; TestSlider3d_0.tcl models a rigid isolated mass and the bearing element has zero length. It also tests the different friction models. TestSlider3d_1.tcl models a rigid isolated mass and the bearing element has finite length. TestSlider3d_2.tcl models an isolated one story stick and the bearing element has finite length. TestSlider3d_3.tcl models an isolated one story one bay building and the bearing element has finite length. TestSlider3d_4.tcl models an isolated five story one bay building and the bearing element has finite length. Download the GroundMotions.zip as a compressed file or download AllSliderExamples.zip as a compressed file. Code developed by: Andreas Schellenberg, University of California, Berkeley.","title":"FlatSliderBearing"},{"location":"library/modeling/element/bearing/3406-MultipleShearSpring%20Element/","text":"MultipleShearSpring This command is used to construct a multipleShearSpring (MSS) element object, which is defined by two nodes. This element consists of a series of identical shear springs arranged radially to represent the isotropic behavior in the local \\(y\\) - \\(z\\) plane. element multipleShearSpring $eleTag $iNode $jNode $nSpring -mat $matTag < -lim $dsp > < -orient < $x1 $x2 $x3 > $yp1 $yp2 $yp3 > < -mass $m > eleTag unique element object tag inode jnode end nodes nSpring number of springs matTag tag associated with previously-defined UniaxialMaterial object dsp minimum deformation to calculate equivalent coefficient (see note 1) x1 x2 x3 vector components in global coordinates defining local x-axis yp1 yp2 yp3 vector components in global coordinates defining vector yp which lies in the local \\(x\\) - \\(y\\) plane for the element m element mass NOTES: If dsp is positive and the shear deformation of MSS exceeds dsp , this element calculates equivalent coefficient to adjust force and stiffness of MSS. The adjusted MSS force and stiffness reproduce the behavior of the previously defined uniaxial material under monotonic loading in every direction. If dsp is zero, the element does not calculate the equivalent coefficient. The valid queries to a multipleShearSpring element when creating an ElementRecorder object are globalForce , localForce , basicForce , localDisplacement and basicDeformation . MultipleShearSpring_Model.png Examples element multipleShearSpring 1 1 2 16 -mat 1 MultipleShearSpring_Sample.tcl , MultipleShearSpring_input_X.tcl , MultipleShearSpring_input_Y.tcl &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; References Wada. A. and Hirose K. , \u201cBuilding Frames Subjected to 2D Earthquake Motion\u201d, Seismic Engineering: Research and Practice, American Society of Civil Engineers , 388-397, 1989. Code developed by: mkiku","title":"MultipleShearSpring"},{"location":"library/modeling/element/bearing/354-KikuchiBearing%20Element/","text":"KikuchiBearing This command is used to construct a KikuchiBearing element object, which is defined by two nodes. This element consists of multiple shear spring model (MSS) and multiple normal spring model (MNS). element KikuchiBearing $eleTag $iNode $jNode -shape $shape -size $size $totalRubber < -totalHeight $totalHeight > -nMSS $nMSS -matMSS $matMSSTag < -limDisp $limDisp > -nMNS $nMNS -matMNS $matMNSTag < -lambda $lambda > < -orient < $x1 $x2 $x3 > $yp1 $yp2 $yp3 > < -mass $m > < -noPDInput > < -noTilt > < -adjustPDOutput $ci $cj > < -doBalance $limFo $limFi $nIter > eleTag unique element object tag inode jnode end nodes shape following shapes are available: round , square size diameter (round shape), length of edge (square shape) totalRubber total rubber thickness totalHeight total height of the bearing (defaulut: distance between iNode and jNode) nMSS number of springs in MSS = nMSS matMSSTag matTag for MSS limDisp minimum deformation to calculate equivalent coefficient of MSS (see note 1) nMNS number of springs in MNS = nMNS*nMNS (for round and square shape) matMNSTag matTag for MNS lambda parameter to calculate compression modulus distribution on MNS (see note 2) x1 x2 x3 vector components in global coordinates defining local x-axis yp1 yp2 yp3 vector components in global coordinates defining vector yp which lies in the local x-y plane for the element m element mass -noPDInput not consider P-Delta moment -noTilt not consider tilt of rigid link ci cj P-Delta moment adjustment for reaction force (default: ci =0.5, cj =0.5) limFo limFi nIter tolerance of external unbalanced force ( limFo ), tolorance of internal unbalanced force ( limFi ), number of iterations to get rid of internal unbalanced force ( nIter ) NOTES: If limdisp is positive and the shear deformation of MSS exceeds limdisp , this element calculates equivalent coefficient to adjust force and stiffness of MSS. The adjusted MSS force and stiffness reproduce the behavior of the previously defined uniaxial material under monotonic loading in every direction. Recommended value is (D/t) sqrt(3 G/K), where D, t, G and K are size (for round and square shape), thickness, shear modulus and bulk modulus of a rubber layer, respectively. The valid queries to a KikuchiBearing element when creating an ElementRecorder object are 'globalForce' , 'localForce' , 'basicForce' , 'localDisplacement' and 'basicDeformation' . KikuchiBearing_Model.png Examples element KikuchiBearing 1 1 2 -shape round -size 1.016 0.320 -nMSS 8 \\ -matMSS 1 -nMNS 30 -matMNS 2 KikuchiBearing_Sample.tcl , KikuchiBearing_input_Z.tcl , KikuchiBearing_input_X.tcl case 1: P-Delta effect not considered (use -noPDInput -noTilt option) case 2: P-Delta effect considered, uniform distribution of compression modulus case 3: P-Delta effect considered (use -lambda option) References M. Kikuchi , I. D. Aiken and A. Kasalanati , \u201cSimulation analysis for the ultimate behavior of full-scale lead-rubber seismic isolation bearings\u201d, 15th World Conference on Earthquake Engineering , No. 1688, 2012. Code Developed by: mkiku","title":"KikuchiBearing"},{"location":"library/modeling/element/bearing/3568-RJ-Watson%20EQS%20Bearing%20Element/","text":"RJ-Watson EQS Bearing This command is used to construct a RJWatsonEqsBearing element object, which is defined by two nodes. The iNode represents the masonry plate and the jNode represents the sliding surface plate. The element can have zero length or the appropriate bearing height. The bearing has unidirectional (2D) or coupled (3D) friction properties (with post-yield stiffening due to the mass-energy-regulator (MER) springs) for the shear deformations, and force-deformation behaviors defined by UniaxialMaterials in the remaining two (2D) or four (3D) directions. To capture the uplift behavior of the bearing, the user-specified UniaxialMaterial in the axial direction is modified for no-tension behavior. By default (sDratio = 1.0) P-Delta moments are entirely transferred to the sliding surface (jNode). It is important to note that rotations of the sliding surface (rotations at the jNode) affect the shear behavior of the bearing. To avoid the introduction of artificial viscous damping in the isolation system (sometimes referred to as \u201cdamping leakage in the isolation system\u201d), the bearing element does not contribute to the Rayleigh damping by default. If the element has non-zero length, the local x-axis is determined from the nodal geometry unless the optional x-axis vector is specified in which case the nodal geometry is ignored and the user-defined orientation is utilized. For a two-dimensional problem: element RJWatsonEqsBearing $eleTag $iNode $jNode $frnMdlTag $kInit -P $matTag -Vy $matTag -Mz $matTag < -orient $x1 $x2 $x3 $y1 $y2 $y3 > < -shearDist $sDratio > < -doRayleigh > < -mass $m > < -iter $maxIter $tol > For a three-dimensional problem: element RJWatsonEqsBearing $eleTag $iNode $jNode $frnMdlTag $kInit -P $matTag -Vy $matTag -Vz $matTag -T $matTag -My $matTag -Mz $matTag < -orient < $x1 $x2 $x3 > $y1 $y2 $y3 > < -shearDist $sDratio > < -doRayleigh > < -mass $m > < -iter $maxIter $tol > eleTag unique element object tag iNode jNode end nodes frnMdlTag tag associated with previously-defined FrictionModel kInit initial stiffness of sliding friction component in local shear direction -P $matTag tag associated with previously-defined UniaxialMaterial in axial direction -Vy $matTag tag associated with previously-defined UniaxialMaterial in shear direction along local y-axis (MER spring behavior not including friction) -Vz $matTag tag associated with previously-defined UniaxialMaterial in shear direction along local z-axis (MER spring behavior not including friction) -T $matTag tag associated with previously-defined UniaxialMaterial in torsional direction -My $matTag tag associated with previously-defined UniaxialMaterial in moment direction around local y-axis -Mz $matTag tag associated with previously-defined UniaxialMaterial in moment direction around local z-axis x1 x2 x3 vector components in global coordinates defining local x-axis (optional) y1 y2 y3 vector components in global coordinates defining local y-axis (optional) sDratio shear distance from iNode as a fraction of the element length (optional, default = 0.0) -doRayleigh to include Rayleigh damping from the bearing (optional, default = no Rayleigh damping contribution) m element mass (optional, default = 0.0) maxIter maximum number of iterations to undertake to satisfy element equilibrium (optional, default = 20) tol convergence tolerance to satisfy element equilibrium (optional, default = 1E-8) RJWatsonEQSBearingFig01.png NOTE: If the element has zero length and optional orientation vectors are not specified, the local element axes coincide with the global axes. Otherwise the local z-axis is defined by the cross product between the x- and y-vectors specified on the command line. Because the friction force is affected by both the axial force and the slip rate, the element can be sensitive numerically. It is recommended that for dynamic analysis a smaller time step is being used than what would be used for a comparable structure with no isolators. If there is uplift (and therefore impact) in the bearing element, it can be helpful to use an integration method that provides numerical damping. Providing some viscous damping for the material that is assigned to the axial direction can also be helpful in dissipating impact energy. The valid queries to a RJ-Watson EQS bearing element when creating an ElementRecorder object are \u2018force,\u2019 \u2018localForce,\u2019 \u2018basicForce,\u2019 \u2018localDisplacement,\u2019 \u2018basicDisplacement\u2019 and \u2018material $matNum matArg1 matArg2 \u2026\u2019 Where $matNum is the number associated with the material whose data is to be output. Examples For a 2D RJ-Watson EQS bearing: element RJWatsonEqsBearing 1 1 2 1 250.0 -P 1 -Vy 2 -Mz 3 -orient 0 1 0 -1 0 0 ; TestFPS2d_0.tcl models a rigid isolated mass and the bearing element has zero length. It also tests the different friction models. TestFPS2d_1.tcl models a rigid isolated mass and the bearing element has finite length. TestFPS2d_2.tcl models an isolated one story stick and the bearing element has finite length. TestFPS2d_3.tcl models an isolated one story one bay building and the bearing element has finite length. TestFPS2d_4.tcl models an isolated five story one bay building and the bearing element has finite length. For a 3D RJ-Watson EQS bearing: element RJWatsonEqsBearing 1 1 2 1 250.0 -P 1 -Vy 2 -Vz 2 -T 3 -My 4 -Mz 4 -orient 0 0 1 -1 0 0 ; TestFPS3d_0.tcl models a rigid isolated mass and the bearing element has zero length. It also tests the different friction models. TestFPS3d_1.tcl models a rigid isolated mass and the bearing element has finite length. TestFPS3d_2.tcl models an isolated one story stick and the bearing element has finite length. TestFPS3d_3.tcl models an isolated one story one bay building and the bearing element has finite length. TestFPS3d_4.tcl models an isolated five story one bay building and the bearing element has finite length. Download the GroundMotions.zip as a compressed file or download AllFPSExamples.zip as a compressed file. Code developed by: Andreas Schellenberg, University of California, Berkeley.","title":"RJ-Watson EQS Bearing"},{"location":"library/modeling/element/bearing/361-LeadRubberX/","text":"LeadRubberX This command is used to construct a LeadRubberX bearing element object in three-dimension. The 3D continuum geometry of a lead rubber bearing is modeled as a 2-node, 12 DOF discrete element. It extends the formulation of ElastomericX by including strength degradation in lead rubber bearing due to heating of the lead-core. The LeadRubberX element requires only the geometric and material properties of an elastomeric bearing as arguments. The material models in six direction are formulated within the element from input arguments. The time-dependent values of mechanical properties (e.g., shear stiffness, buckling load capacity, temperature in the lead-core, yield strength) can also be recorded using the \u201cparameters\u201d recorder . For a 3D problem: element LeadRubberX $eleTag $Nd1 $Nd2 $Fy $alpha $Gr $Kbulk $D1 $D2 $ts $tr $n < < $x1 $x2 $x3 > $y1 $y2 $y3 > < $kc > < $PhiM > < $ac > < $sDratio > < $m > < $cd > < $tc > < $qL > < $cL > < $kS > < $aS > < $tag1 > < $tag2 > < $tag3 > < $tag4 > < $tag5 > eleTag unique element object tag Nd1 Nd2 end nodes Fy yield strength alpha post-yield stiffness ratio Gr shear modulus of elastomeric bearing Kbulk bulk modulus of rubber D1 internal diameter D2 outer diameter (excluding cover thickness) ts single steel shim layer thickness tr single rubber layer thickness n number of rubber layers x1 x2 x3 vector components in global coordinates defining local x-axis (optional) y1 y2 y3 vector components in global coordinates defining local y-axis (optional) kc cavitation parameter (optional, default = 10.0) PhiM damage parameter (optional, default = 0.5) ac strength reduction parameter (optional, default = 1.0) sDratio shear distance from iNode as a fraction of the element length (optional, default = 0.5) m element mass (optional, default = 0.0) cd viscous damping parameter (optional, default = 0.0) tc cover thickness (optional, default = 0.0) qL density of lead (optional, default = 11200 kg/m3) cL specific heat of lead (optional, default = 130 N-m/kg oC) kS thermal conductivity of steel (optional, default = 50 W/m oC) aS thermal diffusivity of steel (optional, default = 1.41e-05 m2/s) tag1 Tag to include cavitation and post-cavitation (optional, default = 0) tag2 Tag to include buckling load variation (optional, default = 0) tag3 Tag to include horizontal stiffness variation (optional, default = 0) tag4 Tag to include vertical stiffness variation (optional, default = 0) tag5 Tag to include strength degradation in shear due to heating of lead core (optional, default = 0) Important note: Because default values of heating parameters are in SI units, user must override the default heating parameters values if using Imperial units <br /> User should distinguish between yield strength of elastomeric bearing (Fy) and characteristic strength (Qd): Qd=Fy*(1-alpha) Physical Model and Mechanical Properties The physical model of an elastomeric bearing is considered as a two-node, twelve degrees-of-freedom discrete element. The two nodes are connected by six springs that represent the mechanical behavior in the six basic directions of a bearing. The degrees of freedom and discrete spring representation of an elastomeric bearing are shown in the below figures. The general form of element force vector, $$, and element stiffness matrix,<math></math> , for element representation considered above is given by equation below: \\[=\\left[ \\begin{matrix} Axial \\\\ Shear1 \\\\ Shear2 \\\\ Torsion \\\\ Rotation1 \\\\ Rotation2 \\\\ \\end{matrix} \\right];\\ \\ \\ \\ \\ \\ =\\left[ \\begin{matrix} Axial & 0 & 0 & 0 & 0 & 0 \\\\ 0 & Shear1 & Shear12 & 0 & 0 & 0 \\\\ 0 & Shear21 & Shear2 & 0 & 0 & 0 \\\\ 0 & 0 & 0 & Torsion & 0 & 0 \\\\ 0 & 0 & 0 & 0 & Rotation1 & 0 \\\\ 0 & 0 & 0 & 0 & 0 & Rotation2 \\\\ \\end{matrix} \\right]\\] The coupling of the two shear springs is considered directly by using a coupled bidirectional model. All other springs are uncoupled. The coupling of vertical and horizontal directions are considered indirectly by using expressions for mechanical properties in one direction that are dependent on the response parameters in the other direction. Linear uncoupled springs are considered in the torsion and the two rotational springs as they are not expected to significantly affect the response of an elastomeric bearing. The off-diagonal terms due to coupling between axial and shear, and axial and rotation, are not considered in the two-spring model (Koh and Kelly, 1987) used here. An exact model would have non-zero values of these off-diagonal terms. A discussion on the formulation of the two-spring model and the exact model is presented in Ryan et al.(1991). The subscript b refers to the element\u2019s basic coordinate system. When the model is implemented in software programs, response quantities are transformed between the basic, local and global coordinates to perform computations. The discrete spring model presented here has the advantages of easy implementation and being computationally efficient. The mechanical properties of the six springs (also referred to as material models in OpenSees) are defined using analytical solutions available from the analysis of elastomeric bearings. The expression for mechanical properties, including stiffness and buckling load capacity, are derived using explicit consideration for geometric nonlinearity due to large displacement effects. The material models in six directions are: Axial direction: a new mathematical model that captures the behavior under cyclic tension Link Two shear directions: a special case of the Bouc-Wen model extended by Nagarajaiah et al.(1991) for seismic isolation bearings combined with a strength degradation model of Kalpakidis et al.(2010) Torsion: a linear elastic model Two rotational directions: linear elastic models In addition to the behavior captured by existing bearing elements, this element can capture following characteristics: Cavitation and post-cavitation behavior in tension (tag1) Variation in critical buckling load capacity due to lateral displacement (tag2) Variation in horizontal shear stiffness with axial load on the bearing (tag3) Variation in vertical axial stiffness with horizontal displacement (tag4) Strength degradation in cyclic shear loading due to heating of lead core (tag5) User may choose to include an individual or a combination of these behaviors through user tags (include:1, exclude:0) in their analysis. For the full capabilities of this element, users are referred to: EESD Article Consideration of characteristics to include under extreme loading A recent paper by Kumar et. al (2015) explains which of the five tags should be included in the analysis. Although the analysis presented in the paper is for the base-isolated NPP, the conclusions are valid for design earthquake and maximum considered earthquake for regular building structures as well. Following are few thumb rules that can be followed: tag 1: Unless you are investigating the tensile behavior, the effect of the tensile model on shear response is insignificant. tag 2: It is recommended to use tag to include variable buckling load capacity. It affects the compression capacity and shear stiffness. The apparent softening in shear force-deformation behavior at high axial load is due to this. A constant buckling load will show less softening. tag 3: Recommended if axial load expected during the loading is more than 10% of the buckling load capacity. tag2+tag3 provides greater softening. tag 4: Unless you are investigating the axial behavior, the effect of the tensile model on shear response is insignificant. tag 5: Recommended for long duration and low frequency ground motions. Effect is more prominent at beyond design basis earthquakes. Verification and validation This is element has been verified per ASME guidelines. A great deal of effort has gone into benchmarking performance of this user element using experimental data and verification using same element implement in LS-DYNA and ABAQUS. Users are referred to the Engineering Structures Paper for complete details. Additional information is also presented in SMiRT23 Paper and chapter 4 of the MCEER Report MCEER 15-0008 . Update: The LR isolator element is now implemented in the Mastadon software LR Isolator Element at Idaho National Laboratory by the research group working at University at Buffalo and Idaho National Laboratory. Recorders In addition to regular recorders provided by the bearing elements ( Element Recorder ), this element can also record instantaneous values of cavitation force (Fcn), buckling load capacity (Fcrn), vertical stiffness (Kv), horizontal stiffness (ke), temperature increase (dT), and yield strength (qYield) using the \u201cParameters\u201d recorder in that order. Example: # recorder Element < -file $fileName > -time < -ele ($ele1 $ele2 ...) > Parameters recorder Element -file param.out -time -ele 1 Parameters To check if bearing has buckled or cavitated, an user can obtain the histories of Fcn and Fcrn as described above and divide the axial force (obtained from basicForce recorder, qb(2)) by Fcn and Fcrn at each time step, which provides demand vs capacity (D/C) ratios at each time step. If Fcn/qb(0) > 1.0 : Cavitation, or Fcrn/qb(0)>1.0 : Buckling. Examples An example is presented here in which a lead rubber bearing (large size bearing in Kalpakidis et al. (2010)) is subjected to a shear harmonic loading in laboratory (SEESL at UB). The response obtained from LeadRubberX element in OpenSees is compared with the experimental results. Excitation files: \u200e Tcl files: Numerical and experimental response comparison References Kumar, M., Whittaker, A., and Constantinou, M. (2014). \u201cAn advanced numerical model of elastomeric seismic isolation bearings.\u201d Earthquake Engineering & Structural Dynamics, 43(13), 1955-1974. Link Kumar, M., Whittaker, A., and Constantinou, M. (2015). \u201cExperimental investigation of cavitation in elastomeric seismic isolation bearings.\u201d Engineering Structures, 101, 290-305. Link Kumar, M., Whittaker, A., and Constantinou, M. (2015). \u201cResponse of base-isolated nuclear structures to extreme earthquake shaking.\u201d Nuclear Engineering and Design, 295, 860-874. Link Kumar, M., and Whittaker, A. (2018). \u201cCross-platform implementation, verification and validation of advanced mathematical models of elastomeric seismic isolation bearings.\u201d Engineering Structures, 175, 926-943. Link Kalpakidis, I. V., Constantinou, M. C., and Whittaker, A. S. (2010). \u201cModeling strength degradation in lead-rubber bearings under earthquake shaking.\u201d Earthquake Engineering and Structural Dynamics, 39(13), 1533-1549. Code Developed by: Manish Kumar, University at Buffalo, SUNY Any bugs in this element can be reported to mkumar2 AT buffalo dot edu","title":"LeadRubberX"},{"location":"library/modeling/element/bearing/3650-Single%20Concave%20Friction%20Pendulum%20Bearing%20Element/","text":"Single Concave Friction Pendulum Bearing This command is used to construct a singleFPBearing element object, which is defined by two nodes. The iNode represents the concave sliding surface and the jNode represents the articulated slider. The element can have zero length or the appropriate bearing height. The bearing has unidirectional (2D) or coupled (3D) friction properties (with post-yield stiffening due to the concave sliding surface) for the shear deformations, and force-deformation behaviors defined by UniaxialMaterials in the remaining two (2D) or four (3D) directions. To capture the uplift behavior of the bearing, the user-specified UniaxialMaterial in the axial direction is modified for no-tension behavior. P-Delta moments are entirely transferred to the concave sliding surface (iNode). It is important to note that rotations of the concave sliding surface (rotations at the iNode) affect the shear behavior of the bearing. If the element has non-zero length, the local \\(x\\) -axis is determined from the nodal geometry unless the optional \\(x\\) -axis vector is specified in which case the nodal geometry is ignored and the user-defined orientation is utilized. For a two-dimensional problem: element singleFPBearing $eleTag $iNode $jNode $frnMdlTag $R $h $uy -P $matTag -Mz $matTag < -orient $x1 $x2 $x3 $y1 $y2 $y3 > < -mass $m > < -iter $maxIter $tol > For a three-dimensional problem: element singleFPBearing $eleTag $iNode $jNode $frnMdlTag $R $h $uy -P $matTag -T $matTag -My $matTag -Mz $matTag < -orient < $x1 $x2 $x3 > $y1 $y2 $y3 > < -mass $m > < -iter $maxIter $tol > eleTag unique element object tag iNode jNode end nodes frnMdlTag tag associated with previously-defined FrictionModel R radius of concave sliding surface h height of articulated slider uy yield displacement -P $matTag tag associated with previously-defined UniaxialMaterial in axial direction -T $matTag tag associated with previously-defined UniaxialMaterial in torsional direction -My $matTag tag associated with previously-defined UniaxialMaterial in moment direction around local y-axis -Mz $matTag tag associated with previously-defined UniaxialMaterial in moment direction around local z-axis x1 x2 x3 vector components in global coordinates defining local x-axis (optional) y1 y2 y3 vector components in global coordinates defining local y-axis (optional) m element mass (optional, default = 0.0) maxIter maximum number of iterations to undertake to satisfy element equilibrium (optional, default = 20) tol convergence tolerance to satisfy element equilibrium (optional, default = 1E-8) NOTE: If the element has zero length and optional orientation vectors are not specified, the local element axes coincide with the global axes. Otherwise the local \\(z\\) -axis is defined by the cross product between the \\(x\\) - and \\(y\\) -vectors specified on the command line. The valid queries to a single concave friction pendulum bearing element when creating an ElementRecorder object are force , localForce , basicForce , localDisplacement , basicDisplacement and material $matNum matArg1 matArg2 ... Where $matNum is the number associated with the material whose data is to be output. Examples For a 2D single concave friction pendulum bearing: element singleFPBearing 1 1 2 1 37.28 2.60 0.01 -P 1 -Mz 2 -orient 0 1 0 -1 0 0 ; For a 3D single concave friction pendulum bearing: element singleFPBearing 1 1 2 1 37.28 2.60 0.01 -P 1 -T 2 -My 3 -Mz 4 -orient 0 0 1 -1 0 0 ; Code developed by: Andreas Schellenberg, University of California, Berkeley.","title":"Single Concave Friction Pendulum Bearing"},{"location":"library/modeling/element/bearing/3651-Single%20Friction%20Pendulum%20Bearing%20Element/","text":"Single Friction Pendulum Bearing This command is used to construct a singleFPBearing element object, which is defined by two nodes. The iNode represents the concave sliding surface and the jNode represents the articulated slider. The element can have zero length or the appropriate bearing height. The bearing has unidirectional (2D) or coupled (3D) friction properties (with post-yield stiffening due to the concave sliding surface) for the shear deformations, and force-deformation behaviors defined by UniaxialMaterials in the remaining two (2D) or four (3D) directions. To capture the uplift behavior of the bearing, the user-specified UniaxialMaterial in the axial direction is modified for no-tension behavior. By default (sDratio = 0.0) P-Delta moments are entirely transferred to the concave sliding surface (iNode). It is important to note that rotations of the concave sliding surface (rotations at the iNode) affect the shear behavior of the bearing. To avoid the introduction of artificial viscous damping in the isolation system (sometimes referred to as \u201cdamping leakage in the isolation system\u201d), the bearing element does not contribute to the Rayleigh damping by default. If the element has non-zero length, the local x-axis is determined from the nodal geometry unless the optional x-axis vector is specified in which case the nodal geometry is ignored and the user-defined orientation is utilized. For a two-dimensional problem: element singleFPBearing $eleTag $iNode $jNode $frnMdlTag $Reff $kInit -P $matTag -Mz $matTag < -orient $x1 $x2 $x3 $y1 $y2 $y3 > < -shearDist $sDratio > < -doRayleigh > < -mass $m > < -iter $maxIter $tol > For a three-dimensional problem: element singleFPBearing $eleTag $iNode $jNode $frnMdlTag $Reff $kInit -P $matTag -T $matTag -My $matTag -Mz $matTag < -orient < $x1 $x2 $x3 > $y1 $y2 $y3 > < -shearDist $sDratio > < -doRayleigh > < -mass $m > < -iter $maxIter $tol > eleTag unique element object tag iNode jNode end nodes frnMdlTag tag associated with previously-defined FrictionModel Reff effective radius of concave sliding surface kInit initial elastic stiffness in local shear direction -P $matTag tag associated with previously-defined UniaxialMaterial in axial direction -T $matTag tag associated with previously-defined UniaxialMaterial in torsional direction -My $matTag tag associated with previously-defined UniaxialMaterial in moment direction around local y-axis -Mz $matTag tag associated with previously-defined UniaxialMaterial in moment direction around local z-axis x1 x2 x3 vector components in global coordinates defining local x-axis (optional) y1 y2 y3 vector components in global coordinates defining local y-axis (optional) sDratio shear distance from iNode as a fraction of the element length (optional, default = 0.0) -doRayleigh to include Rayleigh damping from the bearing (optional, default = no Rayleigh damping contribution) m element mass (optional, default = 0.0) maxIter maximum number of iterations to undertake to satisfy element equilibrium (optional, default = 20) tol convergence tolerance to satisfy element equilibrium (optional, default = 1E-8) SingleFPBearingFig01.png NOTE: If the element has zero length and optional orientation vectors are not specified, the local element axes coincide with the global axes. Otherwise the local \\(z\\) -axis is defined by the cross product between the \\(x\\) - and \\(y\\) -vectors specified on the command line. Because the friction force is affected by both the axial force and the slip rate, the element can be sensitive numerically. It is recommended that for dynamic analysis a smaller time step is being used than what would be used for a comparable structure with no isolators. If there is uplift (and therefore impact) in the bearing element, it can be helpful to use an integration method that provides numerical damping. Providing some viscous damping for the material that is assigned to the axial direction can also be helpful in dissipating impact energy. The valid queries to a single concave friction pendulum bearing element when creating an ElementRecorder object are force , localForce , basicForce , localDisplacement , basicDisplacement and material $matNum matArg1 matArg2 ... Where $matNum is the number associated with the material whose data is to be output. Examples For a 2D single concave friction pendulum bearing: element singleFPBearing 1 1 2 1 34.68 250.0 -P 1 -Mz 2 -orient 0 1 0 -1 0 0 ; TestFPS2d_0.tcl models a rigid isolated mass and the bearing element has zero length. It also tests the different friction models. TestFPS2d_1.tcl models a rigid isolated mass and the bearing element has finite length. TestFPS2d_2.tcl models an isolated one story stick and the bearing element has finite length. TestFPS2d_3.tcl models an isolated one story one bay building and the bearing element has finite length. TestFPS2d_4.tcl models an isolated five story one bay building and the bearing element has finite length. For a 3D single concave friction pendulum bearing: element singleFPBearing 1 1 2 1 34.68 250.0 -P 1 -T 2 -My 3 -Mz 4 -orient 0 0 1 -1 0 0 ; TestFPS3d_0.tcl models a rigid isolated mass and the bearing element has zero length. It also tests the different friction models. TestFPS3d_1.tcl models a rigid isolated mass and the bearing element has finite length. TestFPS3d_2.tcl models an isolated one story stick and the bearing element has finite length. TestFPS3d_3.tcl models an isolated one story one bay building and the bearing element has finite length. TestFPS3d_4.tcl models an isolated five story one bay building and the bearing element has finite length. Download the GroundMotions.zip as a compressed file or download AllFPSExamples.zip as a compressed file. Code developed by: Andreas Schellenberg, University of California, Berkeley.","title":"Single Friction Pendulum Bearing"},{"location":"library/modeling/element/bearing/3714-TripleFrictionPendulumBearing/","text":"Triple Friction Pendulum Bearing This command is used to construct a Triple Friction Pendulum Bearing element object, which is defined by two nodes. The element can have zero length or the appropriate bearing height. The bearing has unidirectional (2D) or coupled (3D) friction properties (with post-yield stiffening due to the concave sliding surface) for the shear deformations, and force-deformation behaviors defined by UniaxialMaterials in the remaining two (2D) or four (3D) directions. To capture the uplift behavior of the bearing, the user-specified UniaxialMaterial in the axial direction is modified for no-tension behavior. P-Delta moments are entirely transferred to the concave sliding surface (iNode). It is important to note that rotations of the concave sliding surface (rotations at the iNode) affect the shear behavior of the bearing. If the element has non-zero length, the local x-axis is determined from the nodal geometry unless the optional x-axis vector is specified in which case the nodal geometry is ignored and the user-defined orientation is utilized. TFP_backbone.gif element TFP $eleTag $iNode $jNode $R1 $R2 $R3 $R4 $D1 $D2 $D3 $D4 \\ $d1 $d2 $d3 $d4 $mu1 $mu2 $mu3 $mu4 $h1 $h2 $h3 $h4 $H0 $colLoad < $K > eleTag unique element object tag iNode jNode end nodes R1 Radius of inner bottom sliding surface R2 Radius of inner top sliding surface R3 Radius of outer bottom sliding surface R4 Radius of outer top sliding surface D1 Diameter of inner bottom sliding surface D2 Diameter of inner top sliding surface D3 Diameter of outer bottom sliding surface D4 Diameter of outer top sliding surface d1 diameter of inner slider d2 diameter of inner slider d3 diameter of outer bottom slider d4 diameter of outer top slider mu1 friction coefficient of inner bottom sliding surface mu2 friction coefficient of inner top sliding surface mu3 friction coefficient of outer bottom sliding surface mu4 friction coefficient of outer top sliding surface h1 height from inner bottom sliding surface to center of bearing h2 height from inner top sliding surface to center of bearing h3 height from outer bottom sliding surface to center of bearing h4 height from inner top sliding surface to center of bearing H0 total height of bearing colLoad initial axial load on bearing (only used for first time step then load come from model) K optional, stiffness of spring in vertical dirn (dof 2 if ndm= 2, dof 3 if ndm = 3) (default=1.0e15) TFPwH0.gif TFP_displaced.gif NOTE: If the element has zero length and optional orientation vectors are not specified, the local element axes coincide with the global axes. Otherwise the local z-axis is defined by the cross product between the \\(x\\) - and \\(y\\) -vectors specified on the command line. The valid queries to a triple friction pendulum bearing element when creating an ElementRecorder object are force , localForce , basicForce , localDisplacement , basicDisplacement , relativeDisp , plasticDisp , and material $matNum matArg1 matArg2 ... Where matNum is the number associated with the material whose data is to be output. relativeDisp returns relative displacements between the sliding components in the bearing. Relative displacements is the rotation (as shown in the figure above) multiplied by the respective radii. For each time step it returns 8 values; 4 for each horizontal direction. plasticDisp returns plastic displacements associated with relativeDisp Examples element TFP 1 1 2 12.0 12.0 88.0 88.0 12.0 12.0 44.0 44.0 8.0 8.0 \\ 12.5 12.5 0.02 0.02 0.09 0.12 3.0 3.0 4.5 4.5 12.5 45.0 ; References Becker, TC, Mahin, SA. \u201cExperimental and analytical study of the bi-directional behavior of the triple friction pendulum isolator,\u201d Earthquake Engineering and Structural Dynamics. (accepted for publication 03/11) read the paper Code Developed by: Tracy Becker, University of California, Berkeley.","title":"Triple Friction Pendulum Bearing"},{"location":"library/modeling/element/bearing/3715-TripleFrictionPendulum/","text":"TripleFrictionPendulum This command is used to construct a Triple Friction Pendulum Bearing (TPB) (Figure 1) element object. The element is a 3-dimensional element with variable friction coefficient models [1] [2]. The element accounts for the vertical-horizontal coupling and the bidirectional coupling in horizontal behavior. The friction coefficient model is a general model that accounts for the variation of friction coefficient on velocity and vertical force. Other simplified friction coefficient models such as vertical-force-independent friction coefficient, velocity-independent friction coefficient and constant friction coefficient can also be defined. The element can also be used for modeling single friction pendulum bearings or double friction pendulum bearings by simplifying the general backbone curve of the TPB. element TripleFrictionPendulum $eleTag $iNode $jNode $frnTag1 $frnTag2 $frnTag3 $vertMatTag $rotZMatTag $rotXMatTag $rotYMatTag $L1 $L2 $L3 $d1 $d2 $d3 $W $uy $kvt $minFv $tol eleTag = unique element object tag iNode jNode = end nodes frnTag1, frnTag2, frnTag2 = tags associated with previously-defined FrictionModels at the three sliding interfaces vertMatTag = Pre-defined material tag for COMPRESSION behavior of the bearing rotZMatTag, rotXMatTag, rotYMatTag = Pre-defined material tags for rotational behavior about 3-axis, 1-axis and 2-axis, respectively. L1, L2, L3 = effective radii. Li = R_i - h_i (see Figure 1) d1, d2, d3 = displacement limits of pendulums (Figure 1). Displacement limit of the bearing is 2d1+d2+d3+L1.d3/L3-L1.d2/L2 W = axial force used for the first trial of the first analysis step. uy = lateral displacement where sliding of the bearing starts. Recommended value = 0.25 to 1 mm. A smaller value may cause convergence problem. kvt = Tension stiffness k_vt of the bearing. minFv (>=0) = minimum vertical compression force in the bearing used for computing the horizontal tangent stiffness matrix from the normalized tangent stiffness matrix of the element. minFv is substituted for the actual compressive force when it is less than minFv , and prevents the element from using a negative stiffness matrix in the horizontal direction when uplift occurs. The vertical nodal force returned to nodes is always computed from kvc (or kvt ) and vertical deformation, and thus is not affected by minFv . tol = relative tolerance for checking the convergence of the element. Recommended value = 1.e-10 to 1.e-3. TPB_Nhan_Fig1.jpg The horizontal normalized behavior of the element is an extension of the unidirectional behavior proposed by Fenz and Constantinou [3] and Morgan and Mahin [4]. The envelope normalized backbone curve for unidirectional behavior is in Figure 2 where effective radii are calculated from L_i=R_i- h_i, based on the bearing geometry in Figure 1. Displacements u_i^* and normalized forces f_i^* are evaluated according to [2], [3] or [4]. The Excel file for generating a backbone curve of a TPB can be downloaded here: Media:TPB_Nhan_BackboneCurve.xls TPB_Nhan_Fig2.jpg Overturning moment and torsion due to the eccentricity of internal forces are equally distributed to the 2 nodes of the element. In the vertical direction, the element is multi-linear elastic with different stiffnesses k_vc and k_vt in compression and tension, respectively. Even though a TPB has no resistance in tension, a small nonzero stiffness should be provided in tension for stability of the numerical procedure. The reasonable vertical stiffness in tension depends on the stiffness of the superstructure, but a value between 10 N/m to 100 N/m should work well in most cases. Very small ratio of k_vt/k_vc may cause the convergence difficulty when the superstructure is uplifted. SPECIAL CASES: Vertical-horizontal uncoupled bearing: Restrain vertical displacement of the 2 nodes and set minFv = static vertical reaction of the bearing. Neglecting rotational stiffness: Rotational stiffness of the bearing can be neglected by defining a very small value for the rotXMatTag , rotYMatTag and rotZMatTag . However, using a too small number may cause a numerical convergence problem. NOTES: The current element requires 6 degree of freedoms at each node and defines the local coordinate system to be the same as the global coordinate system, where the vertical axis must be 3. Since the element accounts for the vertical-horizontal coupling behavior of TPBs, the time step size in analysis of vertically stiff structures should be small enough so that the high frequency components in responses can be captured. Rayleigh damping is automatically included when using Rayleigh command. The height of the bearing (for computing overturning moment from horizontal force) is computed from the vertical distance between the two end nodes. Examples frictionModel VelNormalFrcDep 1 [expr 0.012 /pow( $W , 0.8-1.0 ) ] 0.8 \\ [expr 0.018 /pow( $W , 0.7-1.0 ) ] 0.7 25.0 0.0 0.0 3.0 frictionModel VelNormalFrcDep 2 [expr 0.052 /pow( $W , 0.8-1.0 ) ] 0.8 \\ [expr 0.075 /pow( $W , 0.7-1.0 ) ] 0.7 25.0 0.0 0.0 3.0 frictionModel VelNormalFrcDep 3 [expr 0.12 /pow( $W , 0.8-1.0 ) ] 0.8 \\ [expr 0.16 /pow( $W , 0.7-1.0 ) ] 0.7 25.0 0.0 0.0 3.0 uniaxialMaterial Elastic 1 1 .e6 uniaxialMaterial Elastic 2 100. ; uniaxialMaterial Elastic 3 100. ; uniaxialMaterial Elastic 4 10. ; element TripleFrictionPendulum 1 1 2 1 2 3 1 4 2 3 0.36 1.25 1.25 \\ 0.1 0.2 0.2 1000.0 0.0005 1.0 0.1 1 .E -5 ; Download these 3 ground motion files and change the extension \u201c.tcl\u201d to \u201c.ATH\u201d for EXAMPLES 2 to 7: Media:TCU065-E.tcl , Media:TCU065-N.tcl , Media:TCU065-V.tcl Example 1 Unidirectional static pushover of a TPB element with constant friction coefficients. Tcl code: Media:CheckingTripleFrictionPendulum_StaticCyclicPushover.tcl Results: TPB_Nhan_Ex1a.png Example 2 Unidirectional dynamic seismic analysis of a single mass supported by a TPB element with constant friction coefficients. Tcl code: Media:CheckingTripleFrictionPendulum_1DDynamics_ConstFriction.tcl Results: TPB_Nhan_Ex2_1Disp.png TPB_Nhan_Ex2_2DispTrace.png TPB_Nhan_Ex2_3Reaction.png TPB_Nhan_Ex2_4Loop.png EXAMPLE 3 : Unidirectional dynamic seismic analysis of a single mass supported by a TPB element with variable friction coefficients. Tcl code: Media:CheckingTripleFrictionPendulum_1DDynamics_VariableFriction.tcl Results: TPB_Nhan_Ex3_1Disp.png TPB_Nhan_Ex3_2DispTrace.png TPB_Nhan_Ex3_3Reaction.png TPB_Nhan_Ex3_4Loop.png EXAMPLE 4 : Two-dimensional dynamic seismic analysis of a single mass supported by a TPB element with constant friction coefficients. Tcl code: Media:CheckingTripleFrictionPendulum_2DDynamic_ConstFriction.tcl Results: TPB_Nhan_Ex4_1Disp.png TPB_Nhan_Ex4_2DispTrace.png TPB_Nhan_Ex4_3aReaction.png TPB_Nhan_Ex4_4Loop.png EXAMPLE 5 : Two-dimensional dynamic seismic analysis of a single mass supported by a TPB element with variable friction coefficients. Tcl code: Media:CheckingTripleFrictionPendulum_2DDynamic_VariableFriction.tcl Results: TPB_Nhan_Ex5_1Disp.png TPB_Nhan_Ex5_2Trace.png TPB_Nhan_Ex5_3Reaction.png TPB_Nhan_Ex5_4aLoop.png EXAMPLE 6 : Three-dimensional dynamic seismic analysis of a single mass supported by a TPB element with constant friction coefficients. Tcl code: Media:CheckingTripleFrictionPendulum_3DDynamic_ConstFriction.tcl Results: TPB_Nhan_Ex6_1Disp.png TPB_Nhan_Ex6_2DispTrace.png TPB_Nhan_Ex6_3Reaction.png TPB_Nhan_Ex6_4Loop.png EXAMPLE 7 : Three-dimensional dynamic seismic analysis of a single mass supported by a TPB element with variable friction coefficients. Tcl code: Media:CheckingTripleFrictionPendulum_3DDynamic_VariableFriction.tcl Results: TPB_Nhan_Ex7_1Disp.png TPB_Nhan_Ex7_2DispTrace.png TPB_Nhan_Ex7_3Reaction.png TPB_Nhan_Ex7_4Loop.png References [1] Dao ND, Ryan KL, Sato E, Sasaki T. Predicting the displacement of triple pendulum\u2122 bearings in a full-scale shaking experiment using a three-dimensional element. Earthquake Engineering and Structural Dynamics, 2013. [2] Dao ND. Seismic Response of a Full-scale 5-story Steel Frame Building Isolated by Triple Pendulum Bearings under 3D Excitations. Dissertation, University of Nevada - Reno, 2012. [3] Fenz DM, Constantinou MC. Spherical sliding isolation bearings with adaptive behavior: Theory. Earthquake Engineering and Structural Dynamics 2008; 37(2):163-183. [4] Morgan TA, Mahin SA. The use of innovative base isolation systems to achieve complex seismic performance objectives. PEER-2011/06 2011. Code developed by: Nhan D. Dao, University of Nevada - Reno. E-mail: nhan.unr@gmail.com .","title":"TripleFrictionPendulum"},{"location":"library/modeling/element/brick/47-Bbar%20Brick%20Element/","text":"Bbar Brick","title":"Bbar Brick"},{"location":"library/modeling/element/brick/613-SSPbrick%20Element/","text":"SSPbrick This command is used to construct a SSPbrick element. element SSPbrick $eleTag $iNode $jNode $kNode $lNode $mNode $nNode $pNode $qNode $matTag < $b1 $b2 $b3 > eleTag unique integer tag identifying element object $iNode $jNode $kNode $lNode $mNode $nNode $pNode $qNode the eight nodes defining the element, input in counterclockwise order (same node numbering scheme as for the stdBrick Element ) (-ndm 3 -ndf 3) matTag unique integer tag associated with previously-defined nDMaterial object b1 b2 b3 constant body forces in global x-, y-, and z-directions, respectively (optional, default = 0.0) The SSPbrick element is an eight-node hexahedral element using physically stabilized single-point integration (SSP \u2013> Stabilized Single Point). The stabilization incorporates an enhanced assumed strain field, resulting in an element which is free from volumetric and shear locking. The elimination of shear locking results in greater coarse mesh accuracy in bending dominated problems, and the elimination of volumetric locking improves accuracy in nearly-incompressible problems. Analysis times are generally faster than corresponding full integration elements. NOTES: Valid queries to the SSPbrick element when creating an ElementalRecorder object correspond to those for the nDMaterial object assigned to the element (e.g., \u2018stress\u2019, \u2018strain\u2019). Material response is recorded at the single integration point located in the center of the element. The SSPbrick element was designed with intentions of duplicating the functionality of the stdBrick Element . If an example is found where the SSPbrick element cannot do something that works for the stdBrick Element , e.g., material updating, please contact the developers listed below so the bug can be fixed. EXAMPLES: SSPbrick element definition with element tag 1, nodes 1, 2, 3, 4, 5, 6, 7, and 8, material tag 1, \\(x\\) - and \\(y\\) -directed body forces of zero, and z-directed body force of \\(-10.0\\) element SSPbrick 1 1 2 3 4 5 6 7 8 1 0.0 0.0 -10 .0 Elemental recorders for stress and strain when using the SSPbrick element (note the difference from the stdBrick Element ) recorder Element -eleRange 1 $numElem -time -file stress.out stress recorder Element -eleRange 1 $numElem -time -file strain.out strain Code developed by: Chris McGann, Pedro Arduino, & Peter Mackenzie-Helnwein, at the University of Washington","title":"SSPbrick"},{"location":"library/modeling/element/brick/662-Standard%20Brick%20Element/","text":"Standard Brick This element is used to construct an eight-node brick element object, which uses a trilinear isoparametric formulation. element stdBrick $eleTag $node1 $node2 $node3 $node4 $node5 $node6 $node7 $node8 $matTag < $b1 $b2 $b3 > eleTag unique element object tag node1 node2 node3 node4 node5 node6 node7 node8 eight nodes defining element boundaries, input order is shown in the figure. matTag tag of nDMaterial b1 b2 b3 body forces in global \\(x\\) , \\(y\\) , \\(z\\) directions Brick.gif NOTE: The valid queries to a Brick element when creating an ElementRecorder are forces , stresses , ( strains version > 2.2.0) and material $matNum matArg1 matArg2 ... Where $matNum refers to the material object at the integration point corresponding to the node numbers in the isoparametric domain. This element can only be defined in -ndm 3 -ndf 3 Examples References Code Developed by: Edward Love, Sandia National Laboratories","title":"Standard Brick"},{"location":"library/modeling/element/brick/Brick/","text":"Brick?N The Eight Node Brick Element element Brick8N eletag? node1? node2? node3? node4? node5? node6? node7? node8? matTag? bf1? bf2? bf3? massDens? The Brick8N element is the standard eight node three dimensional element implemented based on tensor operation. The arguments to construct the element are its tag, eletag, eight nodes ordered according to Figure 1 , the material tag, matTag, the body forces, bf1, bf2, bf3, and the mass density, massDens. By default, \\(3\\times 3 \\times 3\\) integration points are used. Users will be able to specify number of integration points very soon. The valid queries to a Brick8N element when creating an ElementRecorder are \u201cforce\u201d, \u201cstiffness\u201d, \u201cstress\u201d, \u201cpq\u201d, \u201cpqall\u201d, \u201cgausspoint\u201d, \u201cplastic\u201d or \u201cplasticGPC\u201d. For \u201cstress\u201d output, the six stress components from each Gauss point are output by the order: \\(\\sigma_x\\) , \\(\\sigma_y\\) , \\(\\sigma_z\\) , \\(\\tau_{xy}\\) , \\(\\tau_{xz}\\) , \\(\\tau_{yz}\\) . The stresses can also be output in \\(p\\) and \\(q\\) format by using query \u201cpq\u201d, where \\(p\\) is the hydrostatic pressure, while \\(q\\) is the equivalent deviatoric stress. In this case, the stress state at one gauss point is printed in the \\(pq\\) format. If the stress states at all gauss points need to be printed, use the query \u201cpqall\u201d. For \u201cgausspoint\u201d, the coordinates of all Gauss points are printed out. For \u201cplastic\u201d, the equivalent deviatoric plastic strain from each Gauss point is output in the same order as the coordinates are printed. But the coordinates have to be output separated. If one needs to output the gauss point coordinates together with the plastic strain, the query \u201cplasticGPC\u201d needs to be used. Node numbering for 8 node three dimensional element. The Twenty Node Brick Element element Brick20N eletag? node1? node2? node3? node4? node5? node6? node7? node8? node9? node10? node11? node12? node13? node14? node15? node16? node17? node18? node19? node20? matTag? bf1? bf2? bf3? massDens? The Brick8N element is the standard eight node three dimensional element implemented based on tensor operation. The arguments to construct the element are its tag, eletag, twenty nodes ordered according to Figure 2 , the material tag, matTag, the body forces, bf1, bf2, bf3, and the mass density, massDens. By default, \\(3\\times 3 \\times 3\\) integration points are used. Users will be able to specify number of integration points very soon. The valid queries to a Brick20N element when creating an ElementRecorder are \u201cforce\u201d, \u201cstiffness\u201d, \u201cstress\u201d, \u201cpq\u201d, \u201cgausspoint\u201d, or \u201cplastic\u201d. For \u201cstress\u201d output, the six stress components from each Gauss point are output by the order: \\(\\sigma_x\\) , \\(\\sigma_y\\) , \\(\\sigma_z\\) , \\(\\tau_{xy}\\) , \\(\\tau_{xz}\\) , \\(\\tau_{yz}\\) . The stresses can also be output in \\(p\\) and \\(q\\) format by using query \u201cpq\u201d, where \\(p\\) is the hydrostatic pressure, while \\(q\\) is the equivalent deviatoric stress. In this case, the stress state at one gauss point is printed in the \\(pq\\) format. For \u201cgausspoint\u201d, the coordinates of all Gauss points are printed out. For \u201cplastic\u201d, the equivalent deviatoric plastic strain from each Gauss point is output in the same order as the coordinates are printed. Node numbering for 20 node three dimensional element.","title":"Brick?N"},{"location":"library/modeling/element/contact/53-BeamContact2D/","text":"BeamContact2D This command is used to construct a BeamContact2D element object. element BeamContact2D $eleTag $iNode $jNode $cNode $lNode $matTag $width $gTol $fTol < $cFlag > eleTag unique integer tag identifying element object iNode jNode retained nodes (-ndm 2 -ndf 3) cNode constrained node (-ndm 2 -ndf 2) lNode Lagrange multiplier node (-ndm 2 -ndf 2) matTag unique integer tag associated with previously-defined nDMaterial object width the width of the wall represented by the beam element in plane strain gTol gap tolerance fTol force tolerance cFlag optional initial contact flag cFlag = 0 >> contact between bodies is initially assumed (DEFAULT) cFlag = 1 >> no contact between bodies is initially assumed The BeamContact2D element is a two-dimensional beam-to-node contact element which defines a frictional contact interface between a beam element and a separate body. The retained nodes (3 DOF) are the endpoints of the beam element, and the constrained node (2 DOF) is a node from a second body. The Lagrange multiplier node (2 DOF) is required to enforce the contact condition. Each contact element should have a unique Lagrange multiplier node. The Lagrange multiplier node should not be fixed, otherwise the contact condition will not work. Under plane strain conditions in 2D, a beam element represents a unit thickness of a wall. The width is the dimension of this wall in the 2D plane. This width should be built-in to the model to ensure proper enforcement of the contact condition. The Excavation Supported by Cantilevered Sheet Pile Wall practical example provides some further examples and discussion on the usage of this element. NOTE: The BeamContact2D element has been written to work exclusively with the ContactMaterial2D nDMaterial object. The valid recorder queries for this element are: force - returns the contact force acting on the constrained node in vector form. frictionforce - returns the frictional force acting on the constrained node in vector form. forcescalar - returns the scalar magnitudes of the normal and tangential contact forces. masterforce - returns the reactions (forces and moments) acting on the retained nodes. The BeamContact2D elements are set to consider frictional behavior as a default, but the frictional state of the BeamContact2D element can be changed from the input file using the setParameter command. When updating, value of 0 corresponds to the frictionless condition, and a value of 1 signifies the inclusion of friction. An example command for this update procedure is provided below The BeamContact2D element works well in static and pseudo-static analysis situations. In transient analysis, the presence of the contact constraints can effect the stability of commonly-used time integration methods in the HHT or Newmark family (e.g., Laursen, 2002). For this reason, use of alternative time-integration methods which numerically damp spurious high frequency behavior may be required. The TRBDF2 integrator is an effective method for this purpose. The Newmark integrator can also be effective with proper selection of the gamma and beta coefficients. The trapezoidal rule, i.e., Newmark with gamma = 0.5 and beta = 0.25, is particularly prone to instability related to the contact constraints and is not recommended. EXAMPLES: # BeamContact2D element with tag 1, connectivity with nodes 1, 2, 3, # and 4, material with tag 1, width 0.5, gap and force tolerances of # 1.0e-10, and a contact flag set to assume initial contact. element BeamContact2D 1 1 2 3 4 1 0.5 1.0e-10 1.0e-10 0 # Update all of the BeamContact2D elements with tags between 10 and 20 # to consider a frictionless interface setParameter -value 0 -eleRange 10 20 friction References Laursen, T. A. (2002). Computational Contact and Impact Mechanics. Springer-Verlag, Berlin. Code developed by: Chris McGann, Pedro Arduino, & Peter Mackenzie-Helnwein, at the University of Washington","title":"BeamContact2D"},{"location":"library/modeling/element/contact/54-BeamContact3D/","text":"BeamContact3D This command is used to construct a BeamContact3D element object. element BeamContact3D $eleTag $iNode $jNode $cNode $lNode $radius $crdTransf $matTag $gTol $fTol < $cFlag > eleTag unique integer tag identifying element object iNode jNode retained nodes (-ndm 3 -ndf 6) cNode constrained node (-ndm 3 -ndf 3) lNode Lagrange multiplier node (-ndm 3 -ndf 3) radius constant radius of circular beam associated with beam element crdTransf unique integer tag associated with previously-defined geometricTransf object matTag unique integer tag associated with previously-defined nDMaterial object gTol gap tolerance fTol force tolerance cFlag optional initial contact flag cFlag = 0 : contact between bodies is initially assumed (DEFAULT) cFlag = 1 : no contact between bodies is initially assumed The BeamContact3D element is a three-dimensional beam-to-node contact element which defines a frictional contact interface between a beam element and a separate body. The retained nodes (6 DOF) are the endpoints of the beam element, and the constrained node (3 DOF) is a node from a second body. The Lagrange multiplier node (3 DOF) is required to enforce the contact condition. Each contact element should have a unique Lagrange multiplier node. The Lagrange multiplier node should not be fixed, otherwise the contact condition will not work. NOTE: The BeamContact3D element has been written to work exclusively with the ContactMaterial3D nDMaterial object. The valid recorder queries for this element are: force - returns the contact force acting on the constrained node in vector form. frictionforce - returns the frictional force acting on the constrained node in vector form. forcescalar - returns the scalar magnitudes of the single normal and two tangential contact forces. masterforce - returns the reactions (forces only) acting on the retained nodes. mastermoment - returns the reactions (moments only) acting on the retained nodes. masterreaction - returns the full reactions (forces and moments) acting on the retained nodes. The BeamContact3D elements are set to consider frictional behavior as a default, but the frictional state of the BeamContact3D element can be changed from the input file using the setParameter command. When updating, value of 0 corresponds to the frictionless condition, and a value of 1 signifies the inclusion of friction. An example command for this update procedure is provided below The BeamContact3D element works well in static and pseudo-static analysis situations. In transient analysis, the presence of the contact constraints can effect the stability of commonly-used time integration methods in the HHT or Newmark family (e.g., Laursen, 2002). For this reason, use of alternative time-integration methods which numerically damp spurious high frequency behavior may be required. The TRBDF2 integrator is an effective method for this purpose. The Newmark integrator can also be effective with proper selection of the gamma and beta coefficients. The trapezoidal rule, i.e., Newmark with gamma = 0.5 and beta = 0.25, is particularly prone to instability related to the contact constraints and is not recommended. EXAMPLES: BeamContact3D element with tag 1, connectivity with nodes 1, 2, 3, and 4, beam radius of 0.25, geomTransf object with tag 1, material with tag 1, gap and force tolerances of 1.0e-10, and a contact flag set to assume initial contact. element BeamContact3D 1 1 2 3 4 0.25 1 1 1.0e-10 1.0e-10 0 Update all of the BeamContact3D elements with tags between 10 and 20 to consider a frictionless interface setParameter -value 0 -eleRange 10 20 friction References Laursen, T. A. (2002). Computational Contact and Impact Mechanics. Springer-Verlag, Berlin. Code Developed by: Kathryn Petek, Pedro Arduino, & Peter Mackenzie-Helnwein, at the University of Washington","title":"BeamContact3D"},{"location":"library/modeling/element/contact/55-BeamEndContact3D/","text":"BeamEndContact3D This command is used to construct a BeamEndContact3D element object. element BeamEndContact3D $eleTag $iNode $jNode $cNode $lNode $radius $gTol $fTol &lt; $cFlag $&gt; eleTag unique integer tag identifying element object iNode retained node from the beam (-ndm 3 -ndf 6) jNode the remaining node on the beam element with iNode (-ndm 3 -ndf 6) cNode constrained node (-ndm 3 -ndf 3) lNode Lagrange multiplier node (-ndm 3 -ndf 3) radius radius of circular beam associated with beam element gTol gap tolerance fTol force tolerance cFlag optional initial contact flag cFlag = 0 : contact between bodies is initially assumed (DEFAULT) cFlag = 1 : no contact between bodies is initially assumed The BeamEndContact3D element is a node-to-surface contact element which defines a normal contact interface between the end of a beam element and a separate body. The first retained node ( iNode ) is the beam node which is at the end of the beam (i.e. only connected to a single beam element), the second node ( jNode ) is the remaining node on the beam element in question. The constrained node ( cNode ) is a node from a second body. The Lagrange multiplier node ( lNode ) is required to enforce the contact condition. This node should not be shared with any other element in the domain, and should be created with the same number of DOF as the constrained node. The BeamEndContact3D element enforces a contact condition between a fictitious circular plane associated with a beam element and a node from a second body. The normal direction of the contact plane coincides with the endpoint tangent of the beam element at the retained beam node ( iNode ). The extents of this circular plane are defined by the radius input parameter. The retained beam node can only come into contact with a constrained node which is within the extents of the contact plane. There is a lag step associated with changing between the \u2018in contact\u2019 and \u2018not in contact\u2019 conditions. This element was developed for use in establishing a contact condition for the tip of a pile modeled as using beam elements and the underlying soil elements in three-dimensional analysis. NOTE: The BeamEndContact3D element does not use a material object. The valid recorder queries for this element are: force - returns the contact force acting on the constrained node in vector form. masterforce - returns the reactions (forces and moments) acting on the retained node. The BeamEndContact3D element works well in static and pseudo-static analysis situations. In transient analysis, the presence of the contact constraints can effect the stability of commonly-used time integration methods in the HHT or Newmark family (e.g., Laursen, 2002). For this reason, use of alternative time-integration methods which numerically damp spurious high frequency behavior may be required. The TRBDF2 integrator is an effective method for this purpose. The Newmark integrator can also be effective with proper selection of the gamma and beta coefficients. The trapezoidal rule, i.e., Newmark with gamma = 0.5 and beta = 0.25, is particularly prone to instability related to the contact constraints and is not recommended. EXAMPLE: BeamEndContact3D element with tag 1, and connectivity with nodes 1, 2, 3, and 4, beam radius of 0.25, gap and force tolerances of 1.0e-10, and a contact flag set to initially assume contact. element BeamEndContact3D 1 1 2 3 4 0.25 1.0e-10 1.0e-10 0 References Laursen, T. A. (2002). Computational Contact and Impact Mechanics. Springer-Verlag, Berlin. Code Developed by: Chris McGann, Pedro Arduino, & Peter Mackenzie-Helnwein, at the University of Washington","title":"BeamEndContact3D"},{"location":"library/modeling/element/contact/643-SimpleContact2D/","text":"SimpleContact2D This command is used to construct a SimpleContact2D element object. element SimpleContact2D $eleTag $iNode $jNode $cNode $lNode $matTag $gTol $fTol eleTag unique integer tag identifying element object iNode jNode retained nodes (-ndm 2 -ndf 2) cNode constrained node (-ndm 2 -ndf 2) lNode Lagrange multiplier node (-ndm 2 -ndf 2) matTag unique integer tag associated with previously-defined nDMaterial object gTol gap tolerance fTol force tolerance The SimpleContact2D element is a two-dimensional node-to-segment contact element which defines a frictional contact interface between two separate bodies. The retained nodes are the nodes which define the endpoints of a line segment on the first body, and the constrained node is a node from the second body. The Lagrange multiplier node is required to enforce the contact condition. This node should not be shared with any other element in the domain. Information on the theory behind this element can be found in, e.g. Wriggers (2002). NOTE: The SimpleContact2D element has been written to work exclusively with the ContactMaterial2D nDMaterial object. The valid recorder queries for this element are: force - returns the contact force acting on the constrained node in vector form. frictionforce - returns the frictional force acting on the constrained node in vector form. forcescalar - returns the scalar magnitudes of the normal and tangential contact forces. The SimpleContact2D elements are set to consider frictional behavior as a default, but the frictional state of the SimpleContact2D element can be changed from the input file using the setParameter command. When updating, value of 0 corresponds to the frictionless condition, and a value of 1 signifies the inclusion of friction. An example command for this update procedure is provided below The SimpleContact2D element works well in static and pseudo-static analysis situations. In transient analysis, the presence of the contact constraints can effect the stability of commonly-used time integration methods in the HHT or Newmark family (e.g., Laursen, 2002). For this reason, use of alternative time-integration methods which numerically damp spurious high frequency behavior may be required. The TRBDF2 integrator is an effective method for this purpose. The Newmark integrator can also be effective with proper selection of the gamma and beta coefficients. The trapezoidal rule, i.e., Newmark with gamma = 0.5 and beta = 0.25, is particularly prone to instability related to the contact constraints and is not recommended. EXAMPLES: SimpleContact2D element with tag 1, connectivity with nodes 1, 2, 3, and 4, material with tag 1, and gap and force tolerances of 1.0e-10. element SimpleContact2D 1 1 2 3 4 1 1.0e-10 1.0e-10 Update all of the SimpleContact2D elements with tags between 10 and 20 to consider a frictionless interface setParameter -value 0 -eleRange 10 20 friction References Wriggers, P. (2002). Computational Contact Mechanics. John Wiley & Sons, Ltd, West Sussex, England. Laursen, T. A. (2002). Computational Contact and Impact Mechanics. Springer-Verlag, Berlin. Code Developed by: Kathryn Petek, Pedro Arduino, & Peter Mackenzie-Helnwein, at the University of Washington","title":"SimpleContact2D"},{"location":"library/modeling/element/contact/644-SimpleContact3D/","text":"SimpleContact3D This command is used to construct a SimpleContact3D element object. element SimpleContact3D $eleTag $iNode $jNode $kNode $lNode $cNode $lNode $matTag $gTol $fTol eleTag unique integer tag identifying element object iNode jNode kNode lNode retained nodes (-ndm 3 -ndf 3) cNode constrained node (-ndm 3 -ndf 3) lNode Lagrange multiplier node (-ndm 3 -ndf 3) matTag unique integer tag associated with previously-defined nDMaterial object gTol gap tolerance fTol force tolerance The SimpleContact3D element is a three-dimensional node-to-surface contact element which defines a frictional contact interface between two separate bodies. The retained nodes are the nodes which define a surface of a hexahedral element on the first body, and the constrained node is a node from the second body. The Lagrange multiplier node is required to enforce the contact condition. This node should not be shared with any other element in the domain. Information on the theory behind this element can be found in, e.g. Wriggers (2002). NOTE: The SimpleContact3D element has been written to work exclusively with the ContactMaterial3D nDMaterial object. The valid recorder queries for this element are: force - returns the contact force acting on the constrained node in vector form. frictionforce - returns the frictional force acting on the constrained node in vector form. forcescalar - returns the scalar magnitudes of the single normal and two tangential contact forces. The SimpleContact3D elements are set to consider frictional behavior as a default, but the frictional state of the SimpleContact3D element can be changed from the input file using the setParameter command. When updating, value of 0 corresponds to the frictionless condition, and a value of 1 signifies the inclusion of friction. An example command for this update procedure is provided below The SimpleContact3D element works well in static and pseudo-static analysis situations. In transient analysis, the presence of the contact constraints can effect the stability of commonly-used time integration methods in the HHT or Newmark family (e.g., Laursen, 2002). For this reason, use of alternative time-integration methods which numerically damp spurious high frequency behavior may be required. The TRBDF2 integrator is an effective method for this purpose. The Newmark integrator can also be effective with proper selection of the gamma and beta coefficients. The trapezoidal rule, i.e., Newmark with gamma = 0.5 and beta = 0.25, is particularly prone to instability related to the contact constraints and is not recommended. EXAMPLE: SimpleContact3D element with tag 1, connectivity with nodes 1, 2, 3, 4, 5, 6, 7, and 8, material with tag 1, and gap and force tolerances of 1.0e-10. element SimpleContact3D 1 1 2 3 4 5 6 7 8 1 1.0e-10 1.0e-10 Update all of the SimpleContact3D elements with tags between 10 and 20 to consider a frictionless interface setParameter -value 0 -eleRange 10 20 friction References Wriggers, P. (2002). Computational Contact Mechanics. John Wiley & Sons, Ltd, West Sussex, England. Laursen, T. A. (2002). Computational Contact and Impact Mechanics. Springer-Verlag, Berlin. Code Developed by: Kathryn Petek, Pedro Arduino, & Peter Mackenzie-Helnwein, at the University of Washington","title":"SimpleContact3D"},{"location":"library/modeling/element/joint/183-ElasticTubularJoint%20Element/","text":"ElasticTubularJoint This command is used to construct an ElasticTubularJoint element object, which models joint flexibility of tubular joints in two dimensional analysis of any structure having tubular joints. element ElasticTubularJoint $Tag $iNode $jNode $Brace_Diameter $Brace_Angle $E $Chord_Diameter $Chord_Thickness $Chord_Angle Tag unique element object tag iNode first end node- it is always located on the chord axis jNode second end node - it is always located on the chord wall Brace_Diameter outer diameter of brace Brace_Angle angle between brace and chord axis 0 < Brace_Angle < 90 E Young\u2019s Modulus $ Chord_Diameter outer diameter of chord Chord_Thickness thickness of chord Chord_Angle angle between chord axis and global x-axis 0 < Chord_Angle < 180 Examples element ElasticTubularJoint 1 1 2 0.25 45 210E+09 0.5 0.016 45 # Tubular joint having tag 1 which interconnects nodes 1 and 2; brace diameter is 25cm; intersection angle is 45 degrees; Young\u2019s modulus of the material used is 210e9; outer diameter and thickness of the chord are 50 cm and 1.6 cm respectively; angle between chord axis and global horizontal axis is 45 degrees. Code Developed by: M. Kia and P. Alanjari, Sharif University of Technology and K. N. Toosi University of Technology, Tehran, Iran.","title":"ElasticTubularJoint"},{"location":"library/modeling/element/joint/350-Joint2D%20Element/","text":"Joint2D This command is used to construct a two-dimensional beam-column-joint element object. The two dimensional beam-column joint is idealized as a parallelogram shaped shear panel with adjacent elements connected to its mid-points. The midpoints of the parallelogram are referred to as external nodes. These nodes are the only analysis components that connect the joint element to the surrounding structure. element Joint2D $eleTag $Nd1 $Nd2 $Nd3 $Nd4 $NdC &lt; $Mat1 $Mat2 $Mat3 $Mat4 &gt; $MatC $LrgDspTag eleTag unique element object tag Nd1 Nd2 Nd3 Nd4 integer tags indicating four external nodes where the joint element is connected to the adjoining beam-column element NdC integer tags indicating the central node of beam-column joint (the tag is used to generate the internal node, thus, the node should not exist in the domain or be used by any other node) Mat1 uniaxial material tag for interface rotational spring at node 1. Use a zero tag to indicate the case that a beam-column element is rigidly framed to the joint. (optional) Mat2 uniaxial material tag for interface rotational spring at node 2. Use a zero tag to indicate the case that a beam-column element is rigidly framed to the joint. (optional) Mat3 uniaxial material tag for interface rotational spring at node 3. Use a zero tag to indicate the case that a beam-column element is rigidly framed to the joint. (optional) Mat4 uniaxial material tag for interface rotational spring at node 4. Use a zero tag to indicate the case that a beam-column element is rigidly framed to the joint. (optional) MatC uniaxial material tag for rotational spring of the central node that describes shear panel behavior LrgDspTag an integer indicating the flag for considering large deformations: 0 - for small deformations and constant geometry 1 - for large deformations and time varying geometry 2 - for large deformations ,time varying geometry and length correction NOTES: The nodes must be located such that the main chords bisect. The node tags shall be entered in a clockwise or counter-clockwise order. In the case that the beam-column element is rigidly framed to the joint, the tag for materials $Mat1 to $Mat4 shall be zero. The shear panel uniaxial material (with the tag $MatC) shall be calibrated for shear-equivalent moment versus shear distortion. In the calibration formulations the shear-equivalent moment is calculated by multiplying the joint average shear stress to the joint panel volume. The element connects the external nodes to the central node via multi-point constraints, and Joint2D must be used along with either the Penalty or the Transformation constraint handler. If the LrgDspTag flag is set to zero the element uses a constant constraint matrix for small-deformation formulation. In the large-deformation formulation the constraint matrix is time varying and it is updated at every converged time step. Valid inquires to the joint element include: centralNode - The displacement components of the central node deformation - Interface rotations and the shear panel deformation force - Nodal moments and the joint panel shear-equivalent moment size - Length of the main chord (element size) stiffness - Joint element stiffness matrix defoANDforce - Joint deformation components followed by the nodal moments Examples element Joint2D 12 1 2 3 4 112 10 0; # constructs a Joint2D element with tag 12 that is connected to nodes 1, 2, 3, and 4. The element will generate a center node with tag 112, and it uses the uniaxial material object with tag 10 as the shear panel rotational spring. This joint element does not have rotational springs at external nodes and does not include large deformations. element Joint2D 13 5 6 7 8 113 11 0 11 0 10 2; # constructs a Joint2D element with tag 13 that is connected to nodes 5, 6, 7, and 8. The element will generate a center node with tag 113, and it uses the uniaxial material object with tag 11 for nodes 5 and 7, and rigid connections for nodes 6 and 8 to prevent member end rotations. The shear panel behavior is modeled with uniaxial material with tag 10. The generated multipoint constraint matrices will be time varying to cover large deformations and the nodal positions will be corrected to maintain the initial joint size. References Arash Altoontash, 2004, \u201cSimulation and damage models for performance assessment of reinforced concrete beam-column joints\u201d, PhD Dissertation, Stanford University, California, USA. 1 Code Developed by: Arash Altoontash","title":"Joint2D"},{"location":"library/modeling/element/joint/52-BeamColumnJoint%20Element/","text":"BeamColumnJoint This command is used to construct a two-dimensional beam-column-joint element object. The element may be used with both two-dimensional and three-dimensional structures; however, load is transferred only in the plane of the element. element beamColumnJoint $eleTag $Nd1 $Nd2 $Nd3 $Nd4 $Mat1 $Mat2 $Mat3 $Mat4 $Mat5 $Mat6 $Mat7 $Mat8 $Mat9 $Mat10 $Mat11 $Mat12 $Mat13 &lt; $eleHeightFac $eleWidthFac &gt; Tag unique element object tag Nd1 Nd2 Nd3 Nd4 four nodes Mat1 uniaxial material tag for left bar-slip spring at node 1 Mat2 uniaxial material tag for right bar-slip spring at node 1 Mat3 uniaxial material tag for interface-shear spring at node 1 Mat4 uniaxial material tag for lower bar-slip spring at node 2 Mat5 uniaxial material tag for upper bar-slip spring at node 2 Mat6 uniaxial material tag for interface-shear spring at node 2 Mat7 uniaxial material tag for left bar-slip spring at node 3 Mat8 uniaxial material tag for right bar-slip spring at node 3 Mat9 uniaxial material tag for interface-shear spring at node 3 Mat10 uniaxial material tag for lower bar-slip spring at node 4 Mat11 uniaxial material tag for upper bar-slip spring at node 4 Mat12 uniaxial material tag for interface-shear spring at node 4 Mat13 uniaxial material tag for shear-panel eleHeightFac floating point value (as a ratio to the total height of the element) to be considered for determination of the distance in between the tension-compression couples (optional, default: 1.0) eleWidthFac floating point value (as a ratio to the total width of the element) to be considered for determination of the distance in between the tension-compression couples (optional, default: 1.0) BeamColumnJoint.png Examples BeamColumnJointExample - the original file (has some errors) BeamColumnJointExample_Corrected (corrected by Vesna Terzic) References Lowes, Laura N.; Mitra, Nilanjan; Altoontash, Arash A beam-column joint model for simulating the earthquake response of reinforced concrete frames PEER-2003/10 Pacific Earthquake Engineering Research Center, University of California, Berkeley 2003 59 pages (400/P33/2003-10) Code Developed by: Nilanjan Mitra, Cal Poly","title":"BeamColumnJoint"},{"location":"library/modeling/element/misc/673-SurfaceLoad%20Element/","text":"SurfaceLoad This command is used to construct a SurfaceLoad element object. element SurfaceLoad $eleTag $iNode $jNode $kNode $lNode $p eleTag unique integer tag identifying element object iNode jNode kNode lNode the four nodes defining the element, input in counterclockwise order (-ndm 3 -ndf 3) p applied pressure loading normal to the surface, outward is positive, inward is negative The SurfaceLoad element is a four-node element which can be used to apply surface pressure loading to 3D brick elements. The SurfaceLoad element applies energetically-conjugate forces corresponding to the input scalar pressure to the nodes associated with the element. As these nodes are shared with a 3D brick element, the appropriate nodal loads are therefore applied to the brick. NOTES: There are no valid ElementalRecorder queries for the SurfaceLoad element. Its sole purpose is to apply nodal forces to the adjacent brick element. The pressure loading from the SurfaceLoad element can be applied in a load pattern. See the analysis example below. Examples SurfaceLoad element definition with element tag \\(1\\) , nodes \\(1\\) , \\(2\\) , \\(3\\) , and \\(4\\) , and pressure of \\(-10.0\\) : element SurfaceLoad 1 1 2 3 4 -10 .0 The example input file below involves applying a compressive \\(0.1\\) kPa loading to a four-element mesh of brick elements. The applied loading is increased linearly over the first \\(0.1\\) seconds of pseudo-time, then held constant. wipe model BasicBuilder -ndm 3 -ndf 3 # nodes node 1 0.0 0.0 6.0 node 2 3.0 0.0 6.0 node 3 6.0 0.0 6.0 node 4 0.0 0.0 3.0 node 5 3.0 0.0 3.0 node 6 6.0 0.0 3.0 node 7 0.0 0.0 0.0 node 8 3.0 0.0 0.0 node 9 6.0 0.0 0.0 node 10 0.0 3.0 6.0 node 11 3.0 3.0 6.0 node 12 6.0 3.0 6.0 node 13 0.0 3.0 3.0 node 14 3.0 3.0 3.0 node 15 6.0 3.0 3.0 node 16 0.0 3.0 0.0 node 17 3.0 3.0 0.0 node 18 6.0 3.0 0.0 # boundary conditions fix 1 1 1 1 fix 2 1 1 1 fix 3 1 1 1 fix 4 1 1 1 fix 5 1 1 1 fix 6 1 1 1 fix 7 1 1 1 fix 8 1 1 1 fix 9 1 1 1 # material nDMaterial ElasticIsotropic 1 25000.0 0.0 # brick elements element SSPbrick 1 1 2 5 4 10 11 14 13 1 element SSPbrick 2 2 3 6 5 11 12 15 14 1 element SSPbrick 3 4 5 8 7 13 14 17 16 1 element SSPbrick 4 5 6 9 8 14 15 18 17 1 # surface load elements element SurfaceLoad 5 10 11 14 13 - 0.1 element SurfaceLoad 6 11 12 15 14 - 0.1 element SurfaceLoad 7 13 14 17 16 - 0.1 element SurfaceLoad 8 14 15 18 17 - 0.1 # recorders recorder Node -file displacement.out -time -nodeRange 1 18 -dof 2 disp recorder Node -file reactions.out - time -nodeRange 1 18 -dof 2 reaction recorder Element -file stress.out - time -eleRange 1 4 stress # load pattern pattern Plain 1 { Series -time { 0 0.1 10000 } -values { 0 1 1 } -factor 1 } { eleLoad -ele 5 -type -surfaceLoad eleLoad -ele 6 -type -surfaceLoad eleLoad -ele 7 -type -surfaceLoad eleLoad -ele 8 -type -surfaceLoad } # analysis constraints Transformation test NormDispIncr 1e-5 50 1 algorithm Newton numberer Plain system SparseSPD integrator LoadControl 0.01 analysis Static analyze 105 wipe Code developed by: Chris McGann, Pedro Arduino, & Peter Mackenzie-Helnwein, at the University of Washington","title":"SurfaceLoad"},{"location":"library/modeling/element/misc/8002-AC3D8/","text":"AC3D8 This command is used to construct an eight-node 3D brick acoustic element object based on a trilinear isoparametric formulation. element AC3D8 $eleTag $node1 $node2 $node3 $node4 $node5 $node6 $node7 $node8 $matTag eleTag unique element object tag \\(node1 ..\\) node8 8 end nodes matTag Material Tag of previously defined nD material For further documentation and figures see attached: pdf Reference: ABAQUS theory manual. (2.9.1 Coupled acoustic-structural medium analysis) Code Developed by: Quan Gu, Yichao Gao and Zhijian Qiu","title":"AC3D8"},{"location":"library/modeling/element/misc/8004-ASI3D8/","text":"ASI3D8 This command is used to construct an eight-node zero-thickness 3D brick acoustic-structure interface element object based on a bilinear isoparametric formulation. The nodes in the acoustic domain share the same coordinates with the nodes in the solid domain. element ASI3D8 $eleTag $node1 $node2 $node3 $node4 $node5 $node6 $node7 $node8 eleTag unique element object tag \\(node1 ..\\) node4 four nodes defining structure domain of element boundaries (numbered as shown in pdf) $node5 .. $node8 four nodes defining acoustic domain of element boundaries (numbered as shown in pdf) For further documentation and figures see attached: pdf Reference: ABAQUS theory manual. (2.9.1 Coupled acoustic-structural medium analysis) Code Developed by: Quan Gu, Yichao Gao and Zhijian Qiu","title":"ASI3D8"},{"location":"library/modeling/element/misc/8005-AV3D4/","text":"AV3D4 This command is used to construct a four-node 3D acoustic viscous boundary quad element object based on a bilinear isoparametric formulation. element AV3D4 $eleTag $node1 $node2 $node3 $node4 $matTag eleTag unique element object tag \\(node1 ..\\) node4 4 end nodes matTag Material Tag of previously defined nD material For further documentation and figures see attached: pdf Code Developed by: Quan Gu, Yichao Gao and Zhijian Qiu","title":"AV3D4"},{"location":"library/modeling/element/misc/8721-Two%20Node%20Link%20Element/","text":"Two Node Link Element This command is used to construct a twoNodeLink element object, which is defined by two nodes. The element can have zero or non-zero length. This element can have 1 to 6 degrees of freedom, where only the transverse and rotational degrees of freedom are coupled as long as the element has non-zero length. In addition, if the element length is larger than zero, the user can optionally specify how the P-Delta moments around the local x- and y-axis are distributed among a moment at node i, a moment at node j, and a shear couple. The sum of these three ratios is always equal to 1. In addition the shear center can be specified as a fraction of the element length from the iNode. The element does not contribute to the Rayleigh damping by default. If the element has non-zero length, the local x-axis is determined from the nodal geometry unless the optional x-axis vector is specified in which case the nodal geometry is ignored and the user-defined orientation is utilized. It is important to recognize that if this element has zero length, it does not consider the geometry as given by the nodal coordinates, but utilizes the user-defined orientation vectors to determine the directions of the springs. element twoNodeLink $eleTag $iNode $jNode -mat $matTags -dir \\(dirs &lt;-orient &lt;\\) x1 $x2 $x3> $y1 $y2 $y3> <-pDelta (4 $Mratio)> <-shearDist (2 $sDratios)> <-doRayleigh> <-mass $m> eleTag unique element object tag iNode jNode end nodes matTags tags associated with previously-defined UniaxialMaterial objects dirs material directions: 2D-case : 1,2 - translations along local x,y axes; 3 - rotation about local z axis 3D-case : 1,2,3 - translations along local x,y,z axes; 4,5,6 - rotations about local x,y,z axes x1 x2 x3 vector components in global coordinates defining local x-axis (optional) y1 y2 y3 vector components in global coordinates defining local y-axis (optional) Mratios P-Delta moment contribution ratios, size of ratio vector is 2 for 2D-case and 4 for 3D-case (entries: [My_iNode, My_jNode, Mz_iNode, Mz_jNode]) My_iNode + My_jNode <= 1.0, Mz_iNode + Mz_jNode <= 1.0. Remaining P-Delta moments are resisted by shear couples. (optional) sDratios shear distances from iNode as a fraction of the element length, size of ratio vector is 1 for 2D-case and 2 for 3D-case (entries: [dy_iNode, dz_iNode] (optional, default = [0.5 0.5]) -doRayleigh to include Rayleigh damping from the element (optional, default = no Rayleigh damping contribution) m element mass (optional, default = 0.0) TwoNodeLinkElement.png NOTE: If the element has zero length and optional orientation vectors are not specified, the local element axes coincide with the global axes. Otherwise the local z-axis is defined by the cross product between the x- and y-vectors specified on the command line. The valid queries to a twoNodeLink element when creating an ElementRecorder object are \u2018force,\u2019 \u2018localForce,\u2019 \u2018basicForce,\u2019 \u2018localDisplacement,\u2019 \u2018basicDisplacement\u2019 and \u2018material $matNum matArg1 matArg2 \u2026\u2019 Where $matNum is the number associated with the material whose data is to be output. Examples 2D: element twoNodeLink 1 1 2 -mat 1 2 3 -dir 1 2 3; 3D: element twoNodeLink 1 1 2 -mat 1 2 3 -dir 1 2 6; Code Developed by: Andreas Schellenberg, University of California, Berkeley.","title":"Two Node Link Element"},{"location":"library/modeling/element/misc/8743-VS3D4/","text":"VS3D4 This command is used to construct a four-node 3D viscous-spring boundary quad element object based on a bilinear isoparametric formulation. element VS3D4 $eleTag $node1 $node2 $node3 $node4 $E $G $rho $R $alphaN $alphaT eleTag unique element object tag \\(node1 ..\\) node3 4 end nodes E Young\u2019s Modulus of element material G Shear Modulus of element material rho Mass Density of element material R distance from the scattered wave source to the boundary alphaN correction parameter in the normal direction alphaT correction parameter in the tangential direction Reference: Liu J, Du Y, Du X, et al. 3D viscous-spring artificial boundary in time domain. Earthquake Engineering and Engineering Vibration, 2006, 5(1):93-102 Code Developed by: Quan Gu, Yichao Gao and Zhijian Qiu","title":"VS3D4"},{"location":"library/modeling/element/quadrilateral/4211-Enhanced%20Strain%20Quadrilateral/","text":"Enhanced Strain Quadrilateral This command is used to construct a four-node quadrilateral element, which uses a bilinear isoparametric formulation with enhanced strain modes. element enhancedQuad $eleTag $iNode $jNode $kNode $lNode $thick $type $matTag eleTag unique element object tag iNode jNode kNode lNode four nodes defining element boundaries, input in counter-clockwise order around the element. thick element thickness type string representing material behavior. Valid options depend on the NDMaterial object and its available material formulations. The type parameter can be either \u201cPlaneStrain\u201d or \u201cPlaneStress.\u201d matTag tag of nDMaterial NOTE: The valid queries to a Quad element when creating an ElementRecorder object are \u2018forces\u2019, \u2018stresses,\u2019 and \u2018material $matNum matArg1 matArg2 \u2026\u2019 Where $matNum refers to the material object at the integration point corresponding to the node numbers in the isoparametric domain. Examples References Code Developed by: Edward Love, Sandia National Laboratories","title":"Enhanced Strain Quadrilateral"},{"location":"library/modeling/element/quadrilateral/48-Bbar%20Plane%20Strain%20Quadrilateral/","text":"Bbar Plane Strain Quadrilateral This command is used to construct a four-node quadrilateral element object, which uses a bilinear isoparametric formulation along with a mixed volume/pressure B-bar assumption. The only material formulation available for this element is PlaneStrain element bbarQuad $eleTag $iNode $jNode $kNode $lNode $thick $matTag eleTag unique element object tag iNode jNode kNode lNode four nodes defining element boundaries, input in counter-clockwise order around the element. thick element thickness matTag tag of nDMaterial NOTE: PlainStrain only. The valid queries to a Quad element when creating an ElementRecorder object are forces , stresses , and material $matNum matArg1 matArg2 ... Where matNum refers to the material object at the integration point corresponding to the node numbers in the isoparametric domain. Examples Code Developed by: Edward Love, Sandia National Laboratories","title":"Bbar Plane Strain Quadrilateral"},{"location":"library/modeling/element/quadrilateral/562-Quad/","text":"FourNodeQuad This command is used to construct a FourNodeQuad element object which uses a bilinear isoparametric formulation. element quad $eleTag $iNode $jNode $kNode $lNode $thick $type $matTag < $pressure $rho $b1 $b2 > eleTag unique element object tag iNode jNode kNode lNode four nodes defining element boundaries, input in counter-clockwise order around the element. thick element thickness type string representing material behavior. The type parameter can be either \u201cPlaneStrain\u201d or \u201cPlaneStress.\u201d matTag tag of nDMaterial pressure surface pressure (optional, default = 0.0) rho element mass density (per unit volume) from which a lumped element mass matrix is computed (optional, default=0.0) b1 b2 constant body forces defined in the isoparametric domain (optional, default=0.0) NOTE: Consistent nodal loads are computed from the pressure and body forces. The valid queries to a Quad element when creating an ElementRecorder object are \u2018forces\u2019, \u2018stresses,\u2019 and \u2018material $matNum matArg1 matArg2 \u2026\u2019 Where $matNum refers to the material object at the integration point corresponding to the node numbers in the isoparametric domain. Examples Code Developed by: Micheal Scott, Oregon State","title":"FourNodeQuad"},{"location":"library/modeling/element/quadrilateral/615-SSPquad/","text":"SSPquad This command is used to construct a SSPquad element. element SSPquad $eleTag $iNode $jNode $kNode $lNode $matTag $type $thick < $b1 $b2 > eleTag unique integer tag identifying element object iNode jNode kNode lNode the four nodes defining the element, input in counterclockwise order (-ndm 2 -ndf 2) thick thickness of the element in out-of-plane direction type string to relay material behavior to the element, can be either \u201cPlaneStrain\u201d or \u201cPlaneStress\u201d matTag unique integer tag associated with previously-defined nDMaterial object b1 b2 constant body forces in global x- and y-directions, respectively (optional, default = 0.0) The SSPquad element is a four-node quadrilateral element using physically stabilized single-point integration (SSP \u2013> Stabilized Single Point). The stabilization incorporates an assumed strain field in which the volumetric dilation and the shear strain associated with the the hourglass modes are zero, resulting in an element which is free from volumetric and shear locking. The elimination of shear locking results in greater coarse mesh accuracy in bending dominated problems, and the elimination of volumetric locking improves accuracy in nearly-incompressible problems. Analysis times are generally faster than corresponding full integration elements. The formulation for this element is identical to the solid phase portion of the SSPquadUP element as described by McGann et al. (2012). NOTES: Valid queries to the SSPquad element when creating an ElementalRecorder object correspond to those for the nDMaterial object assigned to the element (e.g., \u2018stress\u2019, \u2018strain\u2019). Material response is recorded at the single integration point located in the center of the element. The SSPquad element was designed with intentions of duplicating the functionality of the Quad Element . If an example is found where the SSPquad element cannot do something that works for the Quad Element , e.g., material updating, please contact the developers listed below so the bug can be fixed. EXAMPLES: SSPquad element definition with element tag 1, nodes 1, 2, 3, and 4, material tag 1, plane strain conditions, unit thickness, horizontal body force of zero, and vertical body force of -10.0 element SSPquad 1 1 2 3 4 1 \"PlaneStrain\" 1.0 0.0 -10 .0 Elemental recorders for stress and strain when using the SSPquad element (note the difference from the Quad Element ) recorder Element -eleRange 1 $numElem -time -file stress.out stress recorder Element -eleRange 1 $numElem -time -file strain.out strain EXAMPLE ANALYSIS: The input file shown below creates a cantilever beam subject to a parabolic shear stress distribution at the free end. The beam is modeled with only one element over the height to test the coarse-mesh accuracy of the designated quadrilateral element. Anti-symmetry conditions hold, only the top half of the beam is modeled. Try running this with the SSPquad element and the Quad Element . Compare the results to each other and to the beam solution to see shear locking in action. Volumetric locking in the Quad Element can be observed by increasing Poisson\u2019s ratio to \\(0.49\\) . <li>#</li> <li>Coarse-mesh cantilever beam analysis. The beam is #</li> <li>modeled with only 4 elements and uses anti-symmetry. #</li> <li>#</li> <li>---&gt; Basic units used are kN and meters #</li> <li># wipe model BasicBuilder -ndm 2 -ndf 2 <li>beam dimensions</li> set L 24.0 set D 3.0 <li>define number and size of elements</li> set nElemX 4 set nElemY 1 set nElemT [expr $nElemX * $nElemY ] set sElemX [expr $L / $nElemX ] set sElemY [expr $D / $nElemY ] set nNodeX [expr $nElemX + 1 ] set nNodeY [expr $nElemY + 1 ] set nNodeT [expr $nNodeX * $nNodeY ] <li> create the nodes</li> set nid 1 set count 0.0 for {set j 1 } { $j &lt;= $nNodeY } {incr j 1 } { for {set i 1 } { $i &lt;= $nNodeX } {incr i 1 } { node $nid [expr 0.0 + $count * $sElemX ] [expr ( $j -1 )* $sElemY ] set nid [expr $nid + 1 ] set count [expr $count + 1 ] } set count 0.0 } <li>boundary conditions</li> fix 1 1 1 fix [expr $nElemY * $nNodeX + 1 ] 1 0 for {set k 2 } { $k &lt;= $nNodeX } {incr k 1 } { fix $k 1 0 } <li>define material</li> set matID 1 set E 20000 set nu 0.25 nDMaterial ElasticIsotropic $matID $E $nu <li> create elements</li> set thick 1.0 set b1 0.0 set b2 0.0 set count 1 for {set j 1 } { $j &lt;= $nNodeY } {incr j 1 } { for {set i 1 } { $i &lt;= $nNodeX } {incr i 1 } { if { ( $i &lt; $nNodeX ) &amp;&amp; ( $j &lt; $nNodeY ) } { set nI [expr $i +( $j -1 )* $nNodeX ] set nJ [expr $i +( $j -1 )* $nNodeX + 1 ] set nK [expr $i + $j * $nNodeX + 1 ] set nL [expr $i + $j * $nNodeX ] element SSPquad $count $nI $nJ $nK $nL $matID \"PlaneStrain\" $thick $b1 $b2 set count [expr $count + 1 ] } } } <li> create recorders</li> set step 0.1 recorder Node -time -file results/d1p1m1.out -dT $step -nodeRange 1 $nNodeT -dof 1 2 disp recorder Element -eleRange 1 $nElemT -time -file results/s1p1m1.out -dT $step stress recorder Element -eleRange 1 $nElemT - time -file results/e1p1m1.out -dT $step strain <li> create loading</li> set P -300 .0 ; pattern Plain 3 { Series -time { 0 10 15 } -values { 0 1 1 } -factor 1 } { load $nNodeT 0.0 [expr 0.1875 * $P ] load $nNodeX 0.0 [expr 0.3125 * $P ] load [expr $nNodeX + 1 ] 0.0 [expr -0 .1875 * $P ] } <li> create analysis</li> integrator LoadControl 0.1 numberer RCM system SparseGeneral constraints Transformation test NormDispIncr 1e-5 40 1 algorithm Newton analysis Static analyze 105 wipe References McGann, C. R., Arduino, P., and Mackenzie-Helnwein, P. (2012). \u201cStabilized single-point 4-node quadrilateral element for dynamic analysis of fluid saturated porous media.\u201d Acta Geotechnica , 7(4), 297-311. Code developed by: Chris McGann, Pedro Arduino, & Peter Mackenzie-Helnwein, at the University of Washington","title":"SSPquad"},{"location":"library/modeling/element/quadrilateral/ConstantPressureVolumeQuad/","text":"ConstantPressureVolumeQuad element ConstantPressureVolumeQuad eleTag? iNode? jNode? kNode? lNode? thk? matTag?","title":"ConstantPressureVolumeQuad"},{"location":"library/modeling/element/quadrilateral/NineNodeMixedQuad/","text":"NineNodeMixedQuad element NineNodeMixedQuad eleTag? iNode? jNode? kNode? lNode? mNode? nNode? pNode? qNode centerNode","title":"NineNodeMixedQuad"},{"location":"library/modeling/element/shell/636-ShellDKGQ/","text":"ShellDKGQ This command is used to construct a ShellDKGQ element, which is a quadrilateral shell element based on the theory of generalized conforming element. element ShellDKGQ $eleTag $iNode $jNode $kNode $lNode $secTag eleTag unique element object tag iNode jNode kNode lNode four nodes defining element boundaries, input in clockwise or counter-clockwise order around the element. secTag tag associated with previously-defined SectionForceDeformation object. Currently can be a PlateFiberSection, a ElasticMembranePlateSection and a LayeredShell section Code developed by: Lisha Wang, Tsinghua University, Prof. Xinzheng Lu, Tsinghua University, Linlin Xie, Tsinghua University, Prof. Song Cen, Tsinghua University and Prof. Quan Gu, Xiamen University","title":"ShellDKGQ"},{"location":"library/modeling/element/shell/637-ShellDKGT/","text":"ShellDKGT This command is used to construct a ShellDKGT element object, which is a triangular shell element based on the theory of generalized conforming element. element ShellDKGT $eleTag $iNode $jNode $kNode $secTag eleTag unique element object tag iNode jNode kNode three nodes defining element boundaries, input in clockwise or counter-clockwise order around the element. tag associated with previously-defined SectionForceDeformation object. secTag currently can be a PlateFiberSection, a ElasticMembranePlateSection and a LayeredShell section Code developed by: Shuhao Zhang, Tsinghua University, and Prof. Xinzheng Lu, Tsinghua University","title":"ShellDKGT"},{"location":"library/modeling/element/shell/638-ShellNL/","text":"ShellNL This command is used to construct a ShellNL element, a lagrangian nine-noded shell element. element ShellNL $eleTag $node1 $node2 ... $node9 $secTag eleTag unique element object tag node1 \u2026 node9 nine nodes defining element boundaries, input is the typical, firstly four corner nodes counter-clockwise, then mid-side nodes counter-clockwise and finally the central node. secTag tag associated with previously-defined SectionForceDeformation object. Currently must be either a PlateFiberSection, or ElasticMembranePlateSection NOTE: The valid queries to a Quad element when creating an ElementRecorder are \u2018forces\u2019, \u2018stresses,\u2019 and material $matNum matArg1 matArg2 ... Where $matNum refers to the material object at the integration point corresponding to the node numbers in the isoparametric domain. Examples set t 10.0 model basic -ndm 3 -ndf 6 nDMaterial ElasticIsotropic 1 200000 0.3 nDMaterial PlateFiber 2 1 section PlateFiber 3 2 $t element ShellNL 1 1 27 29 3 14 28 16 2 15 3 References Zienkiewicz o.c., Taylor r.l. vol. 2. The finite element method. Solid mechanics. Elsevier 2000 Code Developed by: Leopoldo Tesser, Diego A. Talledo","title":"ShellNL"},{"location":"library/modeling/element/shell/639-ShellNLDKGQ/","text":"ShellNLDKGQ This command is used to construct a ShellNLDKGQ element accounting for the geometric nonlinearity of large deformation using the updated Lagrangian formula, which is developed based on the ShellDKGQ element. element ShellNLDKGQ $eleTag $iNode $jNode $kNode $lNode $secTag eleTag unique element object tag iNode jNode kNode lNode four nodes defining element boundaries, input in clockwise or counter-clockwise order around the element. secTag tag associated with previously-defined SectionForceDeformation object. Currently can be a PlateFiberSection, a ElasticMembranePlateSection and a LayeredShell section. NOTE: Three examples of this element can be found on the following URL http://www.luxinzheng.net/download/OpenSEES/Examples_of_NLDKGQ_element.htm References : [1] Lu XZ, Xie LL, Guan H, Huang YL, Lu X, A shear wall element for nonlinear seismic analysis of super-tall buildings using OpenSees, Finite Elements in Analysis & Design, 2015, 98: 14-25. Code developed by: Lisha Wang, Tsinghua University, Prof. Xinzheng Lu, Tsinghua University, Linlin Xie, Tsinghua University, Prof. Song Cen, Tsinghua University and Prof. Quan Gu, Xiamen University","title":"ShellNLDKGQ"},{"location":"library/modeling/element/shell/640-ShellNLDKGT/","text":"ShellNLDKGT This command is used to construct a ShellNLDKGT element. This element accounts for the geometric nonlinearity of large deformation using the updated Lagrangian formulation, which is developed based on the ShellDKGT element. element ShellNLDKGT $eleTag $iNode $jNode $kNode $secTag eleTag unique element object tag iNode jNode kNode three nodes defining element boundaries, input in clockwise or counter-clockwise order around the element. tag associated with previously-defined SectionForceDeformation object secTag currently can be a PlateFiberSection, a ElasticMembranePlateSection and a LayeredShell section Code developed by: Shuhao Zhang, Tsinghua University, and Prof. Xinzheng Lu, Tsinghua University","title":"ShellNLDKGT"},{"location":"library/modeling/element/shell/641-Shell%20Element/","text":"ShellMITC4 This command is used to construct a ShellMITC4 element, which uses a bilinear isoparametric formulation in combination with a modified shear interpolation to improve thin-plate bending performance. The element is named for the Mixed-Interpolated Tensorial Components formulation (see references below). element ShellMITC4 $eleTag $iNode $jNode $kNode $lNode $secTag eleTag unique element object tag iNode jNode kNode lNode four nodes defining element boundaries, input in counter-clockwise order around the element. secTag tag associated with previously-defined SectionForceDeformation object. Currently must be either a PlateFiberSection, or ElasticMembranePlateSection Notes: The valid queries to a Quad element when creating an ElementRecorder object are \u2018forces\u2019, \u2018stresses,\u2019 and material $matNum matArg1 matArg2 ... Where $matNum refers to the material object at the integration point corresponding to the node numbers in the isoparametric domain. This is a 3D element with 6 dofs and CAN NOT be used in 2D domain. Examples set t 100.0 model basic -ndm 3 -ndf 6 nDMaterial ElasticIsotropic 1 200000 0.3 nDMaterial PlateFiber 4 1 set secArgs \"7\" section PlateFiber $secArgs 4 $t set EleType ShellMITC4 block2D $n1 $n2 1 1 $EleType $secArgs { 1 0.0 0.0 0.0 2 0.0 10 0.0 3 1000 10 0.0 4 1000 0.0 0.0 } References Dvorkin, E.N. and Bathe, K. (1984), \u201cA continuum mechanics based four\u2010node shell element for general non\u2010linear analysis\u201d, Engineering Computations, Vol. 1 No. 1, pp. 77-88. https://doi.org/10.1108/eb023562 Original implementation by: Ed \u201cC++\u201d Love Reimplementation by: Leopoldo Tesser, Diego A. Talledo, V\u00e9ronique Le Corvec","title":"ShellMITC4"},{"location":"library/modeling/element/tetrahedron/4265-FourNodeTetrahedron/","text":"FourNodeTetrahedron Tet.png This command is used to construct a standard four-node tetrahedron element objec with one-point Gauss integration. element FourNodeTetrahedron $eleTag $node1 $node2 $node3 $node4 $matTag < $b1 $b2 $b3 > eleTag unique element object tag node1 node2 node3 node4 four nodes defining element boundaries, input order is shown in the figure. matTag tag of nDMaterial b1 b2 b3 body forces in global x,y,z directions Because sometimes bricks will give you headaches! Use this if you don\u2019t care much about the stress/strain fields (tets are notoriously bad). Otherwise, you can use the 10-node quadratic tetrahedron (in development). NOTE: The valid queries to a FourNodeTetrahedron element when creating an ElementRecorder object are \u2018forces\u2019, \u2018stresses,\u2019 (\u2018strains\u2019 version > 2.2.0) and \u2018material $matNum matArg1 matArg2 \u2026\u2019 Where $matNum refers to the material object at the integration point corresponding to the node numbers in the isoparametric domain. This element can only be defined in -ndm 3 -ndf 3 Examples References Carlos Felipa\u2019s AFEM Course: Chapter 9 The Linear Tetrahedron. Code Developed by Jos\u00e9 A. Abell at Universidad de los Andes, Chile","title":"FourNodeTetrahedron"},{"location":"library/modeling/element/triangle/8710-Tri31%20Element/","text":"Tri31 This command is used to construct a constant strain triangular element (Tri31) which uses three nodes and one integration points. element tri31 $eleTag $iNode $jNode $kNode $thick $type $matTag &lt; $pressure $rho $b1 $b2 &gt; eleTag unique element object tag iNode jNode kNode three nodes defining element boundaries, input in counter-clockwise order around the element. thick element thickness type string representing material behavior. The type parameter can be either \u201cPlaneStrain\u201d or \u201cPlaneStress.\u201d matTag tag of nDMaterial pressure surface pressure (optional, default = 0.0) rho element mass density (per unit volume) from which a lumped element mass matrix is computed (optional, default=0.0; if rho=0.0, then materials are queried for mass density) b1 b2 constant body forces defined in the domain (optional, default=0.0) NOTE: Consistent nodal loads are computed from the pressure and body forces. The valid queries to a Tri31 element when creating an ElementRecorder object are \u2018forces\u2019, \u2018stresses,\u2019 and \u2018material $matNum matArg1 matArg2 \u2026\u2019 Where $matNum refers to the material object at the integration point corresponding to the node numbers in the domain. Code Developed by: Roozbeh G. Mikola , UC Berkeley and N. Sitar , UC Berkeley","title":"Tri31"},{"location":"library/modeling/element/truss/","text":"Truss Tests JSON CatenaryCable yes yes","title":"Truss"},{"location":"library/modeling/element/truss/1074-CatenaryCable/","text":"CatenaryCable This command is used to construct a catenary cable element object. element CatenaryCable $tag $iNode $jNode $weight $E $A $L0 $alpha $temperature_change $rho $errorTol $Nsubsteps $massType eleTag unique element object tag iNode jNode end nodes (3 dof per node) E elastic modulus of the cable material A cross-sectional area of element L0 unstretched length of the cable alpha coefficient of thermal expansion temperature_change temperature change for the element rho mass per unit length errortol allowed tolerance for within-element equilbrium (Newton-Rhapson iterations) Nsubsteps number of within-element substeps into which equilibrium iterations are subdivided (not number of steps to convergence) massType Mass matrix model to use ( \\(massType = 0</strong> lumped mass matrix, <strong>\\) massType = 1 rigid-body mass matrix (in development)) This cable is a flexibility-based formulation of the catenary cable. An iterative scheme is used internally to compute equilibrium. At each iteration, node i is considered fixed while node j is free. End-forces are applied at node-j and its displacements computed. Corrections to these forces are applied iteratively using a Newton-Rhapson scheme (with optional sub-stepping via Nsubsteps ) until nodal displacements are within the provided tolerance ( errortol ). When convergence is reached, a stiffness matrix is computed by inversion of the flexibility matrix and rigid-body mode injection. Notes: The stiffness of the cable comes from the large-deformation interaction between loading and cable shape. Therefore, all cables must have distributed forces applied to them. See example. Should not work for only nodal forces. Valid queries to the CatenaryCable element when creating an ElementalRecorder object correspond to \u2018forces\u2019, which output the end-forces of the element in global coordinates (3 for each node). Only the lumped-mass formulation is currently available. The element does up 100 internal iterations. If convergence is not achieved, will result in error and some diagnostic information is printed out. Examples # This example implements a slight modification of the verification test from reference #1. # model BasicBuilder -ndm 3 -ndf 3 set x 30. ; #Set to example from paper x = 30, 60, 80, 100. Will not work for x=0.01, system ill-conditioned. node 1 0.0 0.0 90.0 node 2 [expr $x / 2 ] 0.0 40.0 node 3 $x 60 30. fix 1 1 1 1 fix 2 0 1 0 fix 3 1 1 1 set w3 - 0.00001 set E 3 .e7 set A 1. set L0 100. set alfa 6.5e-6 set cambiodetemp 100. set rho [expr $w3 / 9.81 ] set errorTol 1e-6 set NSubSteps 20 element CatenaryCable 1 1 2 $w3 $E $A [expr $L0 / 2 ] $alfa $cambiodetemp $rho $errorTol $NSubSteps 0 element CatenaryCable 2 2 3 $w3 $E $A [expr $L0 / 2 ] $alfa $cambiodetemp $rho $errorTol $NSubSteps 0 set NSteps 10 timeSeries Linear 1 -factor 1 pattern Plain 2 1 { eleLoad -ele 1 2 -type -beamUniform 0. 0. -1 } recorder Node -file \"disp.txt\" -time -nodeRange 1 3 -dof 1 2 3 disp recorder Element -file \"forces.txt\" -time -eleRange 1 2 force system FullGeneral constraints Plain numberer Plain test NormDispIncr 1.0e-5 100 1 integrator LoadControl [expr 1.0 / $NSteps ] algorithm Newton analysis Static analyze $NSteps print -node 2 Results should be: Node: 2 Coordinates : 15 0 40 Disps: 8.58693 0 2.82578 unbalanced Load: 0 0 0 ID : 0 -1 1 Compare the forces.txt (for node 3) file with the results from reference [1]. References Salehi Ahmad Abad, M., Shooshtari, A., Esmaeili, V., & Naghavi Riabi, A. (2013). Nonlinear analysis of cable structures under general loadings. Finite Elements in Analysis and Design, 73, 11-19. https://doi.org/10.1016/j.finel.2013.05.002 Thai, H. T., & Kim, S. E. (2011). Nonlinear static and dynamic analysis of cable structures. Finite Elements in Analysis and Design, 47(3), 237-246. https://doi.org/10.1016/j.finel.2010.10.005 Code developed by: Pablo Iba\u00f1ez and Jos\u00e9 A. Abell at Universidad de los Andes, Chile","title":"CatenaryCable"},{"location":"library/modeling/element/truss/1107-Corotational%20Truss%20Element/","text":"Corotational Truss This command is used to construct a corotational truss element object. There are two ways to construct a corotational truss element object: One way is to specify an area and a UniaxialMaterial identifier: element corotTruss $eleTag $iNode $jNode $A $matTag &lt;-rho $rho &gt; &lt;-cMass $cFlag &gt; &lt;-doRayleigh $rFlag &gt; the other is to specify a Section identifier: element corotTrussSection $eleTag $iNode $jNode $secTag &lt;-rho $rho &gt; &lt;-cMass $cFlag &gt; &lt;-doRayleigh $rFlag &gt; eleTag unique element object tag iNode jNode end nodes A cross-sectional area of element matTag tag associated with previously-defined UniaxialMaterial secTag tag associated with previously-defined Section rho mass per unit length, optional, default = 0.0 cFlag consistent mass flag, optional, default = 0 cFlag = 0 lumped mass matrix (default) cFlag = 1 consistent mass matrix rFlag Rayleigh damping flag, optional, default = 0 rFlag = 0 NO RAYLEIGH DAMPING (default) rFlag = 1 include Rayleigh damping NOTE: When constructed with a UniaxialMaterial object, the corotational truss element considers strain-rate effects, and is thus suitable for use as a damping element. The valid queries to a truss element when creating an ElementRecorder object are \u2018axialForce,\u2019 \u2018stiff,\u2019 deformations,\u2019 \u2018material matArg1 matArg2\u2026,\u2019 \u2018section sectArg1 sectArg2\u2026\u2019 There will be more queries after the interface for the methods involved have been developed further. For backward compatability the command \u2019element corotTruss $eleTag $iNode $jNode $secTag will still work and produce a CorotTrussSection element. CorotTruss DOES NOT include Rayleigh damping by default. Examples element truss 1 2 4 5.5 9; # truss element with tag 1 added between nodes 2 and 4 with area 5.5 that uses material 9 Code Developed by: Michael H. Scott, Oregon State University","title":"Corotational Truss"},{"location":"library/modeling/element/truss/1716-Truss2/","text":"Truss2 Element This command is used to construct a Truss2 or CorotTruss2 element object, a biaxial truss element designed to be used in conjunction with the ConcretewBeta material for accounting for biaxial effects in a uniaxial element. Truss: element Truss2 $eleTag $iNode $jNode $mGNode $nGNode $A $matTag < -rho $rho > < -rayleigh $rflag > Corotational Truss: element CorotTruss2 $eleTag $iNode $jNode $mGNode $nGNode $A $matTag < -rho $rho > eleTag unique element object tag iNode jNode end nodes of the truss element mGNode nGNode end nodes for the zero-stiffness gauge element A cross-sectional area of truss element matTag tag of material used (see Note 1) Optional: rho mass per unit length, as in the Truss and CorotTruss Elements (default = 0.0) rFlag flag for Rayleigh damping, as in the Truss Element (default = 0; see Note 2) NOTES: If the material used does not use biaxial effects, the element will behave like the uniaxial counterpart ( Truss or CorotTruss ). For the ConcretewBeta material, the normal strain will be passed to the material to be used in calculation of the material response. Consistent with the implementation of the Truss element, the Truss2 element does not include Rayleigh damping by default. Rayleigh damping can be included by using the -rayleigh option with rFlag = 1. However, like the CorotTruss element, the CorotTruss2 element includes the Rayleigh damping by default so the -rayleigh option is not available to the CorotTruss2 element. At this time, there is no trussSection equivalent implementation of these biaxial trusses. Implementation Equation 1. The above figure shows the layout of the truss and zero-stiffness gauge elements that make up the Truss2 Element object. The truss element part behaves identically to the Truss Element object (or the CorotTruss Element object for the case of CorotTruss2). The zero-stiffness gauge element is used to measure the strain in the direction of the gauge. The strain in the direction normal to the truss element is described by Equation 1, where &epsilon; truss is the strain calculated in the truss element, &epsilon; gauge is the strain calculated in the gauge element, and \u03b8 g is the angle between the truss and gauge elements. It is suggested to make \u03b8 g as close to 90\u00b0 as possible. thumb|center|upright=2.5|alt=Truss2 Figure 1 |Figure 1. Truss2 truss and gauge element layout based on input node values. References Lu, Y., and Panagiotou, M. (2013). \u201cThree-Dimensional Nonlinear Cyclic Beam-Truss Model for Reinforced Concrete Non-Planar Walls.\u201d Journal of Structural Engineering, published online. Panagiotou, M., Restrepo, J.I., Schoettler, M., and Kim G. (2012). \u201cNonlinear cyclic truss model for reinforced concrete walls.\u201d ACI Structural Journal, 109(2), 205-214. Code developed by: Yuan Lu, UC Berkeley and Marios Panagiotou, UC Berkeley","title":"Truss2 Element"},{"location":"library/modeling/element/truss/1717-Truss/","text":"Truss This command is used to construct a truss element object. There are two ways to construct a truss element object: One way is to specify an area and a UniaxialMaterial identifier: element truss $eleTag $iNode $jNode $A $matTag < -rho $rho > < -cMass $cFlag > < -doRayleigh $rFlag > the other is to specify a Section identifier: element trussSection $eleTag $iNode $jNode $secTag < -rho $rho > < -cMass $cFlag > < -doRayleigh $rFlag > eleTag unique element object tag iNode jNode end nodes A cross-sectional area of element matTag tag associated with previously-defined UniaxialMaterial secTag tag associated with previously-defined Section rho mass per unit length, optional, default = 0.0 cFlag consistent mass flag, optional, default = 0 cFlag = 0 lumped mass matrix (default) cFlag = 1 consistent mass matrix rFlag Rayleigh damping flag, optional, default = 0 rFlag = 0 NO RAYLEIGH DAMPING (default) rFlag = 1 include Rayleigh damping NOTE: The truss element DOES NOT include geometric nonlinearities, even when used with beam-columns utilizing P-Delta or Corotational transformations. When constructed with a UniaxialMaterial object, the truss element considers strain-rate effects, and is thus suitable for use as a damping element. The valid queries to a truss element when creating an ElementRecorder object are \u2018axialForce,\u2019 \u2018forces,\u2019 \u2018localForce\u2019, deformations,\u2019 \u2018material matArg1 matArg2\u2026,\u2019 \u2018section sectArg1 sectArg2\u2026\u2019 There will be more queries after the interface for the methods involved have been developed further. For backward compatibility the command \u2019element truss $eleTag $iNode $jNode $secTag will still work and produce a TrussSection element. There was an inconsistency in the way damping was treated between element types before version 2.2.0. Before 2.2.0, a Truss DID NOT INCLUDE Rayleigh damping, a TrussSection did. By default they both DO NOT now include Rayleigh damping by default. Examples element truss 1 2 4 5.5 9; # truss element with tag 1 added between nodes 2 and 4 with area 5.5 that uses material 9 Code Developed by: fmk","title":"Truss"},{"location":"library/modeling/element/u-p/7045-BbarBrickUP/","text":"BbarBrick u-p bbarBrickUP is a 8-node mixed volume/pressure element, which uses a tri-linear isoparametric formulation. Each node has 4 degrees-of-freedom (DOF): DOFs 1 to 3 for solid displacement (u) and DOF 4 for fluid pressure (p). This element is implemented for simulating dynamic response of solid-fluid fully coupled material, based on Biot\u2019s theory of porous medium. Please click here for examples. OUTPUT INTERFACE: Pore pressure can be recorded at an element node using OpenSees Node Recorder: recorder Node <-file \\(fileName&gt; &lt;-time&gt; &lt;-node (\\) nod1 $nod2 \u2026)> -dof 3 vel See OpenSees command manual (McKenna and Fenves 2001) for nodal displacement, velocity, or acceleration recorders. The valid queries to a bbarBrickUP element when creating an ElementRecorder are \u2018force\u2019, \u2018stiffness\u2019, or \u2018material matNum matArg1 matArg2 \u2026\u2019, where matNum represents the material object at the corresponding integration point. element bbarBrickUP $eleTag $Node1 $Node2 $Node3 $Node4 $Node5 $Node6 $Node7 $Node8 $matTag $bulk $fmass $PermX $PermY \\(PermZ &lt;\\) bX=0 $bY=0 \\(bZ=0&gt;</strong></p></td> </tr> </tbody> </table> <figure> <img src=\"/OpenSeesRT/contrib/static/BrickUp.png\" title=\"BrickUp.png\" alt=\"BrickUp.png\" /> <figcaption aria-hidden=\"true\">BrickUp.png</figcaption> </figure> <table> <tbody> <tr class=\"odd\"> <td><code class=\"parameter-table-variable\">eleTag</code></td> <td><p>A positive integer uniquely identifying the element among all elements</p></td> </tr> <tr class=\"even\"> <td><p><strong>\\) Node1,\u2026 \\(Node8</strong></p></td> <td><p>Eight element node (previously defined) numbers (see figure above for order of numbering).</p></td> </tr> <tr class=\"odd\"> <td><code class=\"parameter-table-variable\">matTag</code></td> <td><p>Tag of an NDMaterial object (previously defined) of which the element is composed</p></td> </tr> <tr class=\"even\"> <td><code class=\"parameter-table-variable\">bulk</code></td> <td><p>Combined undrained bulk modulus B&lt;sub&gt;c&lt;/sub&gt; relating changes in pore pressure and volumetric strain, may be approximated by:</p> <p>B&lt;sub&gt;c&lt;/sub&gt; &amp;asymp; B&lt;sub&gt;f&lt;/sub&gt;/n</p> <p>where B&lt;sub&gt;f&lt;/sub&gt; is the bulk modulus of fluid phase (2.2x10&lt;sup&gt;6&lt;/sup&gt; kPa (or 3.191x10&lt;sup&gt;5&lt;/sup&gt; psi) for water), and n the initial porosity.</p></td> </tr> <tr class=\"odd\"> <td><code class=\"parameter-table-variable\">fmass</code></td> <td><p>Fluid mass density</p></td> </tr> <tr class=\"even\"> <td><p><strong>\\) permX, $permY, \\(permZ</strong></p></td> <td><p>Permeability coefficients in x, y, and z directions respectively.</p></td> </tr> <tr class=\"odd\"> <td><p><strong>\\) bX, $bY, $bZ Optional gravity acceleration components in x, y, and z directions directions respectively (defaults are 0.0) Code Developed by: UC San Diego (Dr. Zhaohui Yang) : UC San Diego Soil Model:","title":"BbarBrick u-p"},{"location":"library/modeling/element/u-p/7046-BbarQuadUP/","text":"BbarQuad u-p bbarQuadUP is a four-node plane-strain mixed volume/pressure element, which uses a tri-linear isoparametric formulation. This element is implemented for simulating dynamic response of solid-fluid fully coupled material, based on Biot\u2019s theory of porous medium. Each element node has 3 degrees-of-freedom (DOF): DOF 1 and 2 for solid displacement (u) and DOF 3 for fluid pressure (p). Please click here for examples. OUTPUT INTERFACE: Pore pressure can be recorded at an element node using OpenSees Node Recorder: recorder Node <-file \\(fileName&gt; &lt;-time&gt; &lt;-node (\\) nod1 $nod2 \u2026)> -dof 3 vel See OpenSees command manual (McKenna and Fenves 2001) for nodal displacement, velocity, or acceleration recorders. The valid queries to a bbarQuadUP element when creating an ElementRecorder are \u2018force\u2019, \u2018stiffness\u2019, or \u2018material matNum matArg1 matArg2 \u2026\u2019, where matNum represents the material object at the corresponding integration point. element bbarQuadUP $eleTag $iNode $jNode $kNode $lNode $thick $matTag $bulk $fmass $hPerm \\(vPerm &lt;\\) b1=0 $b2=0 \\(t=0&gt;</strong></p></td> </tr> </tbody> </table> <table> <tbody> <tr class=\"odd\"> <td><code class=\"parameter-table-variable\">eleTag</code></td> <td><p>A positive integer uniquely identifying the element among all elements</p></td> </tr> <tr class=\"even\"> <td><p><strong>\\) iNode, $jNode, $kNode, \\(lNode</strong></p></td> <td><p>Four element node (previously defined) numbers in counter-clockwise order around the element</p></td> </tr> <tr class=\"odd\"> <td><code class=\"parameter-table-variable\">thick</code></td> <td><p>Element thickness</p></td> </tr> <tr class=\"even\"> <td><code class=\"parameter-table-variable\">matTag</code></td> <td><p>Tag of an NDMaterial object (previously defined) of which the element is composed</p></td> </tr> <tr class=\"odd\"> <td><code class=\"parameter-table-variable\">bulk</code></td> <td><p>Combined undrained bulk modulus B&lt;sub&gt;c&lt;/sub&gt; relating changes in pore pressure and volumetric strain, may be approximated by:</p> <p>B&lt;sub&gt;c&lt;/sub&gt; &amp;asymp; B&lt;sub&gt;f&lt;/sub&gt;/n</p> <p>where B&lt;sub&gt;f&lt;/sub&gt; is the bulk modulus of fluid phase (2.2x10&lt;sup&gt;6&lt;/sup&gt; kPa (or 3.191x10&lt;sup&gt;5&lt;/sup&gt; psi) for water), and n the initial porosity.</p></td> </tr> <tr class=\"even\"> <td><code class=\"parameter-table-variable\">fmass</code></td> <td><p>Fluid mass density</p></td> </tr> <tr class=\"odd\"> <td><p><strong>\\) hPerm, \\(vPerm</strong></p></td> <td><p>Permeability coefficient in horizontal and vertical directions respectively.</p></td> </tr> <tr class=\"even\"> <td><p><strong>\\) b1, $b2 Optional gravity acceleration components in horizontal and vertical directions respectively (defaults are 0.0) t Optional uniform element normal traction, positive in tension (default is 0.0) TYPICAL RANGE OF PERMEABILITY COEFFICIENT Gravel Sand Silty Sand Silt Clay >1.0x10<sup>-1</sup> cm/s (or 3.94x10<sup>-2</sup> in/s) 1.0x10<sup>-3</sup> cm/s (or 3.94 x10<sup>-4</sup> in/s) ~ 1.0x10<sup>-1</sup> cm/s (or 3.94 x10<sup>-2</sup> in/s) 1.0x10<sup>-5</sup> cm/s (or 3.94 x10<sup>-6</sup> in/s) ~ 1.0x10<sup>-3</sup> cm/s (or 3.94 x10<sup>-4</sup> in/s) 1.0x10<sup>-7</sup> cm/s (or 3.94 x10<sup>-8</sup> in/s) ~ 1.0x10<sup>-5</sup> cm/s (or 3.94 x10<sup>-6</sup> in/s) <1.0x10<sup>-7</sup> cm/s (or 3.94x10 <sup>-8</sup> in/s) Code Developed by: UC San Diego (Dr. Zhaohui Yang) : UC San Diego Soil Model:","title":"BbarQuad u-p"},{"location":"library/modeling/element/u-p/7066-BrickUP/","text":"Brick u-p BrickUP is an 8-node hexahedral linear isoparametric element. Each node has 4 degrees-of-freedom (DOF): DOFs 1 to 3 for solid displacement (u) and DOF 4 for fluid pressure (p). This element is implemented for simulating dynamic response of solid-fluid fully coupled material, based on Biot\u2019s theory of porous medium. Please click here for examples. OUTPUT INTERFACE: Pore pressure can be recorded at an element node using OpenSees Node Recorder: recorder Node <-file \\(fileName&gt; &lt;-time&gt; &lt;-node (\\) nod1 $nod2 \u2026)> -dof 3 vel See OpenSees command manual (McKenna and Fenves 2001) for nodal displacement, velocity, or acceleration recorders. The valid queries to a BrickUP element when creating an ElementRecorder are \u2018force\u2019, \u2018stiffness\u2019, or \u2018material matNum matArg1 matArg2 \u2026\u2019, where matNum represents the material object at the corresponding integration point. element brickUP $eleTag $Node1 $Node2 $Node3 $Node4 $Node5 $Node6 $Node7 $Node8 $matTag $bulk $fmass $PermX $PermY \\(PermZ &lt;\\) bX=0 $bY=0 \\(bZ=0&gt;</strong></p></td> </tr> </tbody> </table> <p><a href=\"image:Brick.png\" title=\"wikilink\">image:Brick.png</a></p> <table> <tbody> <tr class=\"odd\"> <td><code class=\"parameter-table-variable\">eleTag</code></td> <td><p>A positive integer uniquely identifying the element among all elements</p></td> </tr> <tr class=\"even\"> <td><p><strong>\\) Node1,\u2026 \\(Node8</strong></p></td> <td><p>Eight element node (previously defined) numbers (see figure above for order of numbering).</p></td> </tr> <tr class=\"odd\"> <td><code class=\"parameter-table-variable\">matTag</code></td> <td><p>Tag of an NDMaterial object (previously defined) of which the element is composed</p></td> </tr> <tr class=\"even\"> <td><code class=\"parameter-table-variable\">bulk</code></td> <td><p>Combined undrained bulk modulus B&lt;sub&gt;c&lt;/sub&gt; relating changes in pore pressure and volumetric strain, may be approximated by:</p> <p>B&lt;sub&gt;c&lt;/sub&gt; &amp;asymp; B&lt;sub&gt;f&lt;/sub&gt;/n</p> <p>where B&lt;sub&gt;f&lt;/sub&gt; is the bulk modulus of fluid phase (2.2x10&lt;sup&gt;6&lt;/sup&gt; kPa (or 3.191x10&lt;sup&gt;5&lt;/sup&gt; psi) for water), and n the initial porosity.</p></td> </tr> <tr class=\"odd\"> <td><code class=\"parameter-table-variable\">fmass</code></td> <td><p>Fluid mass density</p></td> </tr> <tr class=\"even\"> <td><p><strong>\\) permX, $permY, \\(permZ</strong></p></td> <td><p>Permeability coefficients in x, y, and z directions respectively.</p></td> </tr> <tr class=\"odd\"> <td><p><strong>\\) bX, $bY, $bZ Optional gravity acceleration components in x, y, and z directions directions respectively (defaults are 0.0) NOTE: This element requires 4 degrees-of-freedom (ndf=4), the 4th degree-of-freedom being pore pressure. The Pore pressure can be recorded at an element node using OpenSees Node Recorder: recorder Node <-file \\(fileName&gt; &lt;-time&gt; &lt;-node (\\) nod1 $nod2 \u2026)> -dof 4 vel The valid queries to a BrickUP element when creating an ElementRecorder are \u2018force\u2019, and \u2018material matNum matArg1 matArg2 \u2026\u2019, where matNum represents the material object at the corresponding integration point. TYPICAL RANGE OF PERMEABILITY COEFFICIENT (cm/s) Gravel Sand Silty Sand Silt Clay >1.0x10-1 1.0x10-3 ~ 1.0x10-1 1.0x10-5 ~ 1.0x10-3 1.0x10-7 ~ 1.0x10-5 <1.0x10-7 Code Developed by: UC San Diego (Dr. Zhaohui Yang) : UC San Diego Soil Model:","title":"Brick u-p"},{"location":"library/modeling/element/u-p/7264-FourNodeQuadUP/","text":"FourNodeQuad u-p Element This command is used to construct an eFourNodeQuadUP element object. A FourNodeQuadUP element is a four-node plane-strain element using bilinear isoparametric formulation. This element is implemented for simulating dynamic response of solid-fluid fully coupled material, based on Biot\u2019s theory of porous medium. Each element node has 3 degrees-of-freedom (DOF): DOF 1 and 2 for solid displacement (u) and DOF 3 for fluid pressure (p). The arguments for the construction of this element are: element quadUP $eleTag $Node1 $Node2 $Node3 $Node4 $thick $matTag $bulk $fmass $PermX \\(PermY &lt;\\) b1=0 $b2=0 \\(t=0&gt;</strong></p></td> </tr> </tbody> </table> <hr /> <table> <tbody> <tr class=\"odd\"> <td><code class=\"parameter-table-variable\">eleTag</code></td> <td><p>unique element object tag</p></td> </tr> <tr class=\"even\"> <td><p><strong>\\) Node1 .. \\(Node4</strong></p></td> <td><p>Four element node (previously defined) numbers in counter-clockwise order around the element</p></td> </tr> <tr class=\"odd\"> <td><code class=\"parameter-table-variable\">thick</code></td> <td><p>Element thickness</p></td> </tr> <tr class=\"even\"> <td><code class=\"parameter-table-variable\">matTag</code></td> <td><p>Tag of an NDMaterial object (previously defined) of which the element is composed</p></td> </tr> <tr class=\"odd\"> <td><code class=\"parameter-table-variable\">bulk</code></td> <td><p>Combined undrained bulk modulus Bc relating changes in pore pressure and volumetric strain, may be approximated by: where Bf is the bulk modulus of fluid phase (2.2x106 kPa for water), and n the initial porosity.</p></td> </tr> <tr class=\"even\"> <td><code class=\"parameter-table-variable\">fmass</code></td> <td><p>Fluid mass density</p></td> </tr> <tr class=\"odd\"> <td><code class=\"parameter-table-variable\">PermX</code></td> <td><p>Permeability coefficient in X direction</p></td> </tr> <tr class=\"even\"> <td><code class=\"parameter-table-variable\">PermY</code></td> <td><p>Permeability coefficient in Y direction</p></td> </tr> <tr class=\"odd\"> <td><p><strong>\\) bX, $bY Optional gravity acceleration components in X and Y directions respectively (defaults are 0.0) t Optional uniform element normal traction, positive in tension (default is 0.0) NOTE: This element requires 3 degrees-of-freedom (ndf=3), the 3rd degree-of-freedom being pore pressure. The Pore pressure can be recorded at an element node using OpenSees Node Recorder: recorder Node <-file \\(fileName&gt; &lt;-time&gt; &lt;-node (\\) nod1 $nod2 \u2026)> -dof 3 vel The valid queries to a quadUP element when creating an ElementRecorder are \u2018force\u2019, and \u2018material matNum matArg1 matArg2 \u2026\u2019, where matNum represents the material object at the corresponding integration point. TYPICAL RANGE OF PERMEABILITY COEFFICIENT (cm/s) Gravel Sand Silty Sand Silt Clay >1.0x10-1 1.0x10-3 ~ 1.0x10-1 1.0x10-5 ~ 1.0x10-3 1.0x10-7 ~ 1.0x10-5 <1.0x10-7 Examples Please visit http://cyclic.ucsd.edu/opensees for examples. References Code Developed by: Zhaohui Yang, UC San Diego","title":"FourNodeQuad u-p Element"},{"location":"library/modeling/element/u-p/7266-Four%20Node%20QuadUP/","text":"Four Node Quad u-p FourNodeQuadUP is a four-node plane-strain element using bilinear isoparametric formulation. This element is implemented for simulating dynamic response of solid-fluid fully coupled material, based on Biot\u2019s theory of porous medium. Each element node has 3 degrees-of-freedom (DOF): DOF 1 and 2 for solid displacement (u) and DOF 3 for fluid pressure (p). Please click here for examples. OUTPUT INTERFACE: Pore pressure can be recorded at an element node using OpenSees Node Recorder: recorder Node <-file \\(fileName&gt; &lt;-time&gt; &lt;-node (\\) nod1 $nod2 \u2026)> -dof 3 vel See OpenSees command manual (McKenna and Fenves 2001) for nodal displacement, velocity, or acceleration recorders. The valid queries to a quadUP element when creating an ElementRecorder are force , stiffness , or material matNum matArg1 matArg2 ... , where matNum represents the material object at the corresponding integration point. element quadUP $eleTag $iNode $jNode $kNode $lNode $thick $matTag $bulk $fmass $hPerm \\(vPerm &lt;\\) b1=0 $b2=0 \\(t=0&gt;</strong></p></td> </tr> </tbody> </table> <table> <tbody> <tr class=\"odd\"> <td><code class=\"parameter-table-variable\">eleTag</code></td> <td><p>A positive integer uniquely identifying the element among all elements</p></td> </tr> <tr class=\"even\"> <td><p><strong>\\) iNode, $jNode, $kNode, $lNode Four element node (previously defined) numbers in counter-clockwise order around the element thick Element thickness matTag Tag of an NDMaterial object (previously defined) of which the element is composed bulk Combined undrained bulk modulus B c relating changes in pore pressure and volumetric strain, may be approximated by: B c &asymp; B f /n where B f is the bulk modulus of fluid phase (2.2x10 6 kPa (or 3.191x10 5 psi) for water), and n the initial porosity. fmass Fluid mass density hPerm , vPerm Permeability coefficient in horizontal and vertical directions respectively. b1 , b2 Optional gravity acceleration components in horizontal and vertical directions respectively (defaults are 0.0) t Optional uniform element normal traction, positive in tension (default is 0.0) TYPICAL RANGE OF PERMEABILITY COEFFICIENT Gravel Sand Silty Sand Silt Clay >1.0x10 -1 cm/s (or 3.94x10 -2 in/s) 1.0x10 -3 cm/s (or 3.94 x10 -4 in/s) ~ 1.0x10 -1 cm/s (or 3.94 x10 -2 in/s) 1.0x10 -5 cm/s (or 3.94 x10 -6 in/s) ~ 1.0x10 -3 cm/s (or 3.94 x10 -4 in/s) 1.0x10 -7 cm/s (or 3.94 x10 -8 in/s) ~ 1.0x10 -5 cm/s (or 3.94 x10 -6 in/s) <1.0x10 -7 cm/s (or 3.94x10 -8 in/s) Code developed by: UC San Diego (Dr. Zhaohui Yang) : UC San Diego Soil Model:","title":"Four Node Quad u-p"},{"location":"library/modeling/element/u-p/7419-NineFourNodeQuadUP/","text":"Nine Four Node Quad u-p Nine_Four_Node_QuadUP is a 9-node quadrilateral plane-strain element. The four corner nodes have 3 degrees-of-freedom (DOF) each: DOF 1 and 2 for solid displacement (u) and DOF 3 for fluid pressure (p). The other five nodes have 2 DOFs each for solid displacement. This element is implemented for simulating dynamic response of solid-fluid fully coupled material, based on Biot\u2019s theory of porous medium. Please click here for examples. OUTPUT INTERFACE: Pore pressure can be recorded at an element node using OpenSees Node Recorder: recorder Node <-file \\(fileName&gt; &lt;-time&gt; &lt;-node (\\) nod1 $nod2 \u2026)> -dof 3 vel See OpenSees command manual (McKenna and Fenves 2001) for nodal displacement, velocity, or acceleration recorders. The valid queries to a Nine_Four_Node_QuadUP element when creating an ElementRecorder are force , stiffness , or material matNum matArg1 matArg2 ... , where matNum represents the material object at the corresponding integration point. element 9_4_QuadUP $eleTag $Node1 $Node2 $Node3 $Node4 $Node5 $Node6 $Node7 $Node8 $Node9 $thick $matTag $bulk $fmass $hPerm \\(vPerm &lt;\\) b1=0 \\(b2=0&gt;</strong></p></td> </tr> </tbody> </table> <figure> <img src=\"/OpenSeesRT/contrib/static/Elem9_4QuadUp.png\" title=\"Elem9_4QuadUp.png\" alt=\"Elem9_4QuadUp.png\" /> <figcaption aria-hidden=\"true\">Elem9_4QuadUp.png</figcaption> </figure> <table> <tbody> <tr class=\"odd\"> <td><code class=\"parameter-table-variable\">eleTag</code></td> <td><p>A positive integer uniquely identifying the element among all elements</p></td> </tr> <tr class=\"even\"> <td><p><strong>\\) Node1,\u2026 \\(Node9</strong></p></td> <td><p>Nine element node (previously defined) numbers (see figure above for order of numbering).</p></td> </tr> <tr class=\"odd\"> <td><code class=\"parameter-table-variable\">thick</code></td> <td><p>Element thickness</p></td> </tr> <tr class=\"even\"> <td><code class=\"parameter-table-variable\">matTag</code></td> <td><p>Tag of an NDMaterial object (previously defined) of which the element is composed</p></td> </tr> <tr class=\"odd\"> <td><code class=\"parameter-table-variable\">bulk</code></td> <td><p>Combined undrained bulk modulus B&lt;sub&gt;c&lt;/sub&gt; relating changes in pore pressure and volumetric strain, may be approximated by:</p> <p>B&lt;sub&gt;c&lt;/sub&gt; &amp;asymp; B&lt;sub&gt;f&lt;/sub&gt;/n</p> <p>where B&lt;sub&gt;f&lt;/sub&gt; is the bulk modulus of fluid phase (2.2x10&lt;sup&gt;6&lt;/sup&gt; kPa (or 3.191x10&lt;sup&gt;5&lt;/sup&gt; psi) for water), and n the initial porosity.</p></td> </tr> <tr class=\"even\"> <td><code class=\"parameter-table-variable\">fmass</code></td> <td><p>Fluid mass density</p></td> </tr> <tr class=\"odd\"> <td><p><strong>\\) hPerm, \\(vPerm</strong></p></td> <td><p>Permeability coefficient in horizontal and vertical directions respectively.</p></td> </tr> <tr class=\"even\"> <td><p><strong>\\) b1, $b2 Optional gravity acceleration components in horizontal and vertical directions respectively (defaults are 0.0) Code developed by: UC San Diego (Dr. Zhaohui Yang) : UC San Diego Soil Model:","title":"Nine Four Node Quad u-p"},{"location":"library/modeling/element/u-p/7612-SSPbrickUP/","text":"SSPbrickUP This command is used to construct a SSPbrickUP element object. element SSPbrickUP $eleTag $iNode $jNode $kNode $lNode $mNode $nNode $pNode $qNode $matTag $fBulk $fDen $k1 $k2 $k3 $void $alpha < $b1 $b2 $b3 > eleTag unique integer tag identifying element object $iNode $jNode $kNode $lNode $mNode $nNode $pNode $qNode the eight nodes defining the element, input in counterclockwise order (same node numbering scheme as for the brickUP Element ) (-ndm 3 -ndf 4) matTag unique integer tag associated with previously-defined nDMaterial object fBulk bulk modulus of the pore fluid fDen mass density of the pore fluid k1 k2 k3 permeability coefficients in global x-, y-, and z-directions, respectively void voids ratio alpha spatial pressure field stabilization parameter (see discussion below for more information) b1 b2 b3 constant body forces in global x-, y-, and z-directions, respectively (optional, default = 0.0) - See Note 3 The SSPbrickUP element is an extension of the SSPbrick Element for use in dynamic 3D analysis of fluid saturated porous media. A mixed displacement-pressure (u-p) formulation is used, based upon the work of Biot as extended by Zienkiewicz and Shiomi (1984). The physical stabilization necessary to allow for reduced integration incorporates an enhanced assumed strain field, resulting in an element which is free from volumetric and shear locking. The elimination of shear locking results in greater coarse mesh accuracy in bending dominated problems, and the elimination of volumetric locking improves accuracy in nearly-incompressible problems. Analysis times are generally faster than corresponding full integration elements. Equal-order interpolation is used for the displacement and pressure fields, thus, the SSPbrickUP element does not inherently pass the inf-sup condition, and is not fully acceptable in the incompressible-impermeable limit (the brickUP Element has the same issue). A stabilizing parameter is employed to permit the use of equal-order interpolation for the SSPbrickUP element. This parameter alpha can be computed as alpha = h^2/(4 (Ks + (4/3) Gs)) where h is the element size, and Ks and Gs are the bulk and shear moduli for the solid phase. The alpha parameter should be a small number. With a properly defined alpha parameter, the SSPbrickUP element can produce comparable results to a higher-order element such as the 20_8_BrickUP Element at a significantly lower computational cost and with a greater ease in mesh generation. NOTES: The SSPbrickUP element will only work in dynamic analysis. For saturated soils, the mass density input into the associated nDMaterial object should be the saturated mass density. When modeling soil, the body forces input into the SSPbrickUP element should be the components of the gravitational vector, not the unit weight. Fixing the pore pressure degree-of-freedom (dof 4) at a node is a drainage boundary condition at which zero pore pressure will be maintained throughout the analysis. Leaving the fourth dof free allows pore pressures to build at that node. Valid queries to the SSPbrickUP element when creating an ElementalRecorder object correspond to those for the nDMaterial object assigned to the element (e.g., \u2018stress\u2019, \u2018strain\u2019). Material response is recorded at the single integration point located in the center of the element. The SSPbrickUP element was designed with intentions of duplicating the functionality of the brickUP Element . If an example is found where the SSPbrickUP element cannot do something that works for the brickUP Element , e.g., material updating, please contact the developers listed below so the bug can be fixed. EXAMPLES: SSPbrickUP element definition with element tag 1, nodes 1, 2, 3, 4, 5, 6, 7, and 8, material tag 1, bulk modulus of water (kPa), mass density of water (Mg/m^3), isotropic permeability of 1e-3, voids ratio of 0.7, alpha parameter of 6e-5, x- and y-directed body forces of zero, and z-directed body force of -9.81 element SSPbrickUP 1 1 2 3 4 5 6 7 8 1 2.2e6 1.0 1.0e-3 1.0e-3 1.0e-3 0.7 6.0e-5 0.0 0.0 -9.81 Elemental recorders for stress and strain when using the SSPbrickUP element (note the difference from the brickUP Element ) recorder Element -eleRange 1 $numElem -time -file stress.out stress recorder Element -eleRange 1 $numElem -time -file strain.out strain Pore pressure recorder for the SSPbrickUP element (pore pressure is the fourth degree-of-freedom) recorder Node -nodeRange 1 $numNode -time -file porePressure.out -dof 4 vel References Zienkiewicz, O.C. and Shiomi, T. (1984). \u201cDynamic behavior of saturated porous media; the generalized Biot formulation and its numerical solution.\u201d International Journal for Numerical Methods in Geomechanics , 8, 71-96. Code Developed by: Chris McGann, Pedro Arduino, & Peter Mackenzie-Helnwein, at the University of Washington","title":"SSPbrickUP"},{"location":"library/modeling/element/u-p/7614-SSPquadUP/","text":"SSPquadUP This command is used to construct a SSPquadUP element object. element SSPquadUP $eleTag $iNode $jNode $kNode $lNode $matTag $thick $fBulk $fDen $k1 $k2 $void $alpha &lt; $b1 $b2 &gt; eleTag unique integer tag identifying element object iNode jNode kNode lNode the four nodes defining the element, input in counterclockwise order (-ndm 2 -ndf 3) matTag unique integer tag associated with previously-defined nDMaterial object thick thickness of the element in out-of-plane direction fBulk bulk modulus of the pore fluid fDen mass density of the pore fluid k1 k2 permeability coefficients in global x- and y-directions, respectively void voids ratio alpha spatial pressure field stabilization parameter (see discussion below for more information) b1 b2 constant body forces in global x- and y-directions, respectively (optional, default = 0.0) - See Note 3 The SSPquadUP element is an extension of the SSPquad Element for use in dynamic plane strain analysis of fluid saturated porous media. A mixed displacement-pressure (u-p) formulation is used, based upon the work of Biot as extended by Zienkiewicz and Shiomi (1984). The physical stabilization necessary to allow for reduced integration incorporates an assumed strain field in which the volumetric dilation and the shear strain associated with the the hourglass modes are zero, resulting in an element which is free from volumetric and shear locking. The elimination of shear locking results in greater coarse mesh accuracy in bending dominated problems, and the elimination of volumetric locking improves accuracy in nearly-incompressible problems. Analysis times are generally faster than corresponding full integration elements. Equal-order interpolation is used for the displacement and pressure fields, thus, the SSPquadUP element does not inherently pass the inf-sup condition, and is not fully acceptable in the incompressible-impermeable limit (the QuadUP Element has the same issue). A stabilizing parameter is employed to permit the use of equal-order interpolation for the SSPquadUP element. This parameter alpha can be computed as alpha = 0.25 (h^2)/(den c^2) where h is the element size, c is the speed of elastic wave propagation in the solid phase, and den is the mass density of the solid phase. The alpha parameter should be a small number. With a properly defined alpha parameter, the SSPquadUP element can produce comparable results to a higher-order element such as the 9_4_QuadUP Element at a significantly lower computational cost and with a greater ease in mesh generation. The full formulation for the SSPquadUP element can be found in McGann et al. (2012) along with several example applications. NOTES: The SSPquadUP element will only work in dynamic analysis. For saturated soils, the mass density input into the associated nDMaterial object should be the saturated mass density. When modeling soil, the body forces input into the SSPquadUP element should be the components of the gravitational vector, not the unit weight. Fixing the pore pressure degree-of-freedom (dof 3) at a node is a drainage boundary condition at which zero pore pressure will be maintained throughout the analysis. Leaving the third dof free allows pore pressures to build at that node. Valid queries to the SSPquadUP element when creating an ElementalRecorder object correspond to those for the nDMaterial object assigned to the element (e.g., \u2018stress\u2019, \u2018strain\u2019). Material response is recorded at the single integration point located in the center of the element. The SSPquadUP element was designed with intentions of duplicating the functionality of the QuadUP Element . If an example is found where the SSPquadUP element cannot do something that works for the QuadUP Element , e.g., material updating, please contact the developers listed below so the bug can be fixed. EXAMPLES: SSPquadUP element definition with element tag 1, nodes 1, 2, 3, and 4, material tag 1, unit thickness, bulk modulus of water (kPa), mass density of water (Mg/m^3), horizontal and vertical permeabilities of 1e-3, voids ratio of 0.7, alpha parameter of 6e-5, horizontal body force of zero, and vertical body force of -9.81 element SSPquadUP 1 1 2 3 4 1 1.0 2.2e6 1.0 1.0e-3 1.0e-3 0.7 6.0e-5 0.0 -9.81 Elemental recorders for stress and strain when using the SSPquadUP element (note the difference from the QuadUP Element ) recorder Element -eleRange 1 $numElem -time -file stress.out stress recorder Element -eleRange 1 $numElem -time -file strain.out strain Pore pressure recorder for the SSPquadUP element (pore pressure is the third degree-of-freedom) recorder Node -nodeRange 1 $numNode -time -file porePressure.out -dof 3 vel References McGann, C. R., Arduino, P., and Mackenzie-Helnwein, P. (2012). \u201cStabilized single-point 4-node quadrilateral element for dynamic analysis of fluid saturated porous media.\u201d Acta Geotechnica , 7(4), 297-311. Zienkiewicz, O.C. and Shiomi, T. (1984). \u201cDynamic behavior of saturated porous media; the generalized Biot formulation and its numerical solution.\u201d International Journal for Numerical Methods in Geomechanics , 8, 71-96. Code Developed by: Chris McGann, Pedro Arduino, & Peter Mackenzie-Helnwein, at the University of Washington","title":"SSPquadUP"},{"location":"library/modeling/element/u-p/7720-TwentyEightNodeBrickUP/","text":"Twenty Eight Node Brick u-p Twenty_Eight_Node_BrickUP is a 20-node hexahedral isoparametric element. The eight corner nodes have 4 degrees-of-freedom (DOF) each: DOFs 1 to 3 for solid displacement (u) and DOF 4 for fluid pressure (p). The other nodes have 3 DOFs each for solid displacement. This element is implemented for simulating dynamic response of solid-fluid fully coupled material, based on Biot\u2019s theory of porous medium. Please click here for examples. OUTPUT INTERFACE: Pore pressure can be recorded at an element node using OpenSees Node Recorder: recorder Node < -file $fileName > < -time > < -node ( $nod1 $nod2 \u2026) > -dof 3 vel See OpenSees command manual (McKenna and Fenves 2001) for nodal displacement, velocity, or acceleration recorders. The valid queries to a Twenty_Eight_Node_BrickUP element when creating an ElementRecorder are 'force' , 'stiffness' , or 'material matNum matArg1 matArg2 ...' , where matNum represents the material object at the corresponding integration point. element 20_8_BrickUP $eleTag $Node1 \u2026 $Node20 $matTag $bulk $fmass $PermX $PermY \\(PermZ &lt;\\) bX=0 $bY=0 \\(bZ=0&gt;</strong></p></td> </tr> </tbody> </table> <figure> <img src=\"/OpenSeesRT/contrib/static/Elem20_8.png\" title=\"Elem20_8.png\" alt=\"Elem20_8.png\" /> <figcaption aria-hidden=\"true\">Elem20_8.png</figcaption> </figure> <table> <tbody> <tr class=\"odd\"> <td><code class=\"parameter-table-variable\">eleTag</code></td> <td><p>A positive integer uniquely identifying the element among all elements</p></td> </tr> <tr class=\"even\"> <td><p><strong>\\) Node1,\u2026 \\(Node20</strong></p></td> <td><p>20 element node (previously defined) numbers (see figure above for order of numbering).</p></td> </tr> <tr class=\"odd\"> <td><code class=\"parameter-table-variable\">matTag</code></td> <td><p>Tag of an NDMaterial object (previously defined) of which the element is composed</p></td> </tr> <tr class=\"even\"> <td><code class=\"parameter-table-variable\">bulk</code></td> <td><p>Combined undrained bulk modulus B&lt;sub&gt;c&lt;/sub&gt; relating changes in pore pressure and volumetric strain, may be approximated by:</p> <p>B&lt;sub&gt;c&lt;/sub&gt; &amp;asymp; B&lt;sub&gt;f&lt;/sub&gt;/n</p> <p>where B&lt;sub&gt;f&lt;/sub&gt; is the bulk modulus of fluid phase (2.2x10&lt;sup&gt;6&lt;/sup&gt; kPa (or 3.191x10&lt;sup&gt;5&lt;/sup&gt; psi) for water), and n the initial porosity.</p></td> </tr> <tr class=\"odd\"> <td><code class=\"parameter-table-variable\">fmass</code></td> <td><p>Fluid mass density</p></td> </tr> <tr class=\"even\"> <td><p><strong>\\) permX, $permY, \\(permZ</strong></p></td> <td><p>Permeability coefficients in x, y, and z directions respectively.</p></td> </tr> <tr class=\"odd\"> <td><p><strong>\\) bX, $bY, $bZ Optional gravity acceleration components in x, y, and z directions directions respectively (defaults are 0.0) Code Developed by: UC San Diego (Dr. Zhaohui Yang) :","title":"Twenty Eight Node Brick u-p"},{"location":"library/modeling/element/walls/376-MVLEM%20-%20Multiple-Vertical-Line-Element-Model%20for%20RC%20Walls/","text":"MVLEM element MVLEM $eleTag $Dens $iNode $jNode $m $c -thick { Thicknesses } \\ - width { Widths } -rho { Reinforcing_ratios } \\ -matConcrete { Concrete_tags } -matSteel { Steel_tags } \\ -matShear { Shear_tag } eleTag Unique element object tag Dens Wall density iNode jNode End node tags m Number of element macro-fibers c Location of center of rotation from the iNode, c = 0.4 (recommended) {Thicknesses} Array of m macro-fiber thicknesses {Widths} Array of m macro-fiber widths {Reinforcing_ratios} Array of m reinforcing ratios corresponding to macro-fibers; for each fiber: rho<sub class=\u201csubscript\u201d>i</sub> = A<sub class=\u201csubscript\u201d>s,i</sub>/A<sub class=\u201csubscript\u201d>gross,i</sub> (1 < i < m) {Concrete _tags} Array of m uniaxialMaterial tags for concrete {Steel_tags} Array of m uniaxialMaterial tags for steel {Shear_tag} Tag of uniaxialMaterial for shear material Element Recorders: The following recorders are available with the MVLEM element: globalForce Element global forces Curvature Element curvature Shear_Force_Deformation Element shear force-deformation relationship Fiber_Strain Vertical strains in m fibers along the cross-section Fiber_Stress_Concrete Vertical concrete stresses in m fibers along the cross-section Fiber_Stress_Steel Vertical steel stresses in m fibers along the cross-section The MVLEM element command is used to generate a two-dimensional Multiple-Vertical-Line-Element-Model (MVLEM; Vulcano et al., 1988; Orakcal et al., 2004, Kolozvari et al., 2015) for simulation of flexure-dominated RC wall behavior. A single model element incorporates six global degrees of freedom, three of each located at the center of rigid top and bottom beams, as illustrated in Figure 1a. The axial/flexural response of the MVLEM is simulated by a series of uniaxial elements (or macro-fibers) connected to the rigid beams at the top and bottom (e.g., floor) levels, whereas the shear response is described by a shear spring located at height ch from the bottom of the wall element (Figure 1a). Shear and flexural responses of the model element are uncoupled. The relative rotation between top and bottom faces of the wall element occurs about the point located on the central axis of the element at height ch (Figure 1b). Rotations and resulting transverse displacements are calculated based on the wall curvature, derived from section and material properties, corresponding to the bending moment at height ch of each element (Figure 1b). A value of c =0.4 was recommended by Vulcano et al. (1988) based on comparison of the model response with experimental results. Source: /usr/local/cvs/OpenSees/SRC/element/MVLEM/ Figure 1. a) MVLEM Element, b) MVLEM Rotations and Displacements Input Format: Examples Element MVLEM 1 0.0 1 2 8 0.4 -thick 4 4 4 4 4 4 4 4 \\ - width 7.5 1.5 7.5 7.5 7.5 7.5 1.5 7.5 \\ -rho 0.0293 0.0 0.0033 0.0033 0.0033 0.0033 0.0 0.0293 \\ -matConcrete 3 4 4 4 4 4 4 3 -matSteel 1 2 2 2 2 2 2 1 \\ -matShear 5 Recorder Element -file MVLEM_Fgl.out -time -ele 1 globalForce Recorder Element -file MVLEM_FiberStrain.out -time -ele 1 Fiber_Strain Example 1. Simulation of Flexural Behavior of a Slender RC Wall Specimen under Cyclic Loading using MVLEM Model Application of the MVLEM element for simulation of flexural response of RC walls is illustrated using the RC wall specimen RW2 tested by Thomsen and Wallace (1995). The specimen was tested under constant axial load and cyclic lateral displacement history applied at the top of the wall. Input parameters and selected output results are presented in the following sections. E1.1. Model Calibration Specimen RW2 was 144 in tall, 48 in wide and 4 in thick, resulting in aspect ratio of 3.0 (slender wall). Figure E1.1 displays model discretization of the RW2 cross-section, with eight uniaxial elements defined along the length of the wall. The analytical model was discretized along wall height with 16 MVLEM elements with element heights in agreement with instrumentation provided on the specimen to allow consistent strain comparisons between model and experimental results. The material models were calibrated to match as tested material properties. Details about model calibration and experimental validation are provided by Orakcal (2004), and Orakcal and Wallace (2004). Figure E1.1. Geometry and Discretization of Wall Specimen RW2 E1.2. Input Files Input files (. tcl ) used to build the wall model and perform displacement-controlled analysis can be found in Example 1. MVLEM.zip : MVLEM_RW2.tcl - model generation and definition of analysis parameters gravity.tcl - application of gravity load dispControl.tcl - application of lateral displacement history (run this file) LibAnalysisStaticParameters.tcl - definition of static analysis parameters LibGeneratePeaks.tcl - generation of displacement history E1.3. Analysis Results Flexural load-deformation responses predicted by the MVLEM model and measured during the experiment are shown on Figure E1.2. Figure E1.2. Experimental and Analytical Load versus Flexural Deformation Relationships Figure E1.3 illustrates the sensitivity of analytical predictions obtained using the MVLEM to the optional gap closure parameter of the ConcreteCM model ( -GapClose $gap ), which allows consideration of different intensities of gradual gap closure in concrete (Figure E1.3a), as well as selection of the steel material model SteelMPF versus Steel02 (Figure E1.3b). It can be observed from Figure E1.3a that pinching characteristics of the response are slightly more pronounced when less gradual gap closure versus more gradual gap closure (i.e., gap =0 versus gap =1) is adopted. Figure E1.3b illustrates that the wall yield capacity as well as pinching characteristics of the behavior predicted by the MVLEM vary slightly when SteelMPF versus Steel02 is used. Figure E1.3. Sensitivity of Analytical Results to Material Modeling Parameters of: a) Concrete, and b) Steel For illustration purposes, additional response predictions obtained using the MVLEM model are presented in Figure E1.4 and Figure E1.5, where analytically-predicted strain histories at the outermost and central wall fibers, and concrete and steel strain-stress relationships at the outermost fiber are presented, respectively. Responses are obtained using MVLEM recorders Fiber_Strain , Fiber_Stress_Concrete , and Fiber_Stress_Steel . Figure E1.4. Analytical Strain Histories at Outermost and Central Wall Fibers Figure E1.5. Analytically Predicted Stress-Strain Relationships at Wall Outermost Fiber: a) Concrete, b) Steel References Kolozvari K., Orakcal K., and Wallace J. W. (2015). \u201cShear-Flexure Interaction Modeling of reinforced Concrete Structural Walls and Columns under Reversed Cyclic Loading\u201d, Pacific Earthquake Engineering Research Center, University of California, Berkeley, PEER Report No. 2015/12 Orakcal K. (2004). \u201cNonlinear Modeling and Analysis of Slender Reinforced Concrete Walls\u201d, PhD Dissertation, Department of Civil and Environmental Engineering, University of California, Los Angeles. Orakcal K., Conte J.P., and Wallace J.W. (2004). \u201cFlexural Modeling of Reinforced Concrete Structural Walls - Model Attributes\u201d, ACI Structural Journal, V. 101, No. 5, pp 688-698. Orakcal K. and Wallace J.W. (2006). \u201cFlexural Modeling of Reinforced Concrete Structural Walls - Experimental Verification\u201d, ACI Structural Journal, V. 103, No. 2, pp. 196-206. Vulcano A., Bertero V.V., and Colotti V. (1988). \u201cAnalytical Modeling of RC Structural Walls\u201d, Proceedings, 9th World Conference on Earthquake Engineering, V. 6, Tokyo-Kyoto, Japan, pp. 41-46. Code developed by: Kristijan Kolozvari , California State University, Fullerton Kutay Orakcal , Bogazici University, Istanbul, Turkey John Wallace , Univeristy of California, Los Angeles","title":"MVLEM"},{"location":"library/modeling/element/walls/611-SFI%20MVLEM%20-%20Cyclic%20Shear-Flexure%20Interaction%20Model%20for%20RC%20Walls/","text":"SFI MVLEM - Cyclic Shear-Flexure Interaction Model for RC Walls The SFI_MVLEM command is used to construct a Shear-Flexure Interaction Multiple-Vertical-Line-Element Model (SFI-MVLEM, Kolozvari et al., 2015a, b, c), which captures interaction between axial/flexural and shear behavior of RC structural walls and columns under cyclic loading. The SFI_MVLEM element (Figure 1) incorporates 2-D RC panel behavior described by the Fixed-Strut-Angle-Model (nDMaterial FSAM ; Ulugtekin, 2010; Orakcal et al., 2012), into a 2-D macroscopic fiber-based model (MVLEM). The interaction between axial and shear behavior is captured at each RC panel (macro-fiber) level, which further incorporates interaction between shear and flexural behavior at the SFI_MVLEM element level. Source: /usr/local/cvs/OpenSees/SRC/element/SFI_MVLEM/ Figure 1. a) SFI_MVLEM Element, b) RC Panel Element (nDMaterial FSAM) Input Format: Element SFI_MVLEM $eleTag $iNode $jNode $m $c -thick { Thicknesses } -width { Widths } -mat { Material_tags } eleTag Unique element object tag iNode jNode End node tags m Number of element macro-fibers c Location of center of rotation with from the iNode, c = 0.4 (recommended) {Thicknesses} Array of m macro-fiber thicknesses {Widths} Array of m macro-fiber widths {Material_tags} Array of m macro-fiber nDMaterial <sup class=\u201csuperscript\u201d>1</sup> tags <sup class=\u201csuperscript\u201d>1</sup> SFI_MVLEM element shall be used with nDMaterial FSAM , which is a 2-D plane-stress constitutive relationship representing reinforced concrete panel behavior. Element Recorders: The following recorders are available with the SFI_MVLEM element: globalForce Element global forces Curvature Element curvature ShearDef Element shear deformation RCPanel $fibTag \\(Response</strong></p></td> <td><p>Returns RC panel (macro-fiber) <em>\\) Response for a \\(fibTag</em>-th panel (1 \u2264 <em>fibTag</em> \u2264 m). For available <em>\\) Response -s refer to nDMaterial FSAM . Examples: element SFI_MVLEM 1 1 2 5 0.4 -thick 6 6 6 6 6 -width 9 10 10 10 9 -mat 7 6 6 6 7 recorder Element -file SFI_MVLEM_Fgl.out -time -ele 1 2 3 globalForce recorder Element -file SFI_MVLEM_panel_strain.out -time -ele 1 RCPanel 1 panel_strain Example 1. Simulation of Shear-Flexural Behavior of a Medium-Rise RC Wall Specimen under Cyclic Loading using the SFI-MVLEM Model The behavior of RC wall specimen RW-A15-P10-S78 (Tran and Wallace, 2012) tested under constant axial load and cyclic lateral displacement history applied at the top of the wall is predicted using the SFI_MVLEM model. The input parameters and output results are presented in the following sections. E1.1. Model Calibration Basic properties of the specimen with model discretization are shown on Figure E1.1. Detailed information about the test specimen can be found in paper by Tran and Wallace (2012), whereas details of model calibration are provided by Kolozvari (2013) and Kolozvari et al. (2015b). Figure E1.1. Model discretization: a) Plan view, b) Cross-section E1.2. Input Files Input files (. tcl ) used to build the wall model and perform displacement-controlled analysis can be found in Example 1. SFI_MVLEM.zip : SFI_MVLEM_SP4.tcl - model generation and definition of analysis parameters gravity.tcl - application of gravity load dispControl.tcl - application of lateral displacement history (run this file) LibAnalysisStaticParameters.tcl - definition of static analysis parameters LibGeneratePeaks.tcl - generation of displacement history E1.3. Analysis Results The following sub-section presents analytical results obtained for the test specimen described above, using the input files provided. The results include global wall responses (compared against experimental results), model element responses, and individual RC panel (macro-fiber) responses. E1.3.1. Global Wall Responses Analytical and experimental lateral load versus top total displacement responses and wall cracking patterns are presented on Figure E1.2, whereas lateral load versus flexural and shear deformations are shown on Figure E1.3. Total top displacement is obtained from the top node, shear force is recorded using globalForce element recorder, total shear displacement is obtained using shearDef element recorder and crack orientations are obtained using RCPanel and cracking_angles element recorders. Figure E1.2. Wall responses: a) Load versus Top Displacement Behavior, b) Cracking Patterns Figure E1.3. Load versus Deformation Behavior for: a) Flexure, b) Shear E1.3.2. Model Element Responses Figure E1.4 plots lateral load versus total, flexural and shear displacement responses, as well as moment versus curvature relationship, obtained from the analysis for the bottom wall model element. Responses are recorded using globalForce , ShearDef , and Curvature element recorders. Figure E1.4. Model Element Responses: a) Shear Force vs. Total Deformation, b) Shear force vs. Flexural Deformation, c) Shear Force vs. Shear Deformation, d) Moment vs. Curvature E1.3.3. Reinforced Concrete Panel Responses Various stress-strain responses for an individual boundary panel element (outermost macro-fiber) within the bottommost wall element are presented, including total (resultant) stress vs. strain relationships in the xy plane (Figure E1.5; element RCPanel recorders: panel_strain and panel_stress ), stress-strain relationships along the two concrete struts (Figure E1.6; element RCPanel recorders: strain_stress_concrete1 and strain_stress_concrete2 ), and stress-strain relationship along horizontal and vertical steel reinforcement (Figure E1.7; element RCPanel recorders: strain_stress_steelX and strain_stress_steelY ). Figure E1.5. Panel Total Stress vs. Strain Responses: a) Axial-Horizontal, b) Axial-Vertical, c) Shear Figure E1.6. Predicted Stress-Strain Behavior for Concrete: a) Strut 1, b) Strut 2 Figure E1.7. Predicted Stress-Strain Behavior for Steel: a) Horizontal (X), b) Vertical (Y) Example 2. Dynamic Analysis of a Coupled Wall-Frame System This example illustrates application of the SFI_MVLEM wall model for nonlinear dynamic analysis. Analytical model of a coupled wall-frame building system was generated and analyzed under a single ground motion time-history. Brief description of the building characteristics and the analytical model are provided in the following sections. E2.1. Building Description Plan and elevation/section views of the considered building are shown in Figure E2.1. The building footprint is 140 ft \u00d7 60 ft , with 20 ft long spans. Analysis is conducted for shaking in the transverse direction only, where the lateral-force-resisting elements include two identical one-bay frames located at the building perimeter (axis 1 and 8, Figure E2.1a) and two identical walls located near the center of the building (axis 4 and 5, Figure E2.1a). Structural design is performed for a residential building (I=1.0, risk category I, design category D; ASCE 7-10 S11.5 and S11.6) for uniformly distributed dead load of 150 psf and live load of 40 psf (ASCE 7-10, Table 4-1), as well as the earthquake lateral loading obtained using Equivalent Lateral Force Procedure of ASCE 7-10 (S12.8). The frame was designed to resist 25% of the earthquake lateral load (Dual System, ASCE 7-10). Concrete compressive strength of f\u2019<sub class=\u201csubscript\u201d>c</sub> = 5,000 psi and reinforcing steel (both longitudinal and transversal reinforcement) with yield strength f<sub class=\u201csubscript\u201d>y</sub> = 60,000 psi were used. Based on the structural design, cross-section dimensions of 12 in \u00d7 240 in (walls), 18 in \u00d7 32 in (beams; width \u00d7 depth), and 28 in \u00d7 28 in (columns) were adopted. Cross-sections of structural elements with the reinforcement detailing are provided in Figure E2.2. Figure E2.1. Building Views: a) Plan View, b) Frame Elevation, c) Wall Elevation Figure E2.2. Member Cross-Sections: a) Walls, b) Columns, c) Beams E2.2. Analytical Model Description Due to building symmetry and applied direction of the ground motion, a two-dimensional model consisting of one frame and one wall (Figure E2.3) is used to simulate the building behavior. The gravity system is not included in the model (ASCE 7-10) and the assumption of a rigid diaphragm is implemented within each story level. Tributary mass is assigned at the element nodes at each story level at locations of axes of the vertical elements (i.e., wall and columns), whereas gravity load (dead and live) was assigned according to corresponding tributary areas as either nodal load at wall-element nodes of each story or uniformly distributed load along the beams of the frame. As show on Figure E2.3, the RC wall is modeled using ten equal-length SFI_MVLEM elements along the wall height (i.e., two elements per story height). Wall discretization in horizontal direction was performed using six macro-fibers to represent the wall cross section, where two outer macro-fibers were used to represent the confined wall boundaries and the remaining four represent the unconfined wall web. Material models for steel and concrete are calibrated based on adopted material strengths to represent the behavior of confined and unconfined concrete and reinforcing steel. RC frame elements (i.e., beams and columns) are modeled using elastic beam-column elements by assuming the location of plastic hinges at the faces of beam-column joints (Figure E2.3a), the behavior of which was simulated using zero-length elements at locations of hinges and the elasto-plastic moment-rotation hysteretic model (Modified Ibarra Krawinkler Deterioration Model; Lignos and Krawinkler, 2011), with modeling parameters adopted according to beam and column flexural capacities and the ASCE 41 backbone relationships (Figure E2.3b). The reduction of flexural stiffness after cracking was considered using stiffness modifiers for elastic portions of beam and column elements according to ASCE 41 (Table 6.5). E2.3. Input Files Input files (. tcl ) used to build the model of a 5-story wall-frame system and perform gravity and dynamic analysis can be found in Example 2. SFI_MVLEM.zip : 5storyWF_SFI.tcl - model generation, definition of analysis parameters, gravity analysis Modal.tcl - modal analysis Dynamic.tcl - application of earthquake acceleration time-history (run this file) MCEScaledEQ1X.acc - earthquake acceleration time history file DisplayModel2D.tcl - display 2D model DisplayPlane.tcl - display plane Figure E2.3. Analytical Model of Building System: a) Modeling Approach, b) Plastic Hinge Model E2.4. Dynamic Analysis Results Results obtained using analytical model of the building described in the previous section are presented, including modal properties of the structure, wall global (i.e., lateral deformations, drifts, shear force, moments) and local (i.e., vertical strains and rotations) responses. Responses of the structural elements comprising the RC frame are not considered. E2.4.1. Dynamic Properties First two building fundamental periods and mode shapes are presented in Figure E2.4. Figure E2.4. Mode Shapes: a) 1st Mode, b) 2nd Mode E2.4.2. Time-history Responses Time histories of ground motion acceleration, wall top nodal displacement, and wall base shear force (bottom wall node reaction) are presented in Figure 2.5; the responses are obtained using globalForce and Reactions node recorders. Figure E2.5. Global Building Responses E2.4.3. Maximum Global Responses over the Wall Height Maximum envelopes of wall lateral displacements and interstory drifts, and shear force and bending moment are presented in Figure E2.6 and Figure E2.7, respectively. Wall lateral displacements and drifts are obtained using corresponding node recorders, disp and drift , whereas shear force and bending moments over the wall height are recorded using element recorders globalForce . Figure E2.6. Maximum Deformation Responses: a) Lateral Displacements, b) Interstory Drifts Figure E2.7. Maximum Shear Force and Bending Moment over Wall Height E2.4.4. Bottom Wall Element Responses Figure E2.8 plots the responses of the bottom wall element, including lateral load versus total, flexural and shear displacement, and moment versus curvature relationship obtained from the dynamic analysis. Note that wall element shear displacement and curvature time-histories are obtained using SFI_MVLEM element recorders ShearDef and Curvature , respectively, whereas shear force and bending moment are recorded using element recorder globalForce . Figure E2.8. Model Element Responses: a) Lateral Load vs. Displacement, b) Lateral Load vs. Flexural Deformation, c) Lateral Load vs. Shear Deformation, d) Moment vs. Curvature E2.4.5. Single RC Panel Responses Analytically-predicted strain-stress responses of a single RC panel (macro-fiber) located at the left wall boundary of the bottom wall element are presented. Global panel stress-strain relationships presented on Figure E2.9 are obtained using element recorder RCPanel with commands panel_strain and panel_stress ; the uniaxial behavior of concrete along the two concrete struts presented on Figure E2.10 are recorded using strain_stress_concrete1 and strain_stress_concrete2 commands; uniaxial stress-strain behavior of horizontal and vertical reinforcing steel presented on Figure E2.11 are obtained using strain_stress_steelX and strain_stress_steelY commands. Other panel responses described in Section 3 could be plotted in a similar manner. Figure E2.9. Panel Total Stress vs. Strain Responses: a) Axial-Horizontal, b) Axial-Vertical, c) Shear Figure E2.10. Predicted Stress-Strain Behavior for Concrete: a) Strut 1, b) Strut 2 Figure E2.11. Predicted Stress-Strain Behavior for Steel: a) Horizontal (X), b) Vertical (Y) Finally, vertical profiles of maximum vertical strains (Figure E2.12a) are obtained using element recorder with RCPanel and panel_strain recorder commands, whereas maximum wall rotations over the wall height (Figure E2.12b) are derived from element Curvature recorder. Similarly, the distribution of other wall responses could be plotted over the wall height (e.g., shear deformations, etc.). Figure E2.12. Local Responses - Vertical Profiles of Maximum: a) Vertical Strains, b) Rotations References Kolozvari K., Orakcal K., and Wallace J. W. (2015a). \u201cShear-Flexure Interaction Modeling of reinforced Concrete Structural Walls and Columns under Reversed Cyclic Loading\u201d, Pacific Earthquake Engineering Research Center, University of California, Berkeley, PEER Report No. 2015/12 Kolozvari K., Orakcal K., and Wallace J. W. (2015b). \u201dModeling of Cyclic Shear-Flexure Interaction in Reinforced Concrete Structural Walls. I: Theory\u201d, ASCE Journal of Structural Engineering, 141(5), 04014135 doi Kolozvari K., Tran T., Orakcal K., and Wallace, J.W. (2015c). \u201cModeling of Cyclic Shear-Flexure Interaction in Reinforced Concrete Structural Walls. II: Experimental Validation\u201d, ASCE Journal of Structural Engineering, 141(5), 04014136 doi Kolozvari K. (2013). \u201cAnalytical Modeling of Cyclic Shear-Flexure Interaction in Reinforced Concrete Structural Walls\u201d, PhD Dissertation, University of California, Los Angeles. Code developed by: Kristijan Kolozvari , California State University, Fullerton Kutay Orakcal<span style=\u201ccolor:black\u201d>, Bogazici University, Istanbul, Turkey John Wallace<span style=\u201ccolor:black\u201d>, Univeristy of California, Los Angeles","title":"SFI MVLEM - Cyclic Shear-Flexure Interaction Model for RC Walls"},{"location":"library/modeling/element/zero_length/6109-CoupledZeroLength/","text":"CoupledZeroLength This command is used to construct a CoupledZeroLength element object, which is defined by two nodes at the same location. The nodes are connected a single UniaxialMaterial element to represent the force-deformation relationship for the element in a 2d plane. Unlike a ZeroLength element which can only provide a rectangular force interaction surface in a 2d plane, this element provides a circular force interaction surface. element CoupledZeroLength $eleTag $iNode $jNode $dirn1 $dirn2 $matTag < $rFlag > eleTag unique element object tag iNode jNode end nodes matTag tags associated with previously-defined UniaxialMaterial dir1 dir2 the two directions, 1 through ndof. rFlag optional, default = 0 rFlag = 0 NO RAYLEIGH DAMPING (default) rFlag = 1 include rayleigh damping NOTE: The valid queries to a zero-length element when creating an ElementRecorder object are \u2018force,\u2019 and \u2018material matArg1 matArg2 \u2026\u2019 Examples truss tag 1 between nodes 2 and 4 acting in directions 5 and 6 with material 7: element CoupledZeroLength 1 2 4 5 6 7 ; Theory If change in element end displacements for 2 dof of interest are d1 and d2: the deformation (strain in uniaxial material) of the material is set to be: \\[\\epsilon = sqrt( \\delta_1^2 + \\delta_2^2)\\] and if resulting force (stress from uniaxial material) is Sigma then the force computed for the two directions 1 and 2 are: \\[F_1 = (\\Sigma * \\delta 1) / \\epsilon\\] \\[F_2 = (\\Sigma * \\delta 2) / \\epsilon\\] NOTE: in case where \\(\\epsilon = 0.0\\) , the forces are computed using \\(\\Sigma\\) and the last committed set of displacements that were not zero. Code developed by: fmk","title":"CoupledZeroLength"},{"location":"library/modeling/element/zero_length/6759-ZeroLengthContactNTS2D/","text":"ZeroLengthContactNTS2D This command is used to construct a ZeroLengthContactNTS2D element. This is a Node-To-Segment (NTS) frictional contact element used in two dimensional analysis for contact between elements with 2 DOF nodes. element zeroLengtContactNTS2D $eleTag -cNdNum $cNdNum -rNdNum $rNdNum -Nodes $Nodes $Kn $kt $phi eleTag unique element object tag cNdNum Number of Constrained Nodes rNdNum Number of Retained nodes $Nodes \u2026 Constrained and Retained node tags respectively Kn Penalty in normal direction Kt Penalty in tangential direction phi Friction angle in degrees NOTES: The contact element is node-to-segment (NTS) contact. The relation follows Mohr-Coulomb frictional law: <math>T = N tan()</math>, where \\(T\\) is the tangential force, \\(N\\) is normal force across the interface and <math>,!</math> is friction angle. For 2D contact, constrained nodes and retained nodes must be 2 DOF and notice that the constrained and retained nodes must be entered in counterclockwise order. The resulting tangent from the contact element is non-symmetric. Switch to the non-symmetric matrix solver if convergence problem is experienced. As opposed to node-to-node contact, predefined normal vector for node-to-segment (NTS) element is not required because contact normal will be calculated automatically at each step. contact element is implemented to handle large deformations. EXAMPLE: zeroLengthContactNTS2Drc.png element zeroLengthContactNTS2D 1 -cNdNum 6 -rNdNum 6 - Nodes 5 10 12 3 9 11 1 4 2 8 7 6 1e8 1e8 16 Example 1: This example simply shows the two quadrilateral elements in normal contact. The top element is in normal downward uniform force. The Tcl script of this example can be found here . ZeroLengthContactNTS2D_fig2.jpg Example 2: This example shows two cantilever beams in contact. The beams were modeled using four-node quadrilateral elements and the end of top beam was subjected to a linearly increasing displacement. The Tcl scripts for this example can be found here . zeroLengthContactNTS2D_fig3.jpg The following Figure shows the deflections of the two beams. zeroLengthContactNTS2D_fig4.jpg References P. Wriggers, V.T. Vu and E. Stein, Finite-element formulation of large deformation impact-contact problems with friction, Comput. Struct. 37 (1990), pp. 319-331. Peter Wriggers. Computational Contact Mechanics. John Wiley & Sons Ltd. Chichester, 2002. Code Developed by: Roozbeh G. Mikola , UC Berkeley and N. Sitar , UC Berkeley","title":"ZeroLengthContactNTS2D"},{"location":"library/modeling/element/zero_length/6762-ZeroLengthContact%20Element/","text":"ZeroLengthContact This command is used to construct a zeroLengthContact2D element or a zeroLengthContact3D element, which are Node-to-node frictional contact element used in two dimensional analysis and three dimensional analysis: 2d analysis: element zeroLengthContact2D $eleTag $cNode $rNode $Kn $Kt $mu -normal $Nx $Ny 3d analysis: element zeroLengthContact3D $eleTag $cNode $rNode $Kn $Kt $mu $c $dir eleTag unique element object tag cNode Constrained node tag rNode Retained node tag Kn Penalty in normal direction Kt Penalty in tangential direction mu friction coefficient c cohesion (not available in 2D) dir Direction flag of the contact plane (3D), it can be: 1 Out normal of the retained plane pointing to +X direction 2 Out normal of the retained plane pointing to +Y direction 3 Out normal of the retained plane pointing to +Z direction ZeroLengthContact2.png NOTES: The contact element is node-to-node contact. Contact occurs between two contact nodes when they come close. The relation follows Mohr-coulomb law: T = $mu * N + $c, where T is tangential force and N is normal force across the interface. $mu is friction coefficient and $c is total cohesion (summed over the effective area of contact nodes) The contact node pair in node-to-node contact element is termed \u201cretained node\u201d and \u201cconstrained node\u201d, respectively. Retained/constrained plane is the contact plane which the retrained/constrained node belongs to. The discrimination is made solely for contact detection purpose. User need to specify the corresponding out normal of the master plane, and this direction is assumed to be unchanged during analysis. For simplicity, 3D contact only allows 3 options to specify the directions of the contact plane. The convention is: out normal of master plane always points to positive axial direction (+X or +Y, or +Z) For 2D contact, constrained nodes and retained nodes must be 2 DOF. For 3D contact, constrained nodes and retained nodes must be 3 DOF. The resulted tangent from the contact element is NON-SYMMETRIC . Switch to non-symmetric matrix solver. Examples Gang Wang to provide a smart example! References Code developed by: Gang Wang, Geomatrix","title":"ZeroLengthContact"},{"location":"library/modeling/element/zero_length/6763-ZeroLengthImpact3D/","text":"ZeroLengthImpact3D This command constructs a node-to-node zero-length contact element in 3D space to simulate the impact/pounding and friction phenomena. element zeroLengthImpact3D $tag $cNode $rNode $direction $initGap $frictionRatio $Kt $Kn $Kn2 $Delta_y $cohesion tag Unique element object tag cNode Constrained node tag rNode Retained node tag direction 1 if out-normal vector of master plane points to +X direction 2 if out-normal vector of master plane points to +Y direction 3 if out-normal vector of master plane points to +Z direction initGap Initial gap between retained plane and constrained plane frictionRatio Friction ratio in two tangential directions (parallel to retained and constrained planes) Kt Penalty in two tangential directions Kn Penalty in normal direction (normal to retained and constrained planes) Kn2 Penalty in normal direction after yielding based on Hertz impact model Delta_y Yield deformation based on Hertz impact model cohesion Cohesion, if no cohesion, it is zero NOTES: This element has been developed on top of the \u201czeroLengthContact3D\u201d. All the notes available in \u201czeroLengthContact3D\u201d wiki page would apply to this element as well. It includes the definition of retained and constrained nodes, the number of degrees of freedom in the domain, etc. Regarding the number of degrees of freedom (DOF), the end nodes of this element should be defined in 3DOF domain. For getting information on how to use 3DOF and 6DOF domain together, please refer to OpenSees documentation and forums or see the zip file provided in the EXAMPLES section below. This element adds the capabilities of \u201cImpactMaterial\u201d to \u201czeroLengthContact3D.\u201d For simulating a surface-to-surface contact, the element can be defined for connecting the nodes on constrained surface to the nodes on retained surface. The element was found to be fast-converging and eliminating the need for extra elements and nodes in the modeling process. Examples The following zip file contains an example script and the corresponding input cyclic displacement: The following zip file contains an example script on how to use 6DOF domain and 3DOF domain together: <!\u2013 SAMPLE COMMAND (example scripts are available at bottom of this page): </p> <p> \u2013> References zeroLengthContact3D , ImpactMaterial Code developed by: Dr. Arash E. Zaghi and Majid Cashany at University of Connecticut (UConn) APPLICATIONS: This element has been employed to simulate the bridge hinges including superstructure-abutment interaction at the University of Connecticut (UConn) and University of Nevada, Reno (UNR). It has been implemented in non-structural systems like suspended ceilings, simulating the impact/pounding and friction phenomena. <!\u2013 After running the example script, the following hysteresis loop is resulted in normal direction under cyclic excitation: \u2013>","title":"ZeroLengthImpact3D"},{"location":"library/modeling/element/zero_length/6764-ZeroLengthInterface2D/","text":"ZeroLengthInterface2D zeroLengthInterface2D is Node-to-Segment (NTS) frictional contact element used in two dimensional analysis for contact between elements. Please notice that any number of DOF (DOF>1) can be handled using this element (i.e. beam-solid, solid-solid as well as beam-beam contact) as oppose to zeroLengthContactNTS2D element). element zeroLengthInterface2D $eleTag -cNdNum $cNdNum -rNdNum $rNdNum -dof $cdof $rdof -Nodes $Nodes $Kn $Kt $phi eleTag unique element object tag cNdNum Number of Constrained Nodes rNdNum Number of Retained nodes cdof rdof Constrained and Retained degree of freedom $Nodes \u2026 Constrained and Retained node tags respectively Kn Penalty in normal direction Kt Penalty in tangential direction phi Friction angle in degrees NOTES: The contact element is node-to-segment (NTS) contact. The relation follows Mohr-Coulomb frictional law: <math>T = N tan()</math>, where \\(T\\) is the tangential force, \\(N\\) is normal force across the interface and <math>,!</math> is friction angle. For 2D contact, constrained nodes and retained nodes must be 2 DOF and notice that the constrained and retained nodes must be entered in counterclockwise order. The resulting tangent from the contact element is non-symmetric. Switch to the non-symmetric matrix solver if convergence problem is experienced. As opposed to node-to-node contact, predefined normal vector for node-to-segment (NTS) element is not required because contact normal will be calculated automatically at each step. And also this element can handle contact between different DOFs such as beam-beam, beam-solid and solid-solid. contact element is implemented to handle large deformations. EXAMPLE: ZeroLengthInterface2Drc.png element zeroLengthInterface2D 1 -sNdNum 6 -mNdNum 6 -dof 2 3 -Nodes 5 10 12 3 9 11 1 4 2 8 7 6 1e8 1e8 16 Example 1: This example simply shows the quadrilateral elements in normal contact on top of beam element. The top element is in normal downward uniform force. The Tcl script of this example can be found here . ZeroLengthInterface2D_fig2.jpg Example 2: This example shows two cantilever beams in contact. The beams were modeled using four-node quadrilateral elements and the end of top beam was subjected to a linearly increasing displacement. The Tcl scripts for this example can be found here . zeroLengthContactNTS2D_fig3.jpg The following Figure shows the deflections of the two beams. zeroLengthContactNTS2D_fig4.jpg References P. Wriggers, V.T. Vu and E. Stein, Finite-element formulation of large deformation impact-contact problems with friction, Comput. Struct. 37 (1990), pp. 319-331. Peter Wriggers. Computational Contact Mechanics. John Wiley & Sons Ltd. Chichester, 2002. Code Developed by: Roozbeh G. Mikola , UC Berkeley and N. Sitar , UC Berkeley","title":"ZeroLengthInterface2D"},{"location":"library/modeling/element/zero_length/6767-ZeroLengthND%20Element/","text":"ZeroLengthND This command is used to construct a zeroLengthND element object, which is defined by two nodes at the same location. The nodes are connected by a single NDMaterial object to represent the force-deformation relationship for the element. element zeroLengthND $eleTag $iNode $jNode $matTag &lt; $uniTag &gt; &lt;-orient $x1 $x2 $x3 $yp1 $yp2 $yp3 &gt; eleTag unique element object tag iNode jNode end nodes matTag tag associated with previously-defined ndMaterial object uniTag ag associated with previously-defined UniaxialMaterial object which may be used to represent uncoupled behavior orthogonal to the plane of the NDmaterial response. SEE NOTES 2 and 3. x1 x2 x3 vector components in global coordinates defining local x-axis (optional) yp1 yp2 yp3 vector components in global coordinates defining vector yp which lies in the local x-y plane for the element. (optional) NOTE: The zeroLengthND element only represents translational response between its nodes If the NDMaterial object is of order two, the response lies in the element local x-y plane and the UniaxialMaterial object may be used to represent the uncoupled behavior orthogonal to this plane, i.e. along the local z-axis. If the NDMaterial object is of order three, the response is along each of the element local exes. If the optional orientation vectors are not specified, the local element axes coincide with the global axes. Otherwise the local z-axis is defined by the cross product between the vectors x and yp vectors specified on the command line. The valid queries to a zero-length element when creating an ElementRecorder object are \u2018force\u2019, \u2018deformation\u2019, and \u2018material matArg1 matArg2 \u2026\u2019 Examples Code Developed by: Micheal Scott, Oregon State University.","title":"ZeroLengthND"},{"location":"library/modeling/element/zero_length/6768-ZeroLengthSection%20Element/","text":"ZeroLengthSection This command is used to construct a zero length element object, which is defined by two nodes at the same location. The nodes are connected by a single section object to represent the force-deformation relationship for the element. element zeroLengthSection $eleTag $iNode $jNode $secTag < -orient $x1 $x2 $x3 $yp1 $yp2 $yp3 > < -doRayleigh $rFlag > eleTag unique element object tag iNode jNode end nodes secTag tag associated with previously-defined Section object x1 x2 x3 vector components in global coordinates defining local x-axis (optional) yp1 yp2 yp3 vector components in global coordinates defining vector yp which lies in the local x-y plane for the element. (optional) rFlag optional, default = 1 rFlag = 0 no Rayleigh damping rFlag = 1 include Rayleigh damping (default) NOTE: If the optional orientation vectors are not specified, the local element axes coincide with the global axes. Otherwise the local z-axis is defined by the cross product between the vectors x and yp vectors specified on the command line. The section force-deformation response represented by section string P acts along the element local \\(x\\) -axis, and the response for code Vy along the local \\(y\\) -axis. The other modes of section response follow from this orientation. The valid queries to a zero-length element when creating an ElementRecorder object are force, deformation, stiff, and section $secArg1 secArg2 ... . Examples Truss tag 1 between nodes 2 and 4 usinga type 6 section: element zeroLengthSection 1 2 4 6 ; Element tag 1 between nodes 1 and 2 defined with section 1. Local direction x, perpendicular to element section, is aligned with the global Y axis and the vector yp is aligned with the negative global Z axis: element zeroLengthSection 1 1 2 1 -orient 0 1 0 0 0 -1 ; Code developed by: Michael Scott, Oregon State University.","title":"ZeroLengthSection"},{"location":"library/modeling/element/zero_length/6769-ZeroLength%20Element/","text":"ZeroLength This command is used to construct a zeroLength element object, which is defined by two nodes at the same location. The nodes are connected by multiple UniaxialMaterial objects to represent the force-deformation relationship for the element. element zeroLength $eleTag $iNode $jNode -mat $matTag1 $matTag2 ... -dir $dir1 $dir2 ... < -doRayleigh $rFlag > < -orient $x1 $x2 $x3 $yp1 $yp2 $yp3 > eleTag unique element object tag iNode jNode end nodes matTag1 matTag2 \u2026 tags associated with previously-defined UniaxialMaterials dir1 dir2 \u2026 material directions: 1 , 2 , 3 - translation along local \\(x\\) , \\(y\\) , \\(z\\) axes, respectively; 4 , 5 , 6 - rotation about local \\(x\\) , \\(y\\) , \\(z\\) axes, respectively x1 x2 x3 vector components in global coordinates defining local x-axis (optional) yp1 yp2 yp3 vector components in global coordinates defining vector yp which lies in the local \\(x\\) - \\(y\\) plane for the element. (optional) rFlag optional, default = 0 rFlag = 0 NO RAYLEIGH DAMPING (default) rFlag = 1 include rayleigh damping NOTE: If the optional orientation vectors are not specified, the local element axes coincide with the global axes. Otherwise the local \\(z\\) -axis is defined by the cross product between the vectors x and yp vectors specified on the command line. The valid queries to a zero-length element when creating an ElementRecorder object are force , deformation , and material $i matArg1 matArg2 ... Where \\(i is an integer indicating which of the materials whose data is to be output (a 1 corresponds to `\\) matTag1 , a 2 to $matTag2`, and so on). EXAMPLES: Truss tag 1 between nodes 2 and 4 acting in directions 1 and 2 with materials 5 and 6 respectively. element zeroLength 1 2 4 -mat 5 6 -dir 1 2 ; Truss tag 1 between nodes 1 and 2 acting in local direction 1 defined with material 1. Local direction 1 attains 45 degrees with global \\(X\\) axis: element zeroLength 1 1 2 -mat 1 -dir 1 -orient 1 1 0 -1 1 0 ; The same as the example above but also includes the stiffness of this element in calculation of the damping matrix if Rayleigh command is invoked later. element zeroLength 1 1 2 -mat 1 -dir 1 -doRayleigh 1 -orient 1 1 0 -1 1 0 ; Code developed by: Gregory L. Fenves, University of Texas, Austin.","title":"ZeroLength"},{"location":"library/modeling/nd_material/","text":"\\(N\\) -Dimensional Materials This command is used to construct an NDMaterial object which represents the stress-strain relationship at the gauss-point of a continuum element. The valid queries to any uniaxial material when creating an ElementRecorder are \"strain\" , and \"stress\" . Some materials have additional queries to which they will respond. These are documented in the NOTES section for those materials. Wrappers See Prof. Scott\u2019s post here InitStressNDMaterial BeamFiberMaterial PlateFromPlaneStressMaterial wrapper adding linear-elastic shear behavior to a plane stress material in order to get the plate fiber stress condition. Elastic Elastic Isotropic Material Elastic Orthotropic Material PlaneStress2D ElasticIsotropicPlaneStress2D PlaneStrain2D ElasticIsotropicPlaneStrain2D AxiSymmetric2D ElasticIsotropicAxiSymm ThreeDimensional ElasticIsotropicThreeDimensional PlateFiber ElasticIsotropicPlateFiber BeamFiber ElasticIsotropicBeamFiber BeamFiber2d ElasticIsotropicBeamFiber2d Other J2 Plasticity Drucker Prager Concrete Damage Model Plane Stress Material Plane Strain Material Multi Axial Cyclic Plasticity Bounding Surface Cam Clay Material Plate Fiber Plane Stress Concrete Materials FSAM - 2D RC Panel Constitutive Behavior Tsinghua Sand Models CycLiqCP Material (Cyclic ElasticPlasticity) CycLiqCPSP Manzari Dafalias Material J2CyclicBoundingSurface Material PM4Sand PM4Silt Material (Beta) Stress Density Materials for Modeling Concrete Walls PlaneStressUserMaterial PlateFromPlaneStress PlateRebar LayeredShell Contact Materials for 2D and 3D ContactMaterial2D ContactMaterial3D Wrapper material for Initial State Analysis InitialStateAnalysisWrapper UC San Diego soil models (Linear/Nonlinear, dry/drained/undrained soil response under general 2D/3D static/cyclic loading conditions (please visit UCSD for examples) PressureIndependMultiYield Material PressureDependMultiYield Material PressureDependMultiYield02 Material PressureDependMultiYield03 Material UC San Diego Saturated Undrained soil FluidSolidPorousMaterial Misc. AcousticMedium Steel & Reinforcing-Steel Materials UVCmultiaxial (Updated Voce-Chaboche) UVCplanestress (Updated Voce-Chaboche)","title":"$N$-Dimensional Materials"},{"location":"library/modeling/nd_material/concrete/120-Damage2p/","text":"Damage2p This command is used to construct a three-dimensional material object that has a Drucker-Prager plasticity model coupled with a two-parameter damage model. nDMaterial Damage2p $matTag $fcc < -fct $fct > < -E $E > < -ni $ni > < -Gt $Gt > < -Gc $Gc > < -rho_bar $rho_bar > < -H $H > < -theta $theta > < -tangent $tangent > matTag integer tag identifying material fcc concrete compressive strength fct optional concrete tensile strength E optional Young modulus ni optional Poisson coefficient Gt optional tension fracture energy density Gc optional compression fracture energy density rho_bar ptional parameter of plastic volume change H optional linear hardening parameter for plasticity theta optional ratio between isotropic and kinematic hardening tangent optional integer to choose the computational stiffness matrix The material formulations for the Damage2p object are ThreeDimensional and PlaneStrain . NOTES Admissible values: The input parameters vary as follows: fcc negative real value (positive input is changed in sign automatically) fct positive real value (for concrete like materials is less than fcc ) Gt positive real value (integral of the stress-strain envelope in tension) Gc positive real value (integral of the stress-strain envelope after the peak in compression) rhoBar positive real value 0=rhoBar<sqrt(2/3) H positive real value (usually less than E ) theta positive real value 0= theta =1 (with: 0 hardening kinematic only and 1 hardening isotropic only tangent 0: computational tangent; 1: damaged secant stiffness (hint: in case of strong nonlinearities use it with Krylov-Newton algorithm) Default values: The Damage2p object hve the following defualt parameters: fct = 0.1*abs(fcc) E = 4750 \\ * sqrt ( abs ( fcc )) if abs(fcc) < 2000 because fcc is assumed in MPa (see ACI 318) = 57000\\*sqrt(abs(fcc)) if abs(fcc) > 2000 because fcc is assumed in psi (see ACI 318) ni = 0.15 (from comparison with tests by Kupfer Hilsdorf Rusch 1969) Gt = 1840 fct fct/E (from comparison with tests by Gopalaratnam and Shah 1985) Gc = 6250 fcc fcc/E (from comparison with tests by Karsan and Jirsa 1969) rhoBar = 0.2 (from comparison with tests by Kupfer Hilsdorf Rusch 1969) H \\(= 0.25 E\\) (from comparison with tests by Karsan and Jirsa 1969 and Gopalaratnam and Shah 1985) theta \\(= 0.5\\) (from comparison with tests by Karsan and Jirsa 1969 and Gopalaratnam and Shah 1985) tangent = 0 References Tesser L.,\u201cEfficient 3-D plastic damage model for cyclic inelastic analysis of concrete structures\u201d, Report of the University of Padua, Italy, 2012. (soon available at paduareserach.cab.unipd.it) Petek K.A., \u201cDevelopment and application of mixed beam-solid models for analysis of soil-pile interaction problems\u201d, Ph.D. dissertation, Univerisity of Washington, USA, 2006 Development Team Code developed by: Leopoldo Tesser - Dept. DICEA - Univeristy of Padua - Italy , contact: leopoldo.tesser AT dicea.unipd.it","title":"Damage2p"},{"location":"library/modeling/nd_material/concrete/235-FSAM%20-%202D%20RC%20Panel%20Constitutive%20Behavior/","text":"FSAM - 2D RC Panel Constitutive Behavior This command is used to construct a nDMaterial FSAM (Fixed-Strut-Angle-Model, Figure 1, Kolozvari et al., 2015), which is a plane-stress constitutive model for simulating the behavior of RC panel elements under generalized, in-plane, reversed-cyclic loading conditions (Ulugtekin, 2010; Orakcal et al., 2012). In the FSAM constitutive model, the strain fields acting on concrete and reinforcing steel components of a RC panel are assumed to be equal to each other, implying perfect bond assumption between concrete and reinforcing steel bars. While the reinforcing steel bars develop uniaxial stresses under strains in their longitudinal direction, the behavior of concrete is defined using stress-strain relationships in biaxial directions, the orientation of which is governed by the state of cracking in concrete. Although the concrete stress-strain relationship used in the FSAM is fundamentally uniaxial in nature, it also incorporates biaxial softening effects including compression softening and biaxial damage. For transfer of shear stresses across the cracks, a friction-based elasto-plastic shear aggregate interlock model is adopted, together with a linear elastic model for representing dowel action on the reinforcing steel bars (Kolozvari, 2013). Note that FSAM constitutive model is implemented to be used with Shear-Flexure Interaction model for RC walls ( SFI_MVLEM ), but it could be also used elsewhere. Source: /usr/local/cvs/OpenSees/SRC/material/nD/reinforcedConcretePlaneStress/ Figure 1. FSAM for Converting In-Plane Strains to In-Plane Smeared Stresses on a RC Panel Element Input Format: The material formulations for the FSAM model are PlaneStress . nDMaterial FSAM $mattag $rho $sX $sY $conc $rouX $rouY $nu $alfadow mattag Unique nDMaterial tag rho Material density sX Tag of uniaxialMaterial simulating horizontal (x) reinforcement sY Tag of uniaxialMaterial simulating vertical (y) reinforcement conc Tag of uniaxialMaterial<sup class=\u201csuperscript\u201d>1</sup> simulating concrete rouX Reinforcing ratio in horizontal (x) direction (rouX = A<sub class=\u201csubscript\u201d>s,x /A<sub class=\u201csubscript\u201d>gross,x ) rouY Reinforcing ratio in vertical (y) direction (rouY = A<sub class=\u201csubscript\u201d>s,y /A<sub class=\u201csubscript\u201d>gross,y ) nu Concrete friction coefficient (0.0 < nu < 1.5) alfadow Stiffness coefficient of reinforcement dowel action (0.0 < alfadow < 0.05) 1 nDMaterial FSAM shall be used with uniaxialMaterial ConcreteCM Recommended values for parameter of a shear resisting mechanism ( nu and alfadow , Figure 2) are provided above. Details about the sensitivity of analytical predictions using SFI_MVLEM element to changes in these parameters are presented by Kolozvari (2013). Material Recorders: The following output is available from the FSAM RC panel model: panel_strain Strains \u03b5 x , \u03b5 y , \u03b3 xy (Figure 1) panel_stress Resulting panel stresses \u03c3 x , \u03c3 y , \u03c4 xy (concrete and steel, Figure 1) panel_stress_concrete Resulting panel concrete stresses \u03c3 xc , \u03c3 yc , \u03c4 xyc (Figure 2b) panel_stress_steel Resulting panel steel stresses \u03c3 xs , \u03c3 ys , \u03c4 xys (Figure 2e) strain_stress_steelX Uniaxial strain and stress of horizontal reinforcement \u03b5 x , \u03c3 xxs (Figure 2f) strain_stress_steelY Uniaxial strain and stress of vertical reinforcement \u03b5 y , \u03c3 yys (Figure 2f) strain_stress_concrete1 Uniaxial strain and stress of concrete strut 1 \u03b5 c1 , \u03c3 c1 (Figure 2c) strain_stress_concrete2 Uniaxial strain and stress of concrete strut 2 \u03b5 c2 , \u03c3 c2 (Figure 2c) strain_stress_interlock1 Shear strain and stress in concrete along crack 1 \u03b5 cr1 , \u03c4 cr1 (Figure 2d) strain_stress_interlock2 Shear strain and stress in concrete along crack 2 \u03b5 cr2 , \u03c4 cr2 (Figure 2d) cracking_angles Orientation of concrete cracks Note that recorders for a RC panel (marco-fiber) are invoked as SFI_MVLEM element recorders using command RCPanel and one of the desired commands listed above. Currently, it is possible to output values only for one macro-fiber within one or multiple elements. Examples nDMaterial FSAM 1 0.0 1 2 4 0.0073 0.0606 0.1 0.01 recorder Element -file MVLEM_panel_strain.out -time -ele 1 RCPanel 1 panel_strain Figure 2. Behavior and Input/Output Parameters of the FSAM Constitutive Model References Kolozvari K., Orakcal K., and Wallace J. W. (2015). \u201cShear-Flexure Interaction Modeling of reinforced Concrete Structural Walls and Columns under Reversed Cyclic Loading\u201d, Pacific Earthquake Engineering Research Center, University of California, Berkeley, PEER Report No. 2015/12 Kolozvari K. (2013). \u201cAnalytical Modeling of Cyclic Shear-Flexure Interaction in Reinforced Concrete Structural Walls\u201d, PhD Dissertation, University of California, Los Angeles. Orakcal K., Massone L.M., and Ulugtekin D. (2012). \u201cConstitutive Modeling of Reinforced Concrete Panel Behavior under Cyclic Loading\u201d, Proceedings, 15th World Conference on Earthquake Engineering, Lisbon, Portugal. Ulugtekin D. (2010). \u201cAnalytical Modeling of Reinforced Concrete Panel Elements under Reversed Cyclic Loadings\u201d, M.S. Thesis, Bogazici University, Istanbul, Turkey. Code developed by: Kristijan Kolozvari , California State University, Fullerton Kutay Orakcal , Bogazici University, Istanbul, Turkey Leonardo Massone , University of Chile, Santiago John Wallace , Univeristy of California, Los Angeles","title":"FSAM - 2D RC Panel Constitutive Behavior"},{"location":"library/modeling/nd_material/contact/102-ContactMaterial2D/","text":"ContactMaterial2D This command is used to construct a ContactMaterial2D nDMaterial object. nDMaterial ContactMaterial2D $matTag $mu $G $c $t matTag unique integer tag identifying nDMaterial object mu interface frictional coefficient G interface stiffness parameter c interface cohesive intercept t interface tensile strength The ContactMaterial2D nDMaterial defines the constitutive behavior of a frictional interface between two bodies in contact. The interface defined by this material object allows for sticking, frictional slip, and separation between the two bodies in a two-dimensional analysis. A regularized Coulomb frictional law is assumed. Information on the theory behind this material can be found in, e.g. Wriggers (2002). NOTE: The ContactMaterial2D nDMaterial has been written to work with the SimpleContact2D and BeamContact2D element objects. There are no valid recorder queries for this material other than those which are listed with those elements. EXAMPLE: ContactMaterial2D nDmaterial with tag 1 nDMaterial ContactMaterial2D 1 0.1 1000.0 0.0 0.0 References Wriggers, P. (2002). Computational Contact Mechanics. John Wilely & Sons, Ltd, West Sussex, England. Code Developed by: Kathryn Petek, Pedro Arduino, & Peter Mackenzie-Helnwein, at the University of Washington","title":"ContactMaterial2D"},{"location":"library/modeling/nd_material/contact/103-ContactMaterial3D/","text":"ContactMaterial3D This command is used to construct a ContactMaterial3D nDMaterial object. nDMaterial ContactMaterial3D $matTag $mu $G $c $t matTag unique integer tag identifying nDMaterial object mu interface frictional coefficient G interface stiffness parameter c interface cohesive intercept t interface tensile strength The ContactMaterial3D nDMaterial defines the constitutive behavior of a frictional interface between two bodies in contact. The interface defined by this material object allows for sticking, frictional slip, and separation between the two bodies in a three-dimensional analysis. A regularized Coulomb frictional law is assumed. Information on the theory behind this material can be found in, e.g. Wriggers (2002). NOTE: The ContactMaterial3D nDMaterial has been written to work with the SimpleContact3D and BeamContact3D element objects. There are no valid recorder queries for this material other than those which are listed with those elements. EXAMPLE: ContactMaterial3D nDmaterial with tag 1 nDMaterial ContactMaterial3D 1 0.1 1000.0 0.0 0.0 Code Developed by: Kathryn Petek, Pedro Arduino, & Peter Mackenzie-Helnwein, at the University of Washington References: Wriggers, P. (2002). Computational Contact Mechanics. John Wilely & Sons, Ltd, West Sussex, England.","title":"ContactMaterial3D"},{"location":"library/modeling/nd_material/elastic/188-Elastic%20Isotropic%20Material/","text":"Elastic Isotropic Material This command is used to construct an ElasticIsotropic material object. nDMaterial ElasticIsotropic $matTag $E $v < $rho > matTag integer tag identifying material E elastic Modulus v Poisson\u2019s ratio rho mass density, optional default = 0.0. The material formulations for the ElasticIsotropic object are \"ThreeDimensional\" , \"PlaneStrain\" , \u201cPlane Stress,\u201d \u201cAxiSymmetric,\u201d and \u201cPlateFiber.\u201d Code Developed by: Micheal Scott, Oregon State University","title":"Elastic Isotropic Material"},{"location":"library/modeling/nd_material/elastic/1881-ElasticIsotropicPlaneStrain/","text":"Elastic Isotropic Material This command is used to construct an ElasticIsotropic material object. nDMaterial ElasticIsotropic $matTag $E $v < $rho > matTag integer tag identifying material E elastic Modulus v Poisson\u2019s ratio rho mass density, optional default = 0.0. The material formulations for the ElasticIsotropic model are \"ThreeDimensional\" , \"PlaneStrain\" , \"Plane Stress\" , \"AxiSymmetric\" , and \"PlateFiber\" . In plane strain, an isotropic material is governed by the following constitutive relation: \\[ \\left[\\begin{array}{l} \\sigma_{11} \\\\ \\sigma_{22} \\\\ \\sigma_{12} \\end{array}\\right]=\\frac{E}{\\left(1-\\nu^2\\right)}\\left[\\begin{array}{ccc} 1 & \\nu & 0 \\\\ \\nu & 1 & 0 \\\\ 0 & 0 & (1-\\nu) / 2 \\end{array}\\right]\\left[\\begin{array}{c} \\varepsilon_{11} \\\\ \\varepsilon_{22} \\\\ 2 \\varepsilon_{12} \\end{array}\\right] \\] Code Developed by: Micheal Scott, Oregon State University","title":"Elastic Isotropic Material"},{"location":"library/modeling/nd_material/elastic/191-Elastic%20Orthotropic%20Material/","text":"Elastic Orthotropic Material This command is used to construct an ElasticOrthotropic material object. nDMaterial ElasticOrthotropic $matTag $Ex $Ey $Ez $vxy $vyz $vzx $Gxy $Gyz $Gzx < $rho > matTag integer tag identifying material Ex, Ey, Ez elastic modulii in three mutually perpendicular directions ( \\(x\\) , \\(y\\) , and \\(z\\) ) vxy, vyz, vzx Poisson\u2019s ratios Gxy, Gyz, Gzx shear modulii rho mass density, optional default = 0.0. The material formulations for the ElasticOrthotropic object are - ThreeDimensional , - PlaneStrain , - Plane Stress , - AxiSymmetric , - BeamFiber , and - PlateFiber . Code Developed by: Micheal Scott, Oregon State University","title":"Elastic Orthotropic Material"},{"location":"library/modeling/nd_material/generic/160-Drucker%20Prager/","text":"DruckerPrager This command is used to construct an multi dimensional material object that has a Drucker-Prager yield criterium. nDMaterial DruckerPrager $matTag $k $G $sigmaY $rho $rhoBar $Kinf $Ko $delta1 $delta2 $H $theta $density < $atmPressure > matTag integer tag identifying material k bulk modulus G shear modulus sigmaY yield stress rho frictional strength parameter rhoBar controls evolution of plastic volume change, \\(0 \\le \\texttt{rhoBar} \\le \\texttt{rho}\\) Kinf nonlinear isotropic strain hardening parameter, \\(\\texttt{Kinf} \\ge 0\\) Ko nonlinear isotropic strain hardening parameter, $Ko &ge; 0 delta1 nonlinear isotropic strain hardening parameter, $delta1 &ge; 0 delta2 tension softening parameter, \\(\\texttt{delta2} \\ge 0\\) H linear strain hardening parameter, \\(\\texttt{H} \\ge 0\\) theta controls relative proportions of isotropic and kinematic hardening, \\(0 \\le \\texttt{theta} \\le 1\\) density mass density of the material atmPressure optional atmospheric pressure for update of elastic bulk and shear moduli (default = 101 kPa) The material formulations for the Drucker-Prager object are ThreeDimensional and PlaneStrain Theory The Drucker-Prager model is formulated in terms of the following components: Yield Condition \\[f\\left(\\mathbf{\\sigma}, q^{iso}, \\mathbf{q}^{kin}\\right) = \\left\\| \\mathbf{s} + \\mathbf{q}^{kin} \\right\\| + \\rho I_1 + \\sqrt{\\frac{2}{3}} q^{iso} - \\sqrt{\\frac{2}{3}} \\sigma_Y^{} \\leq 0 \\] in which \\[ \\mathbf{s} = \\mathrm{dev} (\\mathbf{\\sigma}) = \\mathbf{\\sigma} - \\frac{1}{3} I_1 \\mathbf{1}\\] is the deviatoric stress tensor, \\[ I_1 = \\mathrm{tr}(\\mathbf{\\sigma})\\] is the first invariant of the stress tensor, and the parameters \\(\\rho_{}^{}\\) and \\(\\sigma_Y^{}\\) are positive material constants. Isotropic hardening stress \\[ q^{iso} = \\theta H \\alpha^{iso} + (K_{\\infty} - K_o) \\exp(-\\delta_1 \\alpha^{iso}) \\] Kinematic hardening stress (or back-stress) \\[ \\mathbf{q}^{kin} = -(1 - \\theta) \\frac{2}{3} H \\mathbb{I}^{dev} : \\mathbf{\\alpha}^{kin} \\] Yield condition for tension cutoff yield surface \\[ f_2(\\mathbf{\\sigma}, q^{ten}) = I_1 + q^{ten} \\leq 0 \\] where \\[ q^{ten} = T_o \\exp(-\\delta_2^{} \\alpha^{ten}) \\] and \\[ T_o = \\sqrt{\\frac{2}{3}} \\frac{\\sigma_Y}{\\rho}\\] Further, general, information on theory for the Drucker-Prager yield criterion can be found at wikipedia here Notes The valid queries to the Drucker-Prager material when creating an ElementRecorder are strain and stress (as with all nDmaterial) as well as state . The query state records a vector of state variables during a particular analysis. The columns of this vector are as follows. (Note: If the option -time is included in the creation of the recorder, the first column will be the time variable for each recorded point and the columns below are shifted accordingly.) Column 1 First invariant of the stress tensor, \\(I_1 = \\mathrm{tr}(\\mathbf{\\sigma})\\) . Column 2 The following tensor norm, \\(\\left\\| \\mathbf{s} + \\mathbf{q}^{kin} \\right\\|\\) , where \\(\\mathbf{s}\\) is the deviatoric stress tensor and \\(\\mathbf{q}^{kin}\\) is the back-stress tensor. Column 3 First invariant of the plastic strain tensor, \\(\\mathrm{tr}(\\mathbf{\\varepsilon}^p)\\) . Column 4 Norm of the deviatoric plastic strain tensor, \\(\\left\\| \\mathbf{e}^p \\right\\|\\) The Drucker-Prager strength parameters \\(\\rho\\) and \\(\\sigma_Y\\) can be related to the Mohr-Coulomb friction angle, \\(\\phi\\) , and cohesive intercept, \\(c\\) , by evaluating the yield surfaces in a deviatoric plane as described by Chen and Saleeb (1994). By relating the two yield surfaces in triaxial compression, the following expressions are determined \\[ \\rho = \\frac{2 \\sqrt{2} \\sin \\phi}{\\sqrt{3} (3 - \\sin\\phi)}\\] \\[ \\sigma_Y = \\frac{6 c \\cos \\phi}{\\sqrt{2} (3 - \\sin \\phi)}\\] Example This example provides the input file and corresponding results for a confined triaxial compression (CTC) test using a single 8-node brick element and the Drucker-Prager constitutive model. A schematic representation of this test is shown below, (a) depicts the application of hydrostatic pressure, and (b) depicts the application of the deviator stress. Also shown is the stress path resulting from this test plotted on the meridian plane. As shown, the element is loaded until failure, at which point the model can no longer converge, as this is a stress-controlled analysis. Example Tcl script # File is generated for the purposes of testing the # Drucker-Prager model -->; conventional triaxial # compression test # # Created: 03.16.2009 CRM # Updated: 12.02.2011 CRM #---> Basic units used are kN and meters ## # create the modelBuilder and build the model</li> wipe model BasicBuilder -ndm 3 -ndf 3 # --create the nodes</li> node 1 1.0 0.0 0.0 node 2 1.0 1.0 0.0 node 3 0.0 1.0 0.0 node 4 0.0 0.0 0.0 node 5 1.0 0.0 1.0 node 6 1.0 1.0 1.0 node 7 0.0 1.0 1.0 node 8 0.0 0.0 1.0 # --triaxial test boundary conditions</li> fix 1 0 1 1 fix 2 0 0 1 fix 3 1 0 1 fix 4 1 1 1 fix 5 0 1 0 fix 6 0 0 0 fix 7 1 0 0 fix 8 1 1 0 # --define material parameters for the model</li> # ---bulk modulus</li> set k 27777.78 # ---shear modulus</li> set G 9259.26 # ---yield stress</li> set sigY 5.0 # ---failure surface and associativity</li> set rho 0.398 set rhoBar 0.398 # ---isotropic hardening</li> set Kinf 0.0 set Ko 0.0 set delta1 0.0 # ---kinematic hardening</li> set H 0.0 set theta 1.0 # ---tension softening</li> set delta2 0.0 # ---mass density</li> set mDen 1.7 # --material models # type tag k G sigY rho rhoBar Kinf Ko delta1 delta2 H theta density nDMaterial DruckerPrager 2 $k $G $sigY $rho $rhoBar $Kinf $Ko $delta1 \\ $delta2 $H $theta $mDen # --create the element # type tag nodes matID bforce1 bforce2 bforce3 element stdBrick 1 1 2 3 4 5 6 7 8 2 0.0 0.0 0.0 puts \"model Built...\" # # create the recorders # set step 0.1 # record nodal displacements recorder Node -file displacements1.out -time -dT $step -nodeRange 1 8 -dof 1 2 3 disp # record the element stress, strain, and state at one of the Gauss # points recorder Element -ele 1 -time -file stress1.out -dT $step material 2 stress recorder Element -ele 1 -time -file strain1.out -dT $step material 2 strain recorder Element -ele 1 -time -file state1.out -dT $step material 2 state puts \"recorders set...\" # create the loading # --pressure magnitude set p 10.0 set pNode [expr - $p / 4 ] # --loading object for hydrostatic pressure pattern Plain 1 { Series -time { 0 10 100 } -values { 0 1 1 } -factor 1 } { load 1 $pNode 0.0 0.0 load 2 $pNode $pNode 0.0 load 3 0.0 $pNode 0.0 load 5 $pNode 0.0 0.0 load 6 $pNode $pNode 0.0 load 7 0.0 $pNode 0.0 } # --loading object deviator stress pattern Plain 2 { Series -time { 0 10 100 } -values { 0 1 5 } -factor 1 } { load 5 0.0 0.0 $pNode load 6 0.0 0.0 $pNode load 7 0.0 0.0 $pNode load 8 0.0 0.0 $pNode } # create the analysis integrator LoadControl 0.1 numberer RCM system SparseGeneral constraints Transformation test NormDispIncr 1e-5 10 1 algorithm Newton analysis Static puts \"starting the hydrostatic analysis...\" set startT [clock seconds ] analyze 1000 set endT [clock seconds ] puts \"triaxial shear application finished...\" puts \"loading analysis execution time: [expr $ endT- $ startT] seconds.\" wipe References Drucker, D. C. and Prager, W., \u201cSoil mechanics and plastic analysis for limit design.\u201d Quarterly of Applied Mathematics, vol. 10, no. 2, pp. 157-165, 1952. Chen, W. F. and Saleeb, A. F., Constitutive Equations for Engineering Materials Volume I: Elasticity and Modeling. Elsevier Science B.V., Amsterdam, 1994. Code developed by: Peter Mackenzie, U Washington and the great Pedro Arduino, U Washington","title":"DruckerPrager"},{"location":"library/modeling/nd_material/geotechnical/111-CycLiqCPSP%20Material/","text":"CycLiqCPSP This command is used to construct a multi-dimensional material object based on a unified plasticity model for large post-liquefaction shear deformation of sand. nDmaterial CycLiqCPSP $matTag $G0 $kappa $h $M $dre1 $dre2 $rdr $alpha $dir $lambdac $ksi $e0 $np $nd $ein &lt; $rho &gt; CycLiqCPSP material is a constitutive model for sand with special considerations for cyclic behaviour and accumulation of large post-liquefaction shear deformation, and is implemented using a cutting plane algorithm. The model: (1) achieves the simulation of post-liquefaction shear deformation based on its physics, allowing the unified description of pre- and post-liquefaction behavior of sand; (2) directly links the cyclic mobility of sand with reversible and irreversible dilatancy, enabling the unified description of monotonic and cyclic loading; (3) introduces critical state soil mechanics concepts to achieve unified modelling of sand under different states. The critical, maximum stress ratio and reversible dilatancy surfaces follow a rounded triangle in the pi plane similar to the Matsuoka-Nakai criterion. When this material is employed in regular solid elements (e.g., FourNodeQuad, Brick), it simulates drained soil response. When solid-fluid coupled elements (u-p elements and SSP u-p elements) are used, the model is able to simulate undrained and partially drained behavior of soil. During the application of gravity load (and static loads if any), the user is suggested to set the material behavior to be non-linear elastic, with the updateMaterialStage command: updateMaterialStage -material $matTag -stage 0 After the gravity load stage, the material stage should be updated to achieve the desired elastic-plastic stress-strain response. updateMaterialStage -material $matTag -stage 1 If a linear elastic stage is required, it can be achieved through: updateMaterialStage -material $matTag -stage 2 matTag integer tag identifying material G0 A constant related to elastic shear modulus kappa A constant related to elastic bulk modulus h Model parameter for plastic modulus M Critical state stress ratio dre1 Coefficient for reversible dilatancy generation dre2 Coefficient for reversible dilatancy release rdr Reference shear strain length alpha Parameter controlling the decrease rate of irreversible dilatancy dir Coefficient for irreversible dilatancy potential lambdac Critical state constant ksi Critical state constant e0 Void ratio at pc=0 np Material constant for peak mobilized stress ratio nd Material constant for reversible dilatancy generation stress ratio ein Initial void ratio rho Saturated mass density The material formulations for the CycLiqCPSP object are \u201cThreeDimensional\u201d and \u201cPlaneStrain\u201d. REFERENCES: Wang R., Zhang J.M., Wang G., 2014. A unified plasticity model for large post-liquefaction shear deformation of sand. Computers and Geotechnics. 59, 54-66. Code Developed by: Rui Wang, Tsinghua University","title":"CycLiqCPSP"},{"location":"library/modeling/nd_material/geotechnical/113-CycLiqCP%20Material%20%28Cyclic%20ElasticPlasticity%29/","text":"CycLiqCP Material (Cyclic ElasticPlasticity) This command is used to construct a multi-dimensional material object that that follows the constitutive behavior of a cyclic elastoplasticity model for large post- liquefaction deformation. nDmaterial CycLiqCP $matTag $G0 $kappa $h $Mfc $dre1 $Mdc $dre2 $rdr $alpha $dir $ein < $rho > CycLiqCP material is a cyclic elastoplasticity model for large post-liquefaction deformation, and is implemented using a cutting plane algorithm. The model is capable of reproducing small to large deformation in the pre- to post-liquefaction regime. The elastic moduli of the model are pressure dependent. The plasticity in the model is developed within the framework of bounding surface plasticity, with special consideration to the formulation of reversible and irreversible dilatancy. matTag integer tag identifying material G0 A constant related to elastic shear modulus kappa A constant related to elastic bulk modulus h Model parameter for plastic modulus Mfc Stress ratio at failure in triaxial compression dre1 Coefficient for reversible dilatancy generation Mdc Stress ratio at which the reversible dilatancy sign changes dre2 Coefficient for reversible dilatancy release rdr Reference shear strain length alpha Parameter controlling the decrease rate of irreversible dilatancy dir Coefficient for irreversible dilatancy potential ein Initial void ratio rho Saturated mass density The material formulations for the CycLiqCP object are \u201cThreeDimensional\u201d and \u201cPlaneStrain\u201d . Notes The model does not take into consideration of the state of sand, and requires different parameters for sand under different densities and confining pressures. The surfaces (i.e. failure and maximum pre-stress) are considered as circles in the pi plane. The model has been validated against VELACS centrifuge model tests and has used on numerous simulations of liquefaction related problems. When this material is employed in regular solid elements (e.g., FourNodeQuad, Brick), it simulates drained soil response. When solid-fluid coupled elements (u-p elements and SSP u-p elements) are used, the model is able to simulate undrained and partially drained behavior of soil. During the application of gravity load (and static loads if any), the user is suggested to set the material behavior to be linear elastic, with the updateMaterialStage command: updateMaterialStage -material $matTag -stage 0 After the gravity load stage, the material stage should be updated to achieve the desired elastic-plastic stress-strain response. updateMaterialStage -material $matTag -stage 1 The elastic modulii are given by the following relations: CycLiqCp.GIF References Zhang J.M. and Wang G., 2012, \u201cLarge post-liquefaction deformation of sand, part I: physical mechanism, constitutive description and numerical algorithm\u201d, Acta Geotechnica. Code Developed by: Rui Wang, Tsinghua University","title":"CycLiqCP Material (Cyclic ElasticPlasticity)"},{"location":"library/modeling/nd_material/geotechnical/117-Cyclic%20ElastocPlasticity/","text":"Cyclic ElastocPlasticity This command is used to construct a multi-dimensional material object that that follows the constitutive behavior of a cyclic elastoplasticity model for large post- liquefaction deformation. nDmaterial CycLiqCP $matTag $G0 $kappa $h $Mfc $dre1 $Mdc $dre2 $rdr $alpha $dir $ein &lt; $rho &gt; CycLiqCP material is a cyclic elastoplasticity model for large post-liquefaction deformation, and is implemented using a cutting plane algorithm. The model is capable of reproducing small to large deformation in the pre- to post-liquefaction regime. The elastic moduli of the model are pressure dependent. The plasticity in the model is developed within the framework of bounding surface plasticity, with special consideration to the formulation of reversible and irreversible dilatancy. The model has been validated against VELACS centrifuge model tests and has used on numerous simulations of liquefaction related problems. When this material is employed in regular solid elements (e.g., FourNodeQuad, Brick), it simulates drained soil response. When solid-fluid coupled elements (u-p elements and SSP u-p elements) are used, the model is able to simulate undrained and partially drained behavior of soil. During the application of gravity load (and static loads if any), the user is suggested to set the material behavior to be linear elastic, with the updateMaterialStage command: updateMaterialStage -material $matTag -stage 0 After the gravity load stage, the material stage should be updated to achieve the desired elastic-plastic stress-strain response. updateMaterialStage -material $matTag -stage 1 matTag integer tag identifying material G0 A constant related to elastic shear modulus kappa A constant related to elastic bulk modulus h Model parameter for plastic modulus Mfc Stress ratio at failure in triaxial compression dre1 Coefficient for reversible dilatancy generation Mdc Stress ratio at which the reversible dilatancy sign changes dre2 Coefficient for reversible dilatancy release rdr Reference shear strain length alpha Parameter controlling the decrease rate of irreversible dilatancy dir Coefficient for irreversible dilatancy potential ein Initial void ratio rho Saturated mass density The material formulations for the CycLiqCP object are \u201cThreeDimensional\u201d and \u201cPlaneStrain\u201d. REFERENCES: Zhang J.M. and Wang G., 2012, \u201cLarge post-liquefaction deformation of sand, part I: physical mechanism, constitutive description and numerical algorithm\u201d, Acta Geotechnica. Code Developed by: Rui Wang, Tsinghua University","title":"Cyclic ElastocPlasticity"},{"location":"library/modeling/nd_material/geotechnical/378-Manzari%20Dafalias%20Material/","text":"Manzari Dafalias Material This command is used to construct a multi-dimensional Manzari-Dafalias (2004) material. nDmaterial ManzariDafalias $matTag $G0 $nu $e_init $Mc $c $lambda_c $e0 $ksi $P_atm $m $h0 $ch $nb $A0 $nd $z_max $cz $Den matTag integer tag identifying material G0 shear modulus constant nu poisson ratio e_init initial void ratio Mc critical state stress ratio c ratio of critical state stress ratio in extension and compression lambda_c critical state line constant e0 critical void ratio at \\(p = 0\\) ksi critical state line constant P_atm atmospheric pressure m yield surface constant (radius of yield surface in stress ratio space) h0 constant parameter ch constant parameter nb bounding surface parameter, $nb &ge; 0 A0 dilatancy parameter nd dilatancy surface parameter $nd &ge; 0 z_max fabric-dilatancy tensor parameter cz fabric-dilatancy tensor parameter Den mass density of the material The material formulations for the Manzari-Dafalias object are ThreeDimensional and PlaneStrain Notes Valid Element Recorder queries are stress , strain alpha (or backstressratio ) for \\(\\mathbf{\\alpha}\\) fabric for \\(\\mathbf{z}\\) alpha_in (or alphain ) for \\(\\mathbf{\\alpha_{in}}\\) For example: recorder Element -eleRange 1 $numElem -time -file stress.out stress Elastic or Elastoplastic response could be enforced by Elastic updateMaterialStage -material $matTag -stage 0 Elastoplastic updateMaterialStage -material $matTag -stage 1 Theory \\[p = \\frac{1}{3} \\mathrm{tr}(\\mathbf{\\sigma})\\] \\[\\mathbf{s} = \\mathrm{dev} (\\mathbf{\\sigma}) = \\mathbf{\\sigma} - \\frac{1}{3} p \\mathbf{1}\\] Elasticity Elastic moduli are considered to be functions of \\(p\\) and current void ratio: \\[ G = G_0 p_{atm}\\frac{\\left(2.97-e\\right)^2}{1+e}\\left(\\frac{p}{p_{atm}}\\right)^{1/2}\\] \\[K = \\frac{2(1+\\nu)}{3(1-2\\nu)} G\\] The elastic stress-strain relationship is: \\[ d\\mathbf{e}^\\mathrm{e} = \\frac{d\\mathbf{s}}{2G}\\] \\[ d\\varepsilon^\\mathrm{e}_v = \\frac{dp}{K}\\] Critical State Line A power relationship is assumed for the critical state line: \\[e_c = e_0 - \\lambda_c\\left(\\frac{p_c}{p_{atm}}\\right)^\\xi\\] where \\(e_0\\) is the void ratio at \\(p_c = 0\\) and \\(\\lambda_c\\) and \\(\\xi\\) constants. Yield Surface Yield surface is a stress-ratio dependent surface in this model and is defined as \\[ \\left\\| \\mathbf{s} - p \\mathbf{\\alpha} \\right\\| - \\sqrt\\frac{2}{3}pm = 0 \\] with \\(\\mathbf{\\alpha}\\) being the deviatoric back stress-ratio. Plastic Strain Increment The increment of the plastic strain tensor is given by \\[ d\\mathbf{\\varepsilon}^p = \\langle L \\rangle \\mathbf{R}\\] where \\[ \\mathbf{R} = \\mathbf{R'} + \\frac{1}{3} D \\mathbf{1}\\] therefore \\[ d\\mathbf{e}^p = \\langle L \\rangle \\mathbf{R'}\\] and \\(d\\varepsilon^p_v = \\langle L \\rangle D\\) . The hardening modulus in this model is defined as \\[ K_p = \\frac{2}{3} p h (\\mathbf{\\alpha}^b_{\\theta} - \\mathbf{\\alpha}): \\mathbf{n}\\] where \\(\\mathbf{n}\\) is the deviatoric part of the gradient to yield surface. \\[ \\mathbf{\\alpha}^b_{\\theta} = \\sqrt{\\frac{2}{3}} \\left[g(\\theta,c) M_c exp(-n^b\\Psi) - m\\right] \\mathbf{n}\\] , \\(\\Psi\\) being the state parameter. The hardening parameter, \\(h\\) , is defined as \\[ h = \\frac{b_0}{(\\mathbf{\\alpha}-\\mathbf{\\alpha_{in}}):\\mathbf{n}} \\] , \\(\\mathbf{\\alpha_{in}}\\!\\) is the value of \\(\\mathbf{\\alpha}\\!\\) at initiation of loading cycle. \\[b_0 = G_0 h_0 (1-c_h e) \\left(\\frac{p}{p_{atm}}\\right)^{-1/2}\\] Also the dilation parameters are defined as \\[ D = A_d (\\mathbf{\\alpha}^d_{\\theta}-\\mathbf{\\alpha}) : \\mathbf{n} \\] \\[ \\mathbf{\\alpha}^d_{\\theta} = \\sqrt{\\frac{2}{3}} \\left[g(\\theta,c) M_c exp(n^d\\Psi) - m\\right] \\mathbf{n} \\] \\[ A_d = A_0 (1+\\langle \\mathbf{z : n}\\rangle)\\] where \\(\\mathbf{z}\\) is the fabric tensor. The evolution of fabric and the back stress-ratio tensors are defined as \\[d\\mathbf{z} = - c_z \\langle -d\\varepsilon^p_v \\rangle (z_{max}\\mathbf{n}+\\mathbf{z}) \\] \\[ d\\mathbf{\\alpha} = \\langle L \\rangle (2/3) h (\\mathbf{\\alpha}^b_{\\theta} - \\mathbf{\\alpha}) \\] Examples This example, provides an undrained confined triaxial compression test using one 8-node SSPBrickUP element and ManzariDafalias material model. Tcl script # ===================================================================== # # 3D Undrained Conventional Triaxial Compression Test Using One Element # # University of Washington, Department of Civil and Environmental Eng # # Geotechnical Eng Group, A. Ghofrani, P. Arduino - Dec 2013 # # Basic units are m, Ton(metric), s # # ===================================================================== # wipe # ------------------------ # # Test Specific parameters # # ------------------------ # # Confinement Stress set pConf -300 .0 # Deviatoric strain set devDisp -0 .3 # Permeablity set perm 1.0e-10 # Initial void ratio set vR 0.8 # Rayleigh damping parameter set damp 0.1 set omega1 0.0157 set omega2 64.123 set a1 [expr 2.0 * $damp /( $omega1 + $omega2 ) ] set a0 [expr $a1 * $omega1 * $omega2 ] # ===================================================================== # ---------------------------Create Model------------------------------ # ===================================================================== # Create a 3D model with 4 Degrees of Freedom model BasicBuilder -ndm 3 -ndf 4 # Create nodes node 1 1.0 0.0 0.0 node 2 1.0 1.0 0.0 node 3 0.0 1.0 0.0 node 4 0.0 0.0 0.0 node 5 1.0 0.0 1.0 node 6 1.0 1.0 1.0 node 7 0.0 1.0 1.0 node 8 0.0 0.0 1.0 # Create Fixities fix 1 0 1 1 1 fix 2 0 0 1 1 fix 3 1 0 1 1 fix 4 1 1 1 1 fix 5 0 1 0 1 fix 6 0 0 0 1 fix 7 1 0 0 1 fix 8 1 1 0 1 # Create material # ManzariDafalias tag G0 nu e_init Mc c lambda_c e0 ksi P_atm m h0 ch nb A0 nd z_max cz Den nDMaterial ManzariDafalias 1 125 0.05 $vR 1.25 0.712 0.019 0.934 0.7 100 0.01 7.05 0.968 1.1 0.704 3.5 4 600 1.42 # Create element # SSPbrickUP tag i j k l m n p q matTag fBulk fDen k1 k2 k3 void alpha <b1 b2 b3> element SSPbrickUP 1 1 2 3 4 5 6 7 8 1 2.2e6 1.0 $perm $perm $perm $vR 1.5e-9 # Create recorders recorder Node - file disp.out - time -nodeRange 1 8 -dof 1 2 3 disp recorder Node - file press.out - time -nodeRange 1 8 -dof 4 vel recorder Element -file stress.out -time stress recorder Element -file strain.out -time strain recorder Element -file alpha.out - time alpha recorder Element -file fabric.out -time fabric # Create analysis constraints Penalty 1.0e18 1.0e18 test NormDispIncr 1.0e-5 20 1 algorithm Newton numberer RCM system BandGeneral integrator Newmark 0.5 0.25 rayleigh $a0 0. $a1 0.0 analysis Transient # Apply confinement pressure set pNode [expr $pConf / 4.0 ] pattern Plain 1 { Series -time { 0 10000 1e10 } -values { 0 1 1 } -factor 1 } { load 1 $pNode 0.0 0.0 0.0 load 2 $pNode $pNode 0.0 0.0 load 3 0.0 $pNode 0.0 0.0 load 4 0.0 0.0 0.0 0.0 load 5 $pNode 0.0 $pNode 0.0 load 6 $pNode $pNode $pNode 0.0 load 7 0.0 $pNode $pNode 0.0 load 8 0.0 0.0 $pNode 0.0 } analyze 100 100 # Let the model rest and waves damp out analyze 50 100 # Close drainage valves for {set x 1 } { $x < 9 } {incr x } { remove sp $x 4 } analyze 50 100 # Read vertical displacement of top plane set vertDisp [ nodeDisp 5 3 ] # Apply deviatoric strain set lValues [list 1 [expr 1 + $devDisp / $vertDisp ] [expr 1 + $devDisp / $vertDisp ]] set ts \"{Series -time {20000 1020000 10020000} -values { $ lValues} -factor 1}\" # loading object deviator stress eval \"pattern Plain 2 $ ts { sp 5 3 $ vertDisp sp 6 3 $ vertDisp sp 7 3 $ vertDisp sp 8 3 $ vertDisp }\" # Set number and length of (pseudo)time steps set dT 100 set numStep 10000 # Analyze and use substepping if needed set remStep $numStep set success 0 proc subStepAnalyze { dT subStep } { if { $subStep > 10 } { return -10 } for {set i 1 } { $i < 3 } {incr i } { puts \"Try dT = $ dT\" set success [ analyze 1 $dT ] if { $success != 0 } { set success [ subStepAnalyze [expr $dT / 2.0 ] [expr $subStep + 1 ]] if { $success == -10 } { puts \"Did not converge.\" return success } } else { if { $i == 1 } { puts \"Substep $ subStep : Left side converged with dT = $ dT\" } else { puts \"Substep $ subStep : Right side converged with dT = $ dT\" } } } return success } puts \"Start analysis\" set startT [clock seconds ] while { $success != -10 } { set subStep 0 set success [ analyze $remStep $dT ] if { $success == 0 } { puts \"Analysis Finished\" break } else { set curTime [ getTime ] puts \"Analysis failed at $ curTime . Try substepping.\" set success [ subStepAnalyze [expr $dT / 2.0 ] [incr subStep ]] set curStep [expr int(( $curTime -20000 )/ $dT + 1 ) ] set remStep [expr int( $numStep - $curStep ) ] puts \"Current step: $ curStep , Remaining steps: $ remStep\" } } set endT [clock seconds ] puts \"loading analysis execution time: [expr $ endT- $ startT] seconds.\" wipe References Dafalias YF, Manzari MT. \u201cSimple plasticity sand model accounting for fabric change effects\u201d. Journal of Engineering Mechanics 2004 Code Developed by: Alborz Ghofrani, Pedro Arduino, U Washington","title":"Manzari Dafalias Material"},{"location":"library/modeling/nd_material/geotechnical/405-MultiYieldSurfaceClay/","text":"MultiYieldSurfaceClay The \u2018MultiYieldSurfaceClay\u2019 is an elastic-plastic material in which plasticity exhibits only in the deviatoric stress-strain response. The volumetric stress-strain response is linear-elastic and is independent of the deviatoric response. This material is implemented to simulate monotonic or cyclic response of materials whose shear behavior is pressure independent. Such materials include, for example, organic soils or clay under fast (undrained) loading conditions. This material is available for sensitivity computation in both 2-D and 3-D models. It is another version of PressureIndependMultiYield material. However there are three differences between this model and PressureIndependMultiYield: This model uses the consistent tangent modulus instead of the continuum tangent modulus. This model does not support the updateMaterialStage command. This model does not support further discretization of the strain increment in each iteration. nDmaterial MultiYieldSurfaceClay $matTag $nd $rho $G $K $cohesion $peakShearStrain matTag unique material object integer tag nd number of dimensions, 2 for 2-D analysis (plane-strain), and 3 for 3-D analysis rho saturated soil mass density G reference low-strain shear modulus K reference bulk modulus cohesion peak shear (apparent cohesion at zero effective confinement) peakShearStrain strain at peak shear, i.e., the octahedral shear strain at which the maximum shear strength is reached Note: For this material class, the sensitivity parameters can be: G, K, cohesion. References Gu Q., Conte J.P., Elgamal A., Yang Z. (2009). \u201cFinite element response sensitivity analysis of multi-yield-surface J2 plasticity model by direct differentiation method.\u201d Computer Methods in Applied Mechanics and Engineering, 198(30-32):2272-2285.","title":"MultiYieldSurfaceClay"},{"location":"library/modeling/nd_material/geotechnical/487-PM4Sand%20Material/","text":"PM4Sand This page has been moved to the new OpenSees documentation site This command is used to construct a 2-dimensional PM4Sand material. nDmaterial PM4Sand $matTag $Dr $G0 $hpo $Den &lt; $patm $h0 $emax $emin $nb $nd $Ado $zmax $cz $ce $phic $nu $cgd $cdr $ckaf $Q $R $m $Fsed_min $p_sedo &gt; matTag integer tag identifying material Primary : Dr Relative density, in fraction G0 Shear modulus constant hpo Contraction rate parameter Den Mass density of the material Secondary : P_atm Optional , Atmospheric pressure h0 Optional , Variable that adjusts the ratio of plastic modulus to elastic modulus $emax and $emin Optional , Maximum and minimum void ratios nb Optional , Bounding surface parameter, $nb &ge; 0 nd Optional , Dilatancy surface parameter $nd &ge; 0 Ado Optional , Dilatancy parameter, will be computed at the time of initialization if input value is negative z_max Optional , Fabric-dilatancy tensor parameter cz Optional , Fabric-dilatancy tensor parameter ce Optional , Variable that adjusts the rate of strain accumulation in cyclic loading phic Optional , Critical state effective friction angle nu Optional , Poisson\u2019s ratio cgd Optional , Variable that adjusts degradation of elastic modulus with accumulation of fabric cdr Optional , Variable that controls the rotated dilatancy surface ckaf Optional , Variable that controls the effect that sustained static shear stresses have on plastic modulus Q Optional , Critical state line parameter R Optional , Critical state line parameter m Optional , Yield surface constant (radius of yield surface in stress ratio space) Fsed_min Optional , Variable that controls the minimum value the reduction factor of the elastic moduli can get during reconsolidation p_sedo Optional , Mean effective stress up to which reconsolidation strains are enhanced The material formulation for the PM4Sand object is \u201cPlaneStrain\u201d Code Developed by: Long Chen, Pedro Arduino, U Washington Notes This page has been moved to the new OpenSees documentation site Valid Element Recorder queries are stress , strain alpha (or backstressratio ) for <math></math> fabric for \\(\\mathbf{z}\\) alpha_in (or alphain ) for <math></math> e.g. recorder Element -eleRange 1 $numElem -time -file stress.out stress Elastic or Elastoplastic response could be enforced by {| |Elastic: ||updateMaterialStage -material $matTag -stage 0 |- |Elastoplastic: ||updateMaterialStage -material $matTag -stage 1 |} The program will use the default value of a secondary parameter if a negative input is assigned to that parameter, e.g. Ado = -1. However, FirstCall is mandatory when switching from elastic to elastoplastic if negative inputs are assigned to stress-dependent secondary parameters, e.g. Ado and zmax. FirstCall can be set as, setParameter -value 0 -ele $elementTag FirstCall $matTag Post-shake reconsolidation can be activated by setParameter -value 1 -ele $elementTag Postshake $matTag The user should check that the results are not sensitive to time step size. Example <table border=1 width=600> <tr> <td width=90> Example 1 </td> <td>2D undrained monotonic direct simple shear test using one element</td> </tr> <tr> <td> Example 2 </td> <td>2D undrained cyclic direct simple shear test using one element</td> </tr> </table> References R.W.Boulanger, K.Ziotopoulou. \u201cPM4Sand(Version 3.1): A Sand Plasticity Model for Earthquake Engineering Applications\u201d. Report No. UCD/CGM-17/01 2017","title":"PM4Sand"},{"location":"library/modeling/nd_material/geotechnical/488-PM4Silt%20Material%20%28Beta%29/","text":"PM4Silt Material (Beta) This page has been moved to the new OpenSees documentation site This command is used to construct a 2-dimensional PM4Silt material. nDMaterial PM4Silt $matTag $S_u $Su_Rat $G_o $h_po $Den &lt; $Su_factor $Patm $nu $nG $h0 $eInit $lambda $phicv $nb_wet $nb_dry $nd $Ado $ru_max $zmax $cz $ce $Cgd $ckaf $m_m $CG_consol &gt; matTag integer tag identifying material Primary : S_u Undrained shear strength Su_Rat Undrained shear strength ratio. If both S_u and Su_Rat values are specified, the value of S_u is used. G_o Shear modulus constant h_po Contraction rate parameter Den Mass density of the material Su_factor Optional , Undrained shear strength reduction factor P_atm Optional , Atmospheric pressure Secondary : nu Optional , Poisson\u2019s ratio. Default value is 0.3. nG Optional , Shear modulus exponent. Default value is 0.75. h0 Optional , Variable that adjusts the ratio of plastic modulus to elastic modulus. Default value is 0.5. eInit Optional , Initial void ratios. Default value is 0.90. lambda Optional , The slope of critical state line in e-ln(p) space. Default value is 0.060. phicv Optional , Critical state effective friction angle. Default value is 32 degrees. nb_wet Optional , Bounding surface parameter for loose of critical state conditions, 1.0 &ge; $nb_wet &ge; 0.01. Default value is 0.8. nb_dry Optional , Bounding surface parameter for dense of critical state conditions, $nb_dry &ge; 0. Default value is 0.5. nd Optional , Dilatancy surface parameter $nd &ge; 0. Default value is 0.3. Ado Optional , Dilatancy parameter. Default value is 0.8. ru_max Optional , Maximum pore pressure ratio based on p\u2019. z_max Optional , Fabric-dilatancy tensor parameter cz Optional , Fabric-dilatancy tensor parameter. Default value is 100.0. ce Optional , Variable that adjusts the rate of strain accumulation in cyclic loading cgd Optional , Variable that adjusts degradation of elastic modulus with accumulation of fabric. Default value is 3.0. ckaf Optional , Variable that controls the effect that sustained static shear stresses have on plastic modulus. Default value is 4.0. m_m Optional , Yield surface constant (radius of yield surface in stress ratio space). Default value is 0.01. CG_consol Optional , Reduction factor of elastic modulus for reconsolidation. $CG_consol &ge; 1. Default value is 2.0. The material formulation for the PM4Silt object is \u201cPlaneStrain\u201d Code Developed by: Long Chen, Pedro Arduino, U Washington Notes Valid Element Recorder queries are stress , strain alpha (or backstressratio ) for <math></math> fabric for \\(\\mathbf{z}\\) alpha_in (or alphain ) for <math></math> e.g. recorder Element -eleRange 1 $numElem -time -file stress.out stress Elastic or Elastoplastic response could be enforced by {| |Elastic: ||updateMaterialStage -material $matTag -stage 0 |- |Elastoplastic: ||updateMaterialStage -material $matTag -stage 1 |} If default values are used for secondary parameters, the model must be initialized after elastic gravity stage by setParameter -value 0 -ele $elementTag FirstCall $matTag Post-shake reconsolidation can be activated by setParameter -value 1 -ele $elementTag Postshake $matTag Example <table border=1 width=600> <tr> <td width=90> Example 1 </td> <td>2D undrained monotonic direct simple shear test using one element</td> </tr> <tr> <td> Example 2 </td> <td>2D undrained cyclic direct simple shear test using one element</td> </tr> </table> References R.W.Boulanger, K.Ziotopoulou. \u201cPM4Silt(Version 1): A Silt Plasticity Model for Earthquake Engineering Applications\u201d. Report No. UCD/CGM-18/01 2018","title":"PM4Silt Material (Beta)"},{"location":"library/modeling/nd_material/geotechnical/65-Bounding%20Cam%20Clay/","text":"Bounding Cam Clay This command is used to construct a multi-dimensional bounding surface Cam Clay material object after Borja et al. (2001). The material formulations for the BoundingCamClay object are ThreeDimensional and PlaneStrain nDMaterial BoundingCamClay $matTag $massDensity $C $bulkMod $OCR $mu_o $alpha $lambda $h $m matTag integer tag identifying material massDensity mass density C ellipsoidal axis ratio (defines shape of ellipsoidal loading/bounding surfaces) bulkMod initial bulk modulus OCR overconsolidation ratio mu_o initial shear modulus alpha pressure-dependency parameter for modulii (greater than or equal to zero) lambda soil compressibility index for virgin loading h hardening parameter for plastic response inside of bounding surface (if h = 0, no hardening) m hardening parameter (exponent) for plastic response inside of bounding surface (if m = 0, only linear hardening) General Information This nDMaterial object provides the bounding surface plasticity model of Borja et al. (2001) in which the bounding surface model is represented using modified Cam-Clay theory (Schofield and Wroth 1968). In addition to the standard capabilities of the Cam-Clay family of models (e.g., pressure dependence, hardening with plastic volumetric contraction, softening with plastic dilation, and coupled deviatoric and volumetric plastic deformation), the Borja et al. (2001) model has been enhanced to include an anisotropic bounding surface formulation that allows for consideration of hysteretic behaviour under cyclic loading. This bounding surface Cam-Clay model is coupled with a nonlinear hyperelastic model that considered pressure-dependency in the bulk and shear modulus. The full theory of this model is discussed in great detail in Borja et al. (2001). Notes The ellipsoidal axis ratio parameter $C is defined such that the ellipsoidal surfaces are C times as wide in the deviatoric direction as they are along the hydrostatic axis. When $C = 1, the surfaces are spherical. The overconsolidation ratio (input parameter $OCR) defines the relationship between the loading surface and bounding surface. The radius of the bounding surface, R, is equal to the product of the OCR and the radius of the loading surface, r. When the soil is normally consolidated and $OCR = 1, the bounding and loading surfaces are coincident and virgin loading will occur. When the hyperelastic pressure-dependency parameter (input parameter $alpha) is set to zero, the elastic shear modulus will be constant with a value equal to the initial shear modulus (input parameter $mu_o) and the deviatoric and volumetric responses are uncoupled in the elastic regime. The virgin compressibility parameter (input parameter $lambda) describes the relationship between the specific volume v = 1 + e and the logarithm of the mean effective stress (where e is the void ratio). This is is related to the compression index \\(C_c\\) that describes the relationship between the void ratio and the logarithm of the mean effective stress in consolidation testing. Usage Examples The following usage example provides the input parameters used in the single element examples of Borja et al. (2001). The initial bulk modulus is determined from the initial mean stress desired in the test (in this case p = 100 kPa) divided by the recompressibilty index kappa = 0.018. The units of this analysis are kN and m, thus the prescribed initial shear modulus of 5.4 MPa is input as 5400 kPa. The hardening parameter $h has the same units as the moduli. set rho 1.8 set c 1.0 set bulk 5555.56 set OCR 1.5 set mu_o 5.4e3 set alpha 0.0 set lambda 0.13 set h 5.0e3 set m 1.5 nDMaterial BoundingCamClay 1 $rho $c $bulk $OCR $mu_o $alpha $lambda $h $m References Borja, R.I., Lin, C.-H., and Montans, F.J. (2001) \u2018Cam-Clay plasticity, Part IV: Implicit integration of anisotropic bounding surface model with nonlinear hyperelasticity and ellipsoidal loading function,\u2019 Computer Methods in Applied Mechanics and Engineering, 190(26), 3293-3323, doi: 10.1016/S0045-7825(00)00301-7. Schofield, A. and Wroth, P. (1968) Critical State Soil Mechanics, McGraw Hill, New York. Example Analysis Code developed by: Chris McGann & Pedro Arduino , at the University of Washington","title":"Bounding Cam Clay"},{"location":"library/modeling/nd_material/geotechnical/671-Stress%20Density%20Material/","text":"Stress Density Material This command is used to construct a multi-dimensional stress density material object for modeling sand behaviour following the work of Cubrinovski and Ishihara (1998a,b). Note that as of January 2020 this material is still undergoing verification testing for more complex loading and initial conditions. nDMaterial stressDensity $matTag $mDen $eNot $A $n $nu $a1 $b1 $a2 $b2 $a3 $b3 $fd $muNot $muCyc $sc $M $patm < $ssl1 $ssl2 $ssl3 $ssl4 $ssl5 $ssl6 $ssl7 $hsl $pmin > matTag integer tag identifying material mDen mass density eNot initial void ratio A constant for elastic shear modulus n pressure dependency exponent for elastic shear modulus nu Poisson\u2019s ratio a1 peak stress ratio coefficient (etaMax = a1 + b1*Is) b1 peak stress ratio coefficient (etaMax = a1 + b1*Is) a2 max shear modulus coefficient (Gn_max = a2 + b2*Is) b2 max shear modulus coefficient (Gn_max = a2 + b2*Is) a3 min shear modulus coefficient (Gn_min = a3 + b3*Is) b3 min shear modulus coefficient (Gn_min = a3 + b3*Is) fd degradation constant muNot dilatancy coefficient (monotonic loading) muCyc dilatancy coefficient (cyclic loading) sc dilatancy strain M critical state stress ratio patm atmospheric pressure (in appropriate units) Optional steady state line parameters (default values shown for each, be careful with units) ssl1 void ratio of quasi steady state (QSS-line) at pressure $pmin (default = 0.877) ssl2 void ratio of quasi steady state (QSS-line) at 10 kPa (default = 0.877) ssl3 void ratio of quasi steady state (QSS-line) at 30 kPa (default = 0.873) ssl4 void ratio of quasi steady state (QSS-line) at 50 kPa (default = 0.870) ssl5 void ratio of quasi steady state (QSS-line) at 100 kPa (default = 0.860) ssl6 void ratio of quasi steady state (QSS-line) at 200 kPa (default = 0.850) ssl7 void ratio of quasi steady state (QSS-line) at 400 kPa (default = 0.833) hsl void ratio of upper reference state (UR-line) for all pressures (default = 0.895) pmin pressure corresponding to $ssl1 (default = 1.0 kPa) The material formulations for the stressDensity object are \u201cPlaneStrain\u201d General Information This nDMaterial object provides the stress density model for sands under monotonic and cyclic loading as set forth by Cubrinovski and Ishihara (1998a,b). The original formulation for this model was applicable to plane strain conditions and this is the only currently available formulation. Notes Examples The following example provides the input parameters for dry pluviated Toyura sand (with initial void ratio e = 0.73) after Cubrinovski and Ishihara (1998b). The units of this analysis are Mg, kN, s, and m. # mass density set mDen 1.8 # atmospheric pressure set patm 98.1 # stress density model parameters set eNot 0.730 set A 250.0 set n 0.60 set a1 0.58 set b1 0.023 set a2 230.0 set b2 65.0 set a3 79.0 set b3 16.0 set fd 4.0 set muNot 0.22 set muCyc 0.0 set sc 0.0055 set M 0.607 nDMaterial stressDensity 1 $mDen \\ $eNot $A $n $nu $a1 $b1 $a2 $b2 $a3 $b3 $fd $muNot $ muCyc $sc $M $patm Example Analysis Element test with pure shear loading starting from isotropic initial state of stress. Tcl Script # intended number of cycles in the test set nCycles 120 # shear strain increment for the test set dg 0.0001 set wg [expr 2.0 * $dg ] # max number of steps set maxStep 20000 # initial confinement pressure (kPa) set pNot -95 .0 # max/min shear stress in the test (kPa) set CSR 0.2 set maxShear [expr - $CSR * $pNot ] wipe model BasicBuilder -ndm 2 -ndf 2 # Create nodes node 1 0.0 0.0 node 2 1.0 0.0 node 3 1.0 1.0 node 4 0.0 1.0 # Create fixities fix 1 1 1 fix 2 1 1 fix 3 1 1 fix 4 1 1 # atmospheric pressure set patm 98.1 # mass density set mDen 1.8 # steady state line void ratio set ssl1 0.832 set ssl2 0.832 set ssl3 0.810 set ssl4 0.796 set ssl5 0.776 set ssl6 0.756 set ssl7 0.735 # hydrostatic state line void ratio set hsl 0.852 # reference pressures for state lines set p1 1.0 # stress density model parameters set A 250.0 set m 0.60 set nu 0.20 set a1 0.592 set b1 0.021 set a2 291.0 set b2 55.0 set a3 98.0 set b3 13.0 set fd 4.0 set muNot 0.15 set sc 0.0055 set M 0.607 # initial void ratio set emax 0.885 set emin 0.541 set Dr 0.54 set eNot [expr $emax - $Dr *( $emax - $emin ) ] set muCyc 0.0 # Create material nDMaterial stressDensity 2 $mDen $eNot $A $m $nu \\ $a1 $b1 $a2 $b2 $a3 $b3 $fd $muNot $muCyc \\ $sc $M $patm $ssl1 $ssl2 $ssl3 $ssl4 $ssl5 $ssl6 $ssl7 $hsl $p1 nDMaterial InitStress 1 2 $pNot 2 # Create element element SSPquad 1 1 2 3 4 1 PlaneStrain 1.0 0.0 0.0 # Create recorders recorder Element -file stress.out -time stress recorder Element -file strain.out -time strain recorder Node -file disp.out -time -dof 1 2 disp set dt 0.1 # Create analysis constraints Penalty 1.0e18 1.0e18 algorithm Linear numberer RCM system ProfileSPD integrator LoadControl $dt analysis Static set dMax [expr 0.6 / $wg ] eval \"timeSeries Path 400 -time {0 0.1 0.2 300.2} -values {0 0 0 $ dMax} -factor 1.0\" pattern Plain 400 400 { sp 3 1 $wg sp 4 1 $wg } analyze 1 setParameter -value 1 -ele 1 materialState analyze 1 # counter for max number of steps set count 0 set cCount 0 set cyc 1 puts \"Beginning of Cycle 1\" # loop through the total number of cycles for {set i 1 } { $i <= [expr 2 * $nCycles ]} {incr i } { if { $cCount == 2 } { set cyc [expr $cyc + 1 ] puts \"Beginning of Cycle $ cyc\" set cCount 0 } # loop within each cycle for {set j 1 } { $j < 5000 } {incr j } { # abort if count is greater than max number of steps if { $count &gt;= $maxStep } {break} # analyze single step and get the current stress analyze 1 set count [expr $count + 1 ] # get stress from element set stress [ eleResponse 1 stress ] # shear stress is component 2 set tau [lindex $stress 2 ] # signal change in loading direction if needed if {[expr abs( $tau ) ] >= $maxShear } { # get strain from element set strain [ eleResponse 1 strain ] set gamma [lindex $strain 2 ] puts \"direction change required: tau = $ tau; gamma = $ gamma\" # get current displacements of shearing nodes set f [expr 2.0 * [ nodeDisp 3 1 ]] set b [expr 2.0 * [ nodeDisp 4 1 ]] # puts \"current displacement of front row is $f\" # puts \"current displacement of back row is $b\" # get number of steps required to reach current disp from zero set nStep [expr round(abs( $b / $wg )) ] # puts \"there are $nStep steps needed to get back to neutral loading\" # get current time set cTime [ getTime ] # puts \"current time is $cTime\" # set an end time for the load patterns set zTime [expr $cTime + $nStep * $dt ] set eTime [expr $zTime + 100.0 * $nStep ] # puts \"end time for the new load pattern is $eTime\" remove loadPattern [expr 400 + $i -1 ] eval \"timeSeries Path [expr 400+ $ i] -time { $ cTime $ eTime 1e10} -values {1 -1000 -1000}\" pattern Plain [expr 400 + $i ] [expr 400 + $i ] { sp 3 1 $b sp 4 1 $b } set cCount [expr $cCount + 1 ] break } } } wipe References Cubrinovski, M. and Ishihara K. (1998a) \u2018Modelling of sand behaviour based on state concept,\u2019 Soils and Foundations, 38(3), 115-127. Cubrinovski, M. and Ishihara K. (1998b) \u2018State concept and modified elastoplasticity for sand modelling,\u2019 Soils and Foundations, 38(4), 213-225. Code developed by: Saumyashuchi Das , University of Canterbury. Maintained by: Chris McGann","title":"Stress Density Material"},{"location":"library/modeling/nd_material/metallic/348-J2%20Plasticity%20Material/","text":"J2 Plasticity Material This command is used to construct an multi dimensional material object that has a von Mises (J2) yield criterium and isotropic hardening. nDMaterial J2Plasticity $matTag $K $G $sig0 $sigInf $delta $H matTag integer tag identifying material K bulk modulus G shear modulus sig0 initial yield stress sigInf final saturation yield stress delta exponential hardening parameter H linear hardening parameter The material formulations for the J2 object are \"ThreeDimensional\" , \"PlaneStrain\" , \"Plane Stress\" , \"AxiSymmetric\" and \"PlateFiber\" . Theory The theory for the non hardening case can be found http://en.wikipedia.org/wiki/Von_Mises_yield_criterion \\(J_2\\) isotropic hardening material Elastic Model \\[\\sigma = K \\operatorname{tr}(\\epsilon_e) + 2G \\operatorname{dev}(\\epsilon_e)\\] Yield Function \\[\\phi(\\sigma, q) = \\| \\operatorname{dev}(\\sigma) \\| - \\sqrt{\\tfrac{2}{3}} q(\\xi)\\] Saturation Isotropic Hardening with linear term \\[q(\\xi) = \\sigma_0 + (\\sigma_\\inf - \\sigma_0) \\exp(-delta \\xi) + H \\xi \\] Flow Rules \\[\\dot {\\epsilon_p} = \\gamma \\frac{\\partial \\phi}{\\partial \\sigma} \\] \\[\\dot \\xi = -\\gamma \\frac{\\partial \\phi}{\\partial q}\\] Linear Viscosity ( if \\(\\phi \\gt 0\\) ) \\[\\gamma = \\frac{\\phi}{\\eta}\\] Backward Euler Integration Routine Yield condition enforced at time \\(n+1\\) set \\(\\eta = 0\\) for rate independent case Code developed by: Ed Love","title":"J2 Plasticity Material"},{"location":"library/modeling/nd_material/metallic/727-UVCmultiaxial%20%28Updated%20Voce-Chaboche%29/","text":"UVCmultiaxial (Updated Voce-Chaboche) This command is used to construct an Updated Voce-Chaboche (UVC) material for general multiaxial stress states (e.g., for solid/brick elements). This material is a refined version of the classic nonlinear isotropic/kinematic hardening material model based on the Voce isotropic hardening law and the Chaboche kinematic hardening law. The UVC model contains an updated isotropic hardening law, with parameter constraints, to simulate the permanent decrease in yield stress with initial plastic loading associated with the discontinuous yielding phenomenon in mild steels. Details regarding the model, its implementation, and calibration can be found in the references cited at the end. The plane-stress (e.g., for quad/plate/shell elements) and uniaxial (e.g., for beam elements) versions are also available. The plane-stress and uniaxial implementations have the exact same hardening rules as this general multiaxial model, and only differ in their purpose and numerical implementation. Available in OpenSees version 3.1.0+. nDMaterial UVCmultiaxial $matTag $E $nu $fy $QInf $b $DInf $a $N $C1 $gamma1 &lt; $C2 $gamma2 $C3 $gamma3 \u2026 $C8 $gamma8 &gt; matTag Integer tag identifying the material. E Elastic modulus of the steel material. nu Poisson\u2019s ratio for the steel material. fy Initial yield stress of the steel material. QInf Maximum increase in yield stress due to cyclic hardening (isotropic hardening). b Saturation rate of QInf, b > 0. DInf Decrease in the initial yield stress, to neglect the model updates set DInf = 0. a Saturation rate of DInf, a > 0. If DInf == 0, then a is arbitrary (but still a > 0). N Number of backstresses to define, N >= 1. C1 Kinematic hardening parameter associated with backstress component 1. gamma1 Saturation rate of kinematic hardening associated with backstress component 1. <$C2 $gamma2 $C3 $gamma3 \u2026 $C8 $gamma8> Additional backstress parameters, up to 8 may be specified. If C is specified, then the corresponding gamma must also be specified. Note that only the first N backstresses will be read by the parser. Examples, validation, and UVC model parameters For the user, the only practical difference between the uniaxial and multiaxial/plane-stress implementations is the specification of Poisson\u2019s ratio in the list of input parameters. Further information on the UVC model is centralized at the UVCuniaxial web page. On the UVCuniaxial page you will find examples validating the model, and UVC model parameters for common structural steels that are applicable for all stress states. References : Please use Reference [1] when citing the UVC model. [1] Hartloper, A. R., de Castro e Sousa A., and Lignos D.G. (2019). \u201cConstitutive Modeling of Structural Steels: A Nonlinear Isotropic/Kinematic Hardening Material Model and its Calibration\u201d, https://doi.org/10.1061/(ASCE)ST.1943-541X.0002964 . [2] Hartloper, A. R., de Castro e Sousa A., and Lignos D.G. (2019). \u201cSensitivity of Simulated Steel Column Instabilities to Plasticity Model Assumptions\u201d. 12th Canadian Conference on Earthquake Engineering, Quebec City, QC, Canada. https://infoscience.epfl.ch/record/267788 [3] Hartloper, A. R., de Castro e Sousa A., and Lignos D.G. (2019). \u201cA Nonlinear Isotropic/Kinematic Hardening Model for Materials with Discontinuous Yielding\u201d. Report No. 271062, Resilient Steel Structures Laboratory (RESSLab), EPFL, Lausanne, Switzerland. https://infoscience.epfl.ch/record/271062 . Code developed, implemented, and maintained by: Alex Hartloper (EPFL). Issues, bugs, and feature requests can be opened at the github repository .","title":"UVCmultiaxial (Updated Voce-Chaboche)"},{"location":"library/modeling/nd_material/metallic/728-UVCplanestress%20%28Updated%20Voce-Chaboche%29/","text":"UVCplanestress (Updated Voce-Chaboche) This command is used to construct an Updated Voce-Chaboche (UVC) material for plane-stress stress states (e.g., for quad/plate/shell elements). This material is a refined version of the classic nonlinear isotropic/kinematic hardening material model based on the Voce isotropic hardening law and the Chaboche kinematic hardening law. The UVC model contains an updated isotropic hardening law, with parameter constraints, to simulate the permanent decrease in yield stress with initial plastic loading associated with the discontinuous yielding phenomenon in mild steels. Details regarding the model, its implementation, and calibration can be found in the references cited at the end. The multiaxial (e.g., for solid/brick elements) and uniaxial (e.g., for beam elements) versions are also available. The multiaxial and uniaxial implementations have the exact same hardening rules as this plane-stress model, and only differ in their purpose and numerical implementation. Available in OpenSees version 3.1.0+. nDMaterial UVCplanestress $matTag $E $nu $fy $QInf $b $DInf $a $N $C1 $gamma1 &lt; $C2 $gamma2 $C3 $gamma3 \u2026 $C8 $gamma8 &gt; matTag Integer tag identifying the material. E Elastic modulus of the steel material. nu Poisson\u2019s ratio for the steel material. fy Initial yield stress of the steel material. QInf Maximum increase in yield stress due to cyclic hardening (isotropic hardening). b Saturation rate of QInf, b > 0. DInf Decrease in the initial yield stress, to neglect the model updates set DInf = 0. a Saturation rate of DInf, a > 0. If DInf == 0, then a is arbitrary (but still a > 0). N Number of backstresses to define, N >= 1. C1 Kinematic hardening parameter associated with backstress component 1. gamma1 Saturation rate of kinematic hardening associated with backstress component 1. <$C2 $gamma2 $C3 $gamma3 \u2026 $C8 $gamma8> Additional backstress parameters, up to 8 may be specified. If C is specified, then the corresponding gamma must also be specified. Note that only the first N backstresses will be read by the parser. Examples, validation, and UVC model parameters For the user, the only practical difference between the uniaxial and multiaxial/plane-stress implementations is the specification of Poisson\u2019s ratio in the list of input parameters. Further information on the UVC model is centralized at the UVCuniaxial web page. On the UVCuniaxial page you will find examples validating the model, and UVC model parameters for common structural steels that are applicable for all stress states. References : Please use Reference [1] when citing the UVC model. [1] Hartloper, A. R., de Castro e Sousa A., and Lignos D.G. (2019). \u201cConstitutive Modeling of Structural Steels: A Nonlinear Isotropic/Kinematic Hardening Material Model and its Calibration\u201d, https://doi.org/10.1061/(ASCE)ST.1943-541X.0002964 . [2] Hartloper, A. R., de Castro e Sousa A., and Lignos D.G. (2019). \u201cSensitivity of Simulated Steel Column Instabilities to Plasticity Model Assumptions\u201d. 12th Canadian Conference on Earthquake Engineering, Quebec City, QC, Canada. https://infoscience.epfl.ch/record/267788 [3] Hartloper, A. R., de Castro e Sousa A., and Lignos D.G. (2019). \u201cA Nonlinear Isotropic/Kinematic Hardening Model for Materials with Discontinuous Yielding\u201d. Report No. 271062, Resilient Steel Structures Laboratory (RESSLab), EPFL, Lausanne, Switzerland. https://infoscience.epfl.ch/record/271062 . Code developed, implemented, and maintained by: Alex Hartloper (EPFL). Issues, bugs, and feature requests can be opened at the github repository .","title":"UVCplanestress (Updated Voce-Chaboche)"},{"location":"library/modeling/nd_material/wrapper/338-InitialStateAnalysisWrapper/","text":"InitialStateAnalysisWrapper This command is used to construct an InitialStateAnalysisWrapper nDMaterial object. nDMaterial InitialStateAnalysisWrapper $matTag $nDMatTag $nDim eleTag unique integer tag identifying nDMaterial object nDMatTag the tag of the associated nDMaterial object nDim number of dimensions (2 for 2D, 3 for 3D) The InitialStateAnalysisWrapper nDMaterial allows for the use of the InitialStateAnalysis command for setting initial conditions. The InitialStateAnalysisWrapper can be used with any nDMaterial. This material wrapper allows for the development of an initial stress field while maintaining the original geometry of the problem. An example analysis is provided below to demonstrate the use of this material wrapper object. NOTES: There are no valid recorder queries for the InitialStateAnalysisWrapper. The InitialStateAnalysis off command removes all previously defined recorders. Two sets of recorders are needed if the results before and after this command are desired. See the example below for more. The InitialStateAnalysisWrapper material is somewhat tricky to use in dynamic analysis. Sometimes setting the displacement to zero appears to be interpreted as an initial displacement in subsequent steps, resulting in undesirable vibrations. EXAMPLES: InitialStateAnalysisWrapper definition with material tag 1, and associated nDMaterial tag 2 for a 2D analysis nDMaterial InitialStateAnalysisWrapper 1 2 2 Code Developed by: Chris McGann, Pedro Arduino, & Peter Mackenzie-Helnwein, at the University of Washington EXAMPLE ANALYSIS: The example input file below demonstrates an how the InitialStateAnalysis command can be used with the InitialStateAnalysisWrapper to generate a gravitational state of stress in a single element. As shown below, the use of the InitialStateAnalysis command necessitates the use of two sets of recorders, one to record results during the initial state analysis, and one for all subsequent steps. It is not required to record results during the initial state analysis, but the example below includes this data to demonstrate the effect of the InitialStateAnalysis command. At the end of the analysis, there should be non-zero stress and strain in the element with zero displacement. wipe</p> <p>model BasicBuilder -ndm 3 -ndf 3 </p> <ol> <li> create the nodes</li> </ol> <p>node 1 1.0 0.0 0.0 node 2 1.0 1.0 0.0 node 3 0.0 1.0 0.0 node 4 0.0 0.0 0.0 node 5 1.0 0.0 1.0 node 6 1.0 1.0 1.0 node 7 0.0 1.0 1.0 node 8 0.0 0.0 1.0 </p> <ol> <li>boundary conditions</li> </ol> <p>fix 1 1 1 1 fix 2 1 1 1 fix 3 1 1 1 fix 4 1 1 1 fix 5 1 1 0 fix 6 1 1 0 fix 7 1 1 0 fix 8 1 1 0 </p> <ol> <li>define main material obeject</li> </ol> <p>nDMaterial ElasticIsotropic 1 25000 0.35 </p> <ol> <li>define material wrapper</li> </ol> <p>nDMaterial InitialStateAnalysisWrapper 2 1 3 </p> <ol> <li> create the element (NOTE: the material tag associated with this element is that of the wrapper)</li> </ol> <p>element SSPbrick 1 1 2 3 4 5 6 7 8 2 0.0 0.0 -17 .0 </p> <ol> <li> create the pre-gravity recorders</li> </ol> <p> set step 0.1 </p> <p>recorder Node -time -file Gdisp.out -dT $step -nodeRange 5 8 -dof 1 2 3 disp recorder Element -ele 1 -time -file Gstress.out -dT $step stress recorder Element -ele 1 -time -file Gstrain.out -dT $step strain</p> <ol> <li> create the gravity analysis</li> </ol> <p>integrator LoadControl 0.5 numberer RCM system SparseGeneral constraints Transformation test NormDispIncr 1e-5 40 1 algorithm Newton analysis Static</p> <ol> <li>turn on the initial state analysis feature</li> </ol> <p>InitialStateAnalysis on</p> <ol> <li>analyze four steps</li> </ol> <p>analyze 4 </p> <ol> <li>turn off the initial state analysis feature</li> </ol> <p>InitialStateAnalysis off</p> <ol> <li> create post -gravity recorders</li> </ol> <p>recorder Node -time -file disp.out -dT $step -nodeRange 5 8 -dof 1 2 3 disp recorder Element -ele 1 -time -file stress.out -dT $step stress recorder Element -ele 1 -time -file strain.out -dT $step strain</p> <ol> <li>analyze for three steps, should have non-zero stress and strain with zero displacement</li> </ol> <p>analyze 3 </p> <p>wipe","title":"InitialStateAnalysisWrapper"},{"location":"library/modeling/nd_material/wrapper/511-Plane%20Strain%20Material/","text":"Plane Strain Material This command is used to construct a plane-stress material wrapper which converts any three-dimensional material into a plane strain material by imposing plain strain conditions on the three-dimensional material. nDMaterial PlaneStrain $matTag $threeDtag matTag integer tag identifying material threeDTag integer tag of previously defined 3d ndMaterial material The material formulations for the PlaneStrain object are \u201c\u201cPlane Strain\u201d Code Developed by: Antonios Vytiniotis, MIT","title":"Plane Strain Material"},{"location":"library/modeling/nd_material/wrapper/513-Plane%20Stress%20Material/","text":"Plane Stress Material This command is used to construct a plane-stress material wrapper which converts any three-dimensional material into a plane stress material via static condensation. nDMaterial PlaneStress $matTag $threeDtag matTag integer tag identifying material otherTag tag of perviously defined 3d ndMaterial material The material formulations for the PlaneStress object are \u201c\u201cPlane Stress\u201d Code Developed by: Ed Love","title":"Plane Stress Material"},{"location":"library/modeling/nd_material/wrapper/514-Plate%20Fiber%20Material/","text":"Plate Fiber Wrapper This command is used to construct a plate-fiber material wrapper which converts any three-dimensional material into a plate fiber material (by static condensation) appropriate for shell analysis. nDMaterial PlateFiber $matTag $threeDTag matTag integer tag identifying material threeDTag material tag for a previously-defined three-dimensional material","title":"Plate Fiber Wrapper"},{"location":"library/modeling/pattern/","text":"Load Patterns The opensees.pattern module (or pattern Tcl command) is used to construct a LoadPattern . Each LoadPattern in OpenSees has a TimeSeries associated with it. In addition it may contain ElementLoads , NodalLoads and SinglePointConstraints . Some of these SinglePoint constraints may be associated with GroundMotions . The Tcl command has the following form: pattern patternType? arg1? ... The type of pattern created and the additional arguments required depends on the patternType? provided in the command. The following contain information about patternType? and the additional args required for each of the available pattern types: Plain Pattern Uniform Excitation Pattern Multi-Support Excitation Pattern DRM Load Pattern Model.pattern(\u201c Path \u201d, name, time, values) time Array[float] values Array[float] scale float","title":"Load Patterns"},{"location":"library/modeling/pattern/403-Multi-Support%20Excitation%20Pattern/","text":"Multi-Support Excitation Pattern The Multi-Support pattern allows similar or different prescribed ground motions to be input at various supports in the structure. In OpenSees, the prescribed motion is applied using single-point constraints, the single-point constraints taking their constraint value from user created ground motions. '!theme mars !theme lightgray abstract class TimeSeries LoadPattern <|-- MultipleSupportExcitation MultipleSupportExcitation o- GroundMotion MultipleSupportExcitation o- ImposedMotionSP ImposedMotionSP --- GroundMotion SP_Constraint <|-- ImposedMotionSP GroundMotion o- TimeSeries The command to generate a multi-support excitation contains in { } the commands to generate all the ground motions and the single-point constraints in the pattern. The command is as follows: pattern MultipleSupport $patternTag { groundMotion \u2026 imposedMotion \u2026 \u2026 } patternTag unique tag among load patterns groundMotion \u2026 command to generate a ground motion imposedMotion \u2026 command to generate an imposed motion NOTES: The results for the responses at the nodes are the ABSOLUTE values, and not relative values as in the case of a UniformExciatation. The non-homogeneous single point constraints require an appropriate choice of constraint handler. Code Developed by: fmk","title":"Multi-Support Excitation Pattern"},{"location":"library/modeling/pattern/740-Uniform%20Excitation%20Pattern/","text":"Uniform Excitation Pattern The UniformExcitation pattern allows the user to apply a uniform excitation to a model acting in a certain direction. The resulting load pattern is applied as \\[ P(t) = \\ddot{u}_g \\mathbf{m} \\iota \\] The command is as follows: Model.pattern(\u201c UniformExcitation \u201d, name, dof, accel) dof int 1 corresponds to translation along the global 1 axis 2 corresponds to translation along the global 2 axis 3 corresponds to translation along the global 3 axis 4 corresponds to rotation about the global 1 axis 5 corresponds to rotation about the global 2 axis 6 corresponds to rotation about the global 3 axis accel Ref(Path) acceleration time series v0 float initial velocity. scale float NOTES: The responses obtained from the nodes for this type of excitation are RELATIVE values, and not the absolute values obtained from a multi-support case. Code Developed by: fmk","title":"Uniform Excitation Pattern"},{"location":"library/modeling/pattern/Multisupport_Excitation/","text":"Multisupport Excitation Model.pattern(\u201c MultipleSupport \u201d, name, motions) motions Blk Model.pattern(\u201c GroundMotion \u201d, name, motion_type) motion_type = Plain str accel Ref(Path) veloc Ref(Path) displ Ref(Path)","title":"Multisupport Excitation"},{"location":"library/modeling/pattern/TimeSeries/","text":"Time Series Command This command is used to construct a TimeSeries object which represents the relationship between the time in the domain, $t $ , and the load factor applied to the loads, $t $ , a \\(\\lambda\\) , in the load pattern with which the TimeSeries object is associated, i.e. \\(\\lambda = F(t)\\) timeSeries seriesType? arg1? ... The type of time series created and the additional arguments required depends on the seriesType? provided in the command. The following contain information about seriesType? and the args required for each of the available time series types: </noinclude> Constant TimeSeries Linear TimeSeries Trigonometric TimeSeries Triangular TimeSeries Rectangular TimeSeries Pulse TimeSeries Path TimeSeries PeerMotion PeerNGAMotion","title":"Time Series Command"},{"location":"library/modeling/pattern/plain/","text":"Plain Loading This commnand allows the user to construct a LoadPattern object. Each plain load pattern is associated with a TimeSeries object and can contain multiple NodalLoads, ElementalLoads and SP_Constraint objects. The command to generate LoadPattern object contains in { } the commands to generate all the loads and the single-point constraints in the pattern. To construct a load pattern and populate it, the following command is used: Model.pattern(\u201c Plain \u201d, name, series, loads) series str loads Blk scale float constant scale factor pattern Plain $patternTag $tsTag <-fact $cFactor> { load \u2026 eleLoad \u2026 sp \u2026 \u2026 } patternTag unique tag among load patterns tsTag the tag of the time series to be used in the load pattern cFactor constant factor (optional, default=1.0) load \u2026 command to nodal load eleLoad \u2026 command to generate elemental load sp \u2026 command to generate single-point constraint NOTES: The command to generate a LoadPattern contains in { } the commands to generate all the loads and single-point constraints.. Code Developed by: fmk","title":"Plain Loading"},{"location":"library/modeling/pattern/plain/658-Sp/","text":"Sp (Single-point) This command is used to construct a single-point constraint object and add it to the enclosing LoadPattern. sp $nodeTag $dofTag $dofValue nodeTag tag of node to which constraint is applied. dofTag the degree-of-freedom at the node to which constraint is applied (1 through ndf) dofValue reference constraint value. NOTES: The dofValue is a reference value, it is the time series that provides the load factor. The load factor times the reference value is the constraint that is actually applied to the node. Code Developed by: fmk","title":"Sp (Single-point)"},{"location":"library/modeling/uniaxial/","text":"UniaxialMaterial Library The opensees.uniaxial module (or uniaxialMaterial Tcl command) provide access to the library of models implementing the UniaxialMaterial interface. This interface represents a scalar-valued work-conjugate relationship (e.g., uniaxial stress-strain, force-deformation, etc.) that is generally path-dependent. The valid queries to any uniaxial material when creating an ElementRecorder are strain , stress , and tangent . Some materials have additional queries to which they will respond. These are documented in the NOTES section for those materials. General-Purpose Materials Elastic / Path-Independent Elastic Elastic-No Tension ElasticBilin ElasticMultiLinear PathIndependent Inelastic MultiLinear Elastic-Perfectly Plastic Gap Pinching4 Standard Rate-Independent Materials These models are formulated and implemented according to well-established principles and algorithms. ElasticPP Elastic-perfectly plastic Hardening Standard Rate-Dependent Materials Viscous ViscousDamper Metallic Hysteretic RambergOsgoodSteel A simple metalic model exhibiting a nonlinear hardening curve. Steel01 Steel02 Giuffr\u00e9-Menegotto-Pinto Model with Isotropic Strain Hardening SteelMPF Menegotto and Pinto (1973) model Extended by Filippou et al. (1983) Steel4 Dodd Restrepo A new model which allows the \u201csoftness\u201d of the Bauschinger curve, as determined by the area under the curve relative to the enclosing parallelogram, to be controlled. ReinforcingSteel UVCuniaxial Updated Voce-Chaboche Concrete Concrete01 Hognestad\u2019s concrete curve with zero tensile strength Concrete02 Concrete01 with linear tension softening Concrete04 Popovics concrete curve Concrete06 Thorenfeldt curve Concrete07 Chang & Mander\u2019s 1994 Concrete Model ConfinedConcrete01 ConcreteD concrete material based on the Chinese design code ConcreteCM Complete Concrete Model by Chang and Mander (1994) FRPConfinedConcrete Bouc-Wen Models BoucWenOriginal DegradingPinchedBW BoucWenInfill BoucWen BWBN Pinching Hysteretic Bouc-Wen Material Pinch and Slip SAWS Pinching material for woodframed structures. Wrappers Parallel Series Initial Strain Initial Stress Fatigue MinMax SimpleFractureMaterial ContinuumUniaxial performs static condensation to impose a uniaxial state of stress on a three-dimensional NDMaterial Other Uniaxial Materials Concrete01WithSITC Concrete Material With Stuff in the Cracks ModIMKBilin Modified Ibarra-Medina-Krawinkler Deterioration Model with Bilinear Hysteretic Response (Bilin) ModIMKPeakOriented Modified Ibarra-Medina-Krawinkler Deterioration Model with Peak-Oriented Hysteretic Response ModIMKPinching Modified Ibarra-Medina-Krawinkler Deterioration Model with Pinched Hysteretic Response CastFuse BilinearOilDamper BARSLIP Bond_SP01 Strain Penetration Model for Fully Anchored Steel Reinforcing Bars Impact HyperbolicGap Engineered Cementitious Composites KikuchiAikenHDR KikuchiAikenLRB AxialSp AxialSpHD CFSWSWP Wood-Sheathed Cold-Formed Steel Shear Wall Panel CFSSSWP Steel-Sheathed Cold-formed Steel Shear Wall Panel SelfCentering uniaxial self-centering (flag-shaped) material object with optional non-recoverable slip behaviour and an optional stiffness increase at high strains (bearing behaviour). PyTzQz uniaxial soil materials for p-y, t-z and q-z elements for modeling soil-structure interaction through the piles in a structural foundation PySimple1 TzSimple1 QzSimple1 PyLiq1 TzLiq1 PySimple1Gen Command TzSimple1Gen Command Frameworks Limit State AlgebraicHysteresis","title":"UniaxialMaterial Library"},{"location":"library/modeling/uniaxial/bearings/26-AxialSpHD/","text":"AxialSpHD This command is used to construct a uniaxial AxialSpHD material object. This material model produces axial stress-strain curve of elastomeric bearings including hardening behavior. uniaxialMaterial AxialSpHD $matTag $sce $fty $fcy < $bte $bty $bth $bcy $fcr $ath > matTag integer tag identifying material sce compressive modulus fty fcy yield stress under tension ( fty ) and compression ( fcy ) (see note 1) bte bty bth bcy reduction rate for tensile elastic range ( bte ), tensile yielding ( bty ), tensile hardening ( bth ) and compressive yielding ( bcy ) (see note 1) fcr target point stress (see note 1) ath hardening strain ratio to yield strain (see note 1) NOTES: Input parameters are required to satisfy followings. fcy < 0.0 < fty 0.0 <= bty < bth < bte <= 1.0 0.0 <= bcy <= 1.0 fcy <= fcr <= 0.0 1.0 <= ath &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Examples AxialSpHD_sample.tcl AxialSpHD_StressStrain.png Code Developed by: mkiku","title":"AxialSpHD"},{"location":"library/modeling/uniaxial/bearings/27-AxialSp/","text":"AxialSp This command is used to construct a uniaxial AxialSp material object. This material model produces axial stress-strain curve of elastomeric bearings. uniaxialMaterial AxialSp $matTag $sce $fty $fcy \\ < $bte $bty $bcy $fcr > matTag integer tag identifying material sce compressive modulus fty fcy yield stress under tension ( fty ) and compression ( fcy ) (see note 1) bte bty bcy reduction rate for tensile elastic range ( bte ), tensile yielding ( bty ) and compressive yielding ( bcy ) (see note 1) fcr target point stress (see note 1) NOTES: Input parameters are required to satisfy followings. fcy < 0.0 < fty 0.0 <= bty < bte <= 1.0 0.0 <= bcy <= 1.0 fcy <= fcr <= 0.0 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Examples AxialSp_sample.tcl AxialSp_StressStrain.png Code Developed by: mkiku","title":"AxialSp"},{"location":"library/modeling/uniaxial/bearings/351-KikuchiAikenHDR/","text":"KikuchiAikenHDR This command is used to construct a uniaxial KikuchiAikenHDR material object. This material model produces nonlinear hysteretic curves of high damping rubber bearings (HDRs). uniaxialMaterial KikuchiAikenHDR $matTag $tp $ar $hr < -coGHU $cg $ch $cu > < -coMSS $rs $rf > matTag integer tag identifying material tp rubber type (see note 1) ar area of rubber [unit: m^2] (see note 2) hr total thickness of rubber [unit: m] (see note 2) cg ch cu correction coefficients for equivalent shear modulus ( cg ), equivalent viscous daming ratio ( ch ), ratio of shear force at zero displacement ( cu ). rs rf reduction rate for stiffness ( rs ) and force ( rf ) (see note 3) Notes Following rubber types for tp are available: X0.6 Bridgestone X0.6, standard compressive stress, up to 400% shear strain X0.6-0MPa Bridgestone X0.6, zero compressive stress, up to 400% shear strain X0.4 Bridgestone X0.4, standard compressive stress, up to 400% shear strain X0.4-0MPa Bridgestone X0.4, zero compressive stress, up to 400% shear strain X0.3 Bridgestone X0.3, standard compressive stress, up to 400% shear strain X0.3-0MPa Bridgestone X0.3, zero compressive stress, up to 400% shear strain This material uses SI unit in calculation formula. ar and hr must be converted into [m^2] and [m] , respectively. rs and rf are\u3000available if this material is applied to multipleShearSpring (MSS) element. Recommended values are rs =1/sum(i=0,n-1){ sin(pi i/n)^2} and rf =1/sum(i=0,n-1){sin(pi i/n)}, where n is the number of springs in the MSS. For example, when n=8 , rs=0.2500 , rf=0.1989 . Examples KikuchiAikenHDR_sample.tcl KikuchiAikenHDR_StressStrain.png Code Developed by: mkiku","title":"KikuchiAikenHDR"},{"location":"library/modeling/uniaxial/bearings/352-KikuchiAikenLRB/","text":"KikuchiAikenLRB This command is used to construct a uniaxial KikuchiAikenLRB material object. This material model produces nonlinear hysteretic curves of lead-rubber bearings. uniaxialMaterial KikuchiAikenLRB $matTag $type $ar $hr $gr $ap $tp $alph $beta < -T $temp > < -coKQ $rk $rq > < -coMSS $rs $rf > matTag integer tag identifying material type rubber type (see note 1) ar area of rubber [unit: m^2] hr total thickness of rubber [unit: m] gr shear modulus of rubber [unit: N/m^2] ap area of lead plug [unit: m^2] tp yield stress of lead plug [unit: N/m^2] alph shear modulus of lead plug [unit: N/m^2] beta ratio of initial stiffness to yielding stiffness temp temperature [unit: &deg;C] rk rq reduction rate for yielding stiffness ( rk ) and force at zero displacement ( rq ) rs rf reduction rate for stiffness ( rs ) and force ( rf ) (see note 3) NOTES: Following rubber types for type are available: 1 lead-rubber bearing, up to 400% shear strain [Kikuchi et al., 2010 & 2012] This material uses SI unit in calculation formula. Input arguments must be converted into [m] , [m^2] , [N/m^2] . rs and rf are available if this material is applied to multipleShearSpring (MSS) element. Recommended values are rs =1/sum(i=0,n-1){ sin(pi i/n)^2} and rf =1/sum(i=0,n-1){sin(pi i/n)}, where n is the number of springs in the MSS. For example, when n=8, $rs=0.2500 and $rf=0.1989. Examples KikuchiAikenLRB_sample.tcl KikuchiAikenLRB Force Strain References M. Kikuchi, T. Nakamura, I. D. Aiken, \u201cThree-dimensional analysis for square seismic isolation bearings under large shear deformations and high axial loads\u201d, Earthquake Engineering and Structural Dynamics , Vol. 39, 1513-1531, 2010. M. Kikuchi , I. D. Aiken, A. Kasalanati , \u201cSimulation analysis for the ultimate behavior of full-scale lead-rubber seismic isolation bearings\u201d, 15th World Conference on Earthquake Engineering , No. 1688, 2012. Code Developed by: mkiku","title":"KikuchiAikenLRB"},{"location":"library/modeling/uniaxial/bouc/33-BWBN/","text":"BWBN This command is used to construct a uniaxial Bouc-Wen pinching hysteretic material object. This material model is an extension of the original Bouc-Wen model that includes pinching (Baber and Noori (1986) and Foliente (1995)). uniaxialMaterial BWBN $matTag $alpha $ko $n $gamma $beta $Ao $q $zetas $p $Shi $deltaShi $lambda $tol $maxIter matTag integer tag identifying material alpha ratio of post-yield stiffness to the initial elastic stiffenss ( \\(0 \\lt \\alpha \\lt 1\\) ) ko initial elastic stiffness n parameter that controls transition from linear to nonlinear range (as n increases the transition becomes sharper; n is usually grater or equal to 1) gamma beta parameters that control shape of hysteresis loop; depending on the values of \\(\\gamma\\) and \\(\\beta\\) softening, hardening or quasi-linearity can be simulated (look at the BoucWen Material ) Ao parameter that controls tangent stiffness q zetas p Shi deltaShi lambda parameters that control pinching tol tolerance maxIter maximum iterations BWBN_YSPD.jpg Fig. Cyclic force displacement relationship of the YSPDs generated using the BWBN material model PARAMETER ESTIMATION: BWBNParameterEstimation Examples docs/contrib/examples/31-BWBNExample.html References Hossain, M. R., Ashraf, M., & Padgett, J. E. (2013). \u201cRisk-based seismic performance assessment of Yielding Shear Panel Device.\u201d Engineering Structures, 56, 1570-1579. Hossain, M. R., & Ashraf, M. (2012). \u201cMathematical modelling of yielding shear panel device.\u201d Thin-Walled Structures, 59, 153-161. Baber, T. T., & Noori, M. N. (1986). \u201cModeling general hysteresis behavior and random vibration application.\u201d Journal of Vibration Acoustics Stress and Reliability in Design, 108, 411. Foliente, G. C. (1995). Hysteresis modeling of wood joints and structural systems. Journal of Structural Engineering, 121(6), 1013-1022. Developers Raquib Hossain , The University of Queensland (UQ), Australia & Bangladesh University of Engineering and Technology (BUET), Bangladesh.","title":"BWBN"},{"location":"library/modeling/uniaxial/bouc/64-BoucWen/","text":"BoucWen This command is used to construct a uniaxial Bouc-Wen smooth hysteretic material object. This material model is an extension of the original Bouc-Wen model that includes stiffness and strength degradation (Baber and Noori (1985)). Model.uniaxial(\u201c BoucWen \u201d, name, alpha, ko, n, a, b, c) alpha float ratio of post-yield stiffness to the initial elastic stiffenss ( \\(0< \\alpha < 1\\) ) ko float initial elastic stiffness n int parameter that controls transition from linear to nonlinear range (as n increases the transition becomes sharper; n is usually grater or equal to 1) a [gamma,beta] , parameters that control shape of hysteresis loop; depending on the values of \u03b3 and \u03b2 softening, hardening or quasi-linearity can be simulated (look at the NOTES) gamma float beta float b [Ao,deltaA] , parameters that control tangent stiffness Ao float deltaA float c [deltaNu,deltaEta] , parameters that control material degradation deltaNu float deltaEta float NOTES: Parameter \\(\\gamma\\) is usually in the range from -1 to 1 and parameter \\(\\beta\\) is usually in the range from 0 to 1. Depending on the values of \\(\\gamma\\) and \\(\\beta\\) softening, hardening or quasi-linearity can be simulated. The hysteresis loop will exhibit softening for the following cases: \\(\\beta + \\gamma \\gt 0\\) and \\(\\beta - \\gamma \\gt 0\\) , \\(\\beta + \\gamma \\gt 0\\) and \\(\\beta - \\gamma \\lt 0\\) , and \\(\\beta + \\gamma \\gt 0\\) and \\(\\beta - \\gamma = 0\\) . The hysteresis loop will exhibit hardening if \\(\\beta + \\gamma \\lt 0\\) and \\(\\beta - \\gamma \\gt 0\\) , and quasi-linearity if $+ = 0 and \\(\\beta - \\gamma \\gt 0\\) . The material can only define stress-strain relationship. References Haukaas, T. and Der Kiureghian, A. (2003). \u201cFinite element reliability and sensitivity methods for performance-based earthquake engineering.\u201d REER report, PEER-2003/14 1 . Baber, T. T. and Noori, M. N. (1985). \u201cRandom vibration of degrading, pinching systems.\u201d Journal of Engineering Mechanics, 111(8), 1010-1026. Bouc, R. (1971). \u201cMathematical model for hysteresis.\u201d Report to the Centre de Recherches Physiques, pp16-25, Marseille, France. Wen, Y.-K. (1976). for random vibration of hysteretic systems.\u201d Journal of Engineering Mechanics Division, 102(EM2), 249-263.","title":"BoucWen"},{"location":"library/modeling/uniaxial/bouc/BoucWenInfill/","text":"BoucWenInfill This command is used to construct the uniaxial BoucWenInfill material producing smooth hysteretic loops with stiffness and strength degradation and pinching effect. The pinching formulation is particularly suitable to simulate the behavior of infill panels and masonry walls. uniaxialMaterial BoucWenInfill matTag mass alpha beta0 eta0 n k xy deltak deltaf psi Zs As epsp tol maxIter Argument Type Description matTag integer integer tag identifying material. mass float mass of the system. alpha float ratio of post-yield stiffness to the initial elastic stiffness (0< alpha <1). beta0 eta0 float parameters that control the shape of the hysteresis loop (-1< eta0 <1). n float Parameter that controls the transition from linear to nonlinear range. k float Initial elastic stiffness. xy float yielding displacement of the system deltak deltaf float Parameters that control respectively stiffness and strength degradation. psi float Parameter that controls the rate of stiffness degradation. Zs float parameter that controls the extension of pinching along z-axis. As float parameter that controls the extension of pinching along x-axis. epsp float pinching activation energy. tol float tolerance in each integration step. maxIter float maximum number of iterations for each integration step. Notes The determination of constitutive parameters is supported by their physical meaning. In case of infill panels, empirical correlation laws between the model parameters and the geometrical and mechanical properties of infilled frames can be found in [SirottiEtAL2021] . The equations governing the BoucWenInfill behavior are described in [SirottiEtAl2021] . Other references can be found in [PelliciariEtAl2020] for stiffness and strength degradation and in [MadanEtAl1997] for the pinching formulation. The model may reproduce either force-displacement or stress-strain relationships. Parameters deltak , deltaf and psi regulate respectively stiffness, strength degradation and the rate of stiffness degradation. Parameters Zs , As and epsp control the amount and activation of the pinching effect: Example The following instruction builds a BoucWenInfill material with tag 1 , parameters reported in the table above, tolerance tol = \\(10^{-6}\\) and maximum number of iterations maxIter = \\(10^{6}\\) . Tcl Code uniaxialMaterial BoucWenInfill 1 1 0.06 0.25 0.1 1.2 65 1 0.005 0.005 0.001 0.01 5 10000 10e-6 10e6 References MadanEtAl1997 Madan, A., Reinhorn, A. M., Mander, J. B., & Valles, R. E. (1997). Modeling of masonry infill panels for structural analysis. Journal of structural engineering, 123(10), 1295-1302. DOI: https://doi.org/10.1061/(ASCE)0733-9445(1997)123:10(1295) . PelliciariEtAl2020 Pelliciari, M., Briseghella, B., Tondolo, F., Veneziano, L., Nuti, C., Greco, R., ... & Tarantino, A. M. (2020). A degrading Bouc\u2013Wen model for the hysteresis of reinforced concrete structural elements. Structure and Infrastructure Engineering, 16(7), 917-930. DOI: https://doi.org/10.1080/15732479.2019.1674893 . SirottiEtAL2021 Sirotti, S., Pelliciari, M., Di Trapani, F., Briseghella, B., Carlo Marano, G., Nuti, C., & Tarantino, A. M. (2021). Development and validation of new Bouc\u2013Wen data-driven hysteresis model for masonry infilled RC frames. Journal of Engineering Mechanics, 147(11), 04021092. DOI: https://doi.org/10.1061/(ASCE)EM.1943-7889.0002001 . Code developed by: Stefano Sirotti , University of Modena and Reggio Emilia, Italy, stefano.sirotti@unimore.it","title":"BoucWenInfill"},{"location":"library/modeling/uniaxial/bouc/DegradingPinchedBW/","text":"DegradingPinchedBW User University of Modena and Reggio Emilia Matteo Pelliciari, Phd (University of Modena and Reggio Emilia, Dept. of Engineering \u201cEnzo Ferrari\u201d, Modena) Professor Davide Lavorato (Roma Tre University, Dept. of Architecture, Rome). Parameter Role \\(\\alpha\\) Ratio of linear to non-linear response \\(k\\) Elastic stiffness \\(\\beta_{0}\\) Hysteresis shape control \\(\\eta_{0}\\) Hysteresis shape control \\(n\\) Hysteresis shape control \\(\\rho_{x}\\) Max. displacement degradation \\(\\rho_{\\epsilon}\\) Energy degradation \\(\\delta_{k}\\) Stiffness degradation \\(\\delta_{f}\\) Strength degradation \\(\\psi\\) Stiffness degradation rate control \\(\\sigma\\) Pinching width \\(u\\) Pinching slope \\(\\rho_{p}\\) Pinching severity \\(\\epsilon_{p}\\) Pinching activation energy int Tag, double p_m, double p_Fy, double p_xu, double p_alpha, double p_ko, double p_n, double p_eta, double p_beta, double p_rhoeps, double p_rhox, double p_phi, double p_deltak, double p_deltaf, double p_sigma, double p_u, double p_epsp, double p_rhop, double ptolerance, int pMaxNumIter) https://github.com/OpenSees/OpenSees/pull/335 \\[ \\begin{aligned} \\dot{z} &=A\\left(d_{i}\\right) \\dot{x}-\\beta\\left(d_{i}\\right)\\left(|\\dot{x}||z|^{n-1} z+\\eta_{0} \\dot{x}|z|^{n}\\right) \\\\ &=e^{-\\delta_{k} d_{i} p_{k}\\left(d_{i}\\right)} \\dot{x}-\\beta_{0} e^{-\\left[\\delta_{k} p_{k}\\left(d_{i}\\right)-n \\delta_{f}\\right] d_{i}}\\left(|\\dot{x}||z|^{n-1} z+\\eta_{0} \\dot{x}|z|^{n}\\right) \\end{aligned} \\] References \u201cA degrading Bouc-Wen model for the hysteresis of reinforced concrete structural elements\u201d, by Pelliciari M. et al. (Structure and Infrastructure Engineering, 2019, 1-14). https://doi.org/10.1080/15732479.2019.1674893","title":"DegradingPinchedBW"},{"location":"library/modeling/uniaxial/concrete/234-FRPConfinedConcrete/","text":"FRPConfinedConcrete This command is used to construct a uniaxial Megalooikonomou-Monti-Santini concrete material object with degraded linear unloading/reloading stiffness according to the work of Karsan-Jirsa and no tensile strength. uniaxialMaterial FRPConfinedConcrete $matTag $fpc1 $fpc2 $epsc0 $D $c $Ej $Sj $tj $eju $S $fyl $fyh $dlong $dtrans $Es $vo $k $useBuck matTag integer tag identifying material. fpc1 concrete core compressive strength. fpc2 concrete cover compressive strength. epsc0 strain corresponding to unconfined concrete strength. D diameter of the circular section. c dimension of concrete cover (until the outer edge of steel stirrups) Ej elastic modulus of the fiber reinforced polymer (FRP) jacket. Sj clear spacing of the FRP strips - zero if FRP jacket is continuous. tj total thickness of the FRP jacket. eju rupture strain of the FRP jacket from tensile coupons. S spacing of the steel spiral/stirrups. fyl yielding strength of longitudinal steel bars. fyh yielding strength of the steel spiral/stirrups. dlong diameter of the longitudinal bars of the circular section. dtrans diameter of the steel spiral/stirrups. Es elastic modulus of steel. vo initial Poisson\u2019s coefficient for concrete. k reduction factor for the rupture strain of the FRP jacket, recommended values 0.5-0.8. useBuck FRP jacket failure criterion due to buckling of longitudinal compressive steel bars (0 = not include it, 1= to include it). NOTES: \u2022 IMPORTANT: The units of the input parameters should be in MPa, N, mm. \u2022 Concrete compressive strengths and the corresponding strain should be input as positive values. \u2022 When rupture of FRP jacket occurs due to dilation of concrete (lateral concrete strain exceeding reduced rupture strain of FRP jacket), the analysis is not terminated. Only a message \u201cFRP Rupture\u201d is plotted on the screen. \u2022 When useBuck input parameter is on (equal to 1) and the model\u2019s longitudinal steel buckling conditions are fulfilled, a message \u201cInitiation of Buckling of Long.Bar under Compression\u201d is plotted on the screen. \u2022 When rupture of FRP jacket occurs due to its interaction with buckled longitudinal compressive steel bars, the analysis is not terminated. Only a message \u201cFRP Rupture due to Buckling of Long.Bar under compression\u201d is plotted on the screen. Typical Hysteretic Stress-Strain Relation for FRPConfinedConcrete. Figure_1_.jpg EXAMPLES: Example: Cantilever FRP-Confined Circular Reinforced Concrete Column under Cyclic Lateral Loading Cantilever Column Model Definition. Figure_2.jpg The cantilever column was modeled by a linear beam element with its stiffness corresponding to flexural yielding and by a fiber element at the plastic hinge which is used in order to capture the flexural hysteretic behavior. The length of the fiber element was assumed to be half of the column\u2019s diameter. A rotational spring at the bottom of the column represents the longitudinal bar pullout from the footing and was assumed to have an elastic stiffness. According to FRPConfinedConcrete model, the averaged response of the two different regions - concrete core (confined by both the FRP & the existing reinforcement) and concrete cover (confined only with the FRP wrap) - in the cross-section allows the assignment of a unique stress-strain law (FRPConfinedConcrete) to all the concrete fibers/layers of the circular section. Input Files: For Tcl Interpreter: Response of Cantilever FRP-Confined Circular Reinforced Concrete Column under Cyclic Lateral Loading. Figure 3 References \u2022 MEGALOOIKONOMOU K.G., MONTI G., SANTINI S., \u201cConstitutive Model for Fiber -Reinforced Polymer - and Tie - Confined Concrete\u201d, ACI Structural Journal, Vol. 109, No. 4, July 2012, pp. 569-578. https://doi.org/10.14359/51683876 \u2022 KARSAN, I.D., JIRSA, J.O., \u201cBehaviour of concrete under compressive loadings\u201d, Journal of Structural Division ASCE, Vol. 95, No. 12, 1969, pp. 2543-2563. https://doi.org/10.1061/JSDEAG.0002424 \u2022 MEGALOOIKONOMOU K.G., \u201cSeismic Assessment and Retrofit of Reinforced Concrete Columns\u201d, Cambridge Scholars Publishing, ISBN (10): 1-5275-2785-9, ISBN (13): 978-1-5275-2785-0, 2019, p. 387. https://www.cambridgescholars.com/product/978-1-5275-2785-0 \u2022 MEGALOOIKONOMOU K.G., MONTI G., \u201cNumerical Modeling of FRP-Retrofitted Circular RC Columns Including Shear\u201d, In Proceedings of: 5th International Conference on Computational Methods in Structural Dynamics and Earthquake Engineering (COMPDYN 2015), Crete Island, Greece, May 25 - 27, 2015. https://doi.org/10.7712/120115.3663.400 \u2022 MEGALOOIKONOMOU K.G. (2019, December). Modeling the behavior of shear-critical reinforced concrete columns under lateral loads. Ph.D. Thesis, Department of Civil and Environmental Engineering, Faculty of Engineering, University of Cyprus, Nicosia, Cyprus. https://doi.org/10.12681/eadd/47504 \u2022 GALLARDO - ZAFRA R., KAWASHIMA, K., \u201cAnalysis of CFRP RC Bridge Columns under Lateral Cyclic Loading\u201d, Journal of Earthquake Engineering, Vol. 13, 2009, pp. 129-154. https://doi.org/10.1080/13632460802347455 Code developed by: Dr.-Ing. Konstantinos G. Megalooikonomou, Onassis Foundation Scholar, University of Cyprus (Webpage: https://bigeconomy.gr/en/ ).","title":"FRPConfinedConcrete"},{"location":"library/modeling/uniaxial/concrete/88-Concrete01/","text":"Concrete01 This command is used to construct a uniaxial Kent-Scott-Park concrete material object with degraded linear unloading/reloading stiffness according to the work of Karsan-Jirsa and no tensile strength. (REF: Fedeas). uniaxialMaterial Concrete01 $matTag $fpc $epsc0 $fpcu $epsU matTag integer tag identifying material fpc concrete compressive strength at 28 days (compression is negative)* epsc0 concrete strain at maximum strength* fpcu concrete crushing strength * epsU concrete strain at crushing strength* NOTE: Compressive concrete parameters should be input as negative values (if input as positive, they will be converted to negative internally). The initial slope for this model is (2* \\(fpc/\\) epsc0) Concrete01.gif Typical Hysteretic Stress-Strain Relation for material Examples The following example creates a concrete material with tag \\(1\\) which reaches compressive strength of \\(4.0\\) at a strain of \\(0.002\\) and reaches ultimate strength of \\(0.0\\) at strain of \\(0.005\\) . uniaxialMaterial Concrete01 1 -4 .0 -0 .002 0.0 -0 .005 ; Concrete01Hysteretic.jpg Code Developed by: Filip Filippou, UC Berkeley Images Developed by: Silvia Mazzoni","title":"Concrete01"},{"location":"library/modeling/uniaxial/concrete/89-Concrete01%20With%20Stuff%20in%20the%20Cracks/","text":"Concrete01WithSITC This command is used to construct a modified uniaxial Kent-Scott-Park concrete material object with degraded linear unloading/reloading stiffness according to the work of Karsan-Jirsa and no tensile strength. The modification is to model the effect of Stuff In The Cracks (SITC). The command is as follows: uniaxialMaterial Concrete01WithSITC $matTag $fpc $epsc0 $fpcu $epsU < $endStrainSITC > matTag integer tag identifying material fpc concrete compressive strength at 28 days (compression is negative)* epsc0 concrete strain at maximum strength* fpcu concrete crushing strength * epsU concrete strain at crushing strength* endStrainSITC optional, default = 0.03 NOTE: Compressive concrete parameters should be input as negative values. The initial slope for this model is (2* \\(fpc/\\) epsc0) References J.F. Stanton and H.D. McNiven, \u201cThe Development of a Mathematical Model to Predict the Flexural Response of Reinforced Concrete Beams to Cyclic Loads, Using System Identification\u201d, EERC Report Number 79/02, January 1979. Code Developed by: Won Lee, Stanford","title":"Concrete01WithSITC"},{"location":"library/modeling/uniaxial/concrete/90-Concrete02/","text":"Concrete02 Model.uniaxial(\u201c Concrete02 \u201d, \u2003\u2003\u2003name, \u2003\u2003\u2003fpc, \u2003\u2003\u2003epsc0, \u2003\u2003\u2003fpcu, \u2003\u2003\u2003epsU, \u2003\u2003\u2003lamda, \u2003\u2003\u2003ft, \u2003\u2003\u2003Ets) fpc float concrete compressive strength at 28 days (compression is negative) epsc0 float concrete strain at maximum strength fpcu float concrete crushing strength epsU float concrete strain at crushing strength lamda float ratio between unloading slope at epscu and initial slope ft float tensile strength Ets float tension softening stiffness (absolute value) (slope of the linear tension softening branch) NOTE: Compressive concrete parameters should be input as negative values. The initial slope for this model is (2* \\(fpc/\\) epsc0) REFERENCE: Mohd Hisham Mohd Yassin, \u201cNonlinear Analysis of Prestressed Concrete Structures under Monotonic and Cycling Loads\u201d, PhD dissertation, University of California, Berkeley, 1994. Concrete02.jpg Comparison of Hysteretic Stress-Strain Relation for Concerete01 versus Concrete02 materials. Concrete02Hysteretic.jpg Code Developed by: Filip Filippou, UC Berkeley Images Developed by: Silvia Mazzoni","title":"Concrete02"},{"location":"library/modeling/uniaxial/concrete/91-Concrete04/","text":"Concrete04 This command is used to construct a uniaxial Popovics concrete material object with degraded linear unloading/reloading stiffness according to the work of Karsan-Jirsa and tensile strength with exponential decay. Model.uniaxial(\u201c Concrete04 \u201d, name, fc, ec, ecu, Ec) fc float floating point values defining concrete compressive strength at 28 days (compression is negative)* ec float floating point values defining concrete strain at maximum strength* ecu float floating point values defining concrete strain at crushing strength* Ec float floating point values defining initial stiffness** tension [fct,et] , fct float floating point value defining the maximum tensile strength of concrete et float floating point value defining ultimate tensile strain of concrete beta float floating point value defining the exponential curve parameter to define the residual stress (as a factor of $ft) at $etu NOTE: Compressive concrete parameters should be input as negative values. The envelope of the compressive stress-strain response is defined using the model proposed by Popovics (1973). If the user defines Ec = 57000*sqrt(|fcc|)(in psi) \u2019 then the envelope curve is identical to proposed by Mander et al. (1988). Model Characteristic: For loading in compression, the envelope to the stress-strain curve follows the model proposed by Popovics (1973) until the concrete crushing strength is achieved and also for strains beyond that corresponding to the crushing strength. For unloading and reloading in compression, the Karsan-Jirsa model (1969) is used to determine the slope of the curve. For tensile loading, an exponential curve is used to define the envelope to the stress-strain curve. For unloading and reloading in tensile, the secant stiffness is used to define the path. Concrete04A.png Concrete0B.png References Mander, J. B., Priestley, M. J. N., and Park, R. (1988). \u201cTheoretical stress-strain model for confined concrete.\u201d Journal of Structural Engineering ASCE, 114(8), 1804-1825. Popovics, S. (1973). \u201d A numerical approach to the complete stress strain curve for concrete.\u201d Cement and concrete research, 3(5), 583-599. Karsan, I. D., and Jirsa, J. O. (1969). \u201cBehavior of concrete under compressive loading.\u201d Journal of Structural Division ASCE, 95(ST12). Code developed by: Laura Lowes, University of Washington and Michael Berry, University of Washington Images Developed by: Silvia Mazzoni","title":"Concrete04"},{"location":"library/modeling/uniaxial/concrete/92-Concrete06/","text":"Concrete06 This command is used to construct a uniaxial concrete material object with tensile strength, nonlinear tension stiffening and compressive behavior based on Thorenfeldt curve. Model.uniaxial(\u201c Concrete06 \u201d, \u2003\u2003\u2003name, \u2003\u2003\u2003fc, \u2003\u2003\u2003e0, \u2003\u2003\u2003n, \u2003\u2003\u2003k, \u2003\u2003\u2003alpha1, \u2003\u2003\u2003fcr, \u2003\u2003\u2003ecr, \u2003\u2003\u2003b, \u2003\u2003\u2003alpha2) fc float concrete compressive strength (compression is negative)* e0 float strain at compressive strength* n float compressive shape factor k float post-peak compressive shape factor alpha1 float \\(\\alpha_1\\) parameter for compressive plastic strain definition fcr float tensile strength ecr float tensile strain at peak stress ( fcr ) b float exponent of the tension stiffening curve alpha2 float \\(\\alpha_2\\) parameter for tensile plastic strain definition Concrete06C.png Notes: Compressive concrete parameters should be input as negative values. Examples uniaxialMaterial Concrete06 1 -3 -0 .002 2 1 0.32 0.3 0.00008 4 0.08 Discussion The concrete material, Concrete06 (Fig. 2), keeps the simplicity of previous formulations (Concrete01 to Concrete03). However, envelope curves have been modified to represent concrete behavior in membrane elements. Compressive constitutive material law (?c-?c) is defined as the Thorenfeldt-base curve, which is similar to Popovic (1973) definition: \\[ \\sigma_c = f^\\prime_c \\frac{n \\left(\\frac{\\epsilon_c}{\\epsilon_0}\\right)}{n-1 + \\left( \\frac{\\epsilon_c}{\\epsilon_0} \\right)^{nk}} \\] where \\(f^\\prime_c\\) is the compressive strength, \\(\\epsilon_0\\) is the strain at peak compressive stress, and \\(n\\) and \\(k\\) are parameters. The tensile envelope uses the tension stiffening equation by Belarbi and Hsu (1994) with a general exponent \\(b\\) . \\[\\epsilon_c \\le \\epsilon_{\\text{cr}}, \\sigma_c = \\left( \\frac{f_\\text{cr}}{\\epsilon_\\text{cr}} \\right) \\epsilon_c\\] \\[\\epsilon_c \\gt \\epsilon_{\\text{cr}}, \\sigma_c = f_\\text{cr} \\left( \\frac{\\epsilon_\\text{cr}}{\\epsilon_\\text{c}} \\right)^b \\] where \\(f_\\text{cr}\\) is the tensile strength, \\(\\epsilon_\\text{cr}\\) is the strain at tensile strength and \\(b\\) is a parameter. Concrete06A.png Hysteretic rules in compression are held similarly as defined in Concrete03 , with linear unloading and reloading paths (constant stiffness). The unloading and reloading paths in compression are connected through unloading/reloading paths with initial elastic stiffness (Fig. 2 and 3). The unloading path in compression has a stiffness of \\(7.1\\%\\) of the initial elastic stiffness ( \\(0.071E_c\\) ) as adopted by Palermo and Vecchio (2003). The plastic compressive strain \\(\\epsilon^p_c\\) ), defined as the residual unrecoverable compressive strain obtained after full unloading (zero stress) is characterized by: \\[\\epsilon^c_p = \\epsilon^c_m \\left( 1 - e ^{-\\frac{\\epsilon^c_m}{\\epsilon_\\text{cr}} \\alpha_1} \\right) \\] where \\(\\epsilon_m^c\\) is the maximum (absolute value) compressive strain attained previously on the envelope (stored value by the uniaxial material), and \\(\\alpha_1\\) is a parameter. A origin-oriented hysteretic rule for tension may introduce inaccuracies in the analysis. In this case, stresses are linear and recover the initial strain (from previous cycle) when reducing to zero. However, after opening of cracks, under unloading from tension, the uneven and rough surface of the crack tend to initiate contact before the initial strain from previous cycle is attained. This effect known as gap closure improves the dissipating characteristic of the hysteretic rule, reducing the pinching. For this reason, the hysteretic rule for concrete in tension in this model considers a plastic strain (different from zero or the strain from previous cycle) such that when going from tensile stresses to compressive stresses the gap closure effect is modeled by a linear path. Such consideration requires also keeping track of previous stiffness and maximum tensile stress, and the previous tensile plastic strain. This is required, since when going in a posterior cycle from compressive stresses to tensile stresses the compressive plastic strain will become the new origin of the tensile behavior, creating a shifting in the stress-strain curve in tension (Fig. 3). From that strain a linear path will be followed using the previous unloading stiffness in tension until the previous attained maximum tensile stress is reached. In tension, the unloading and reloading paths are the same, and are defined by the tensile plastic strain \\((\\epsilon_p^t)\\) . A similar equation is used to characterize the tensile plastic strain as in compression: \\[ \\epsilon^t_p = \\epsilon^t_m \\left(1 - e^{-\\frac{\\epsilon^t_m}{\\epsilon_\\text{cr}} \\alpha_2} \\right) \\] where \\(\\epsilon_m^t\\) is the maximum tensile strain attained previously on the envelope (stored value by the uniaxial material), and \\(\\alpha_2\\) is a parameter. Even though the equation for plastic strain (tension or compression) can be generally used, an internal checking is included in the model such that the unloading/reloading paths have as maximum stiffness the initial stiffness. Concrete06B.png References Popovics, S., 1973, \u201cA Numerical Approach to the Complete Stress-Strain Curve of Concrete\u201d, Cement and Concrete Research, V. 3, No. 4, pp. 583-599. Belarbi, H. and Hsu, T.C.C., 1994, \u201cConstitutive Laws of Concrete in Tension and Reinforcing Bars Stiffened by Concrete\u201d, ACI Structural Journal, V. 91, No. 4, pp. 465-474. Palermo, D., and Vecchio, F. J., 2003, \u201cCompression Field Modeling of Reinforced Concrete Subjected to Reversed Loading: Formulation\u201d, ACI Structural Journal, V. 100, No. 5, pp. 616 - 625. Code developed by: Leo Massone, University of Chile","title":"Concrete06"},{"location":"library/modeling/uniaxial/concrete/93-Concrete07/","text":"Concrete07 Concrete07 is an implementation of Chang and Mander\u2019s 1994 concrete model with simplified unloading and reloading curves. Additionally the tension envelope shift with respect to the origin proposed by Chang and Mander has been removed. The model requires eight input parameters to define the monotonic envelope of confined and unconfined concrete in the following form: uniaxialMaterial Concrete07 $matTag $fc $ec $Ec $ft $et $xp $xn $r matTag integer tag identifying material fc concrete compressive strength (compression is negative)* ec concrete strain at maximum compressive strength* Ec Initial Elastic modulus of the concrete ft tensile strength of concrete (tension is positive) et tensile strain at max tensile strength of concrete xp Non-dimensional term that defines the strain at which the straight line descent begins in tension xn Non-dimensional term that defines the strain at which the straight line descent begins in compression r Parameter that controls the nonlinear descending branch check this page! NOTES: Compressive concrete parameters should be input as negative values. Unconfined Concrete For unconfined concrete, the peak compressive strength fc in the above figure is f\u2019c0 and corresponding strain ec is e\u2019c0. Assuming that the compressive strength for unconfined concrete is readily available, the key parameters required for the model can be found using the following recommendations which include: \\[ \\begin{aligned} &f_{c 0}^{\\prime}=\\text { compressive strength (psi) } \\\\ &\\varepsilon_{c 0}=\\frac{f_{c 0}^{\\prime}}{4000} \\\\ &E_{c}=185,000 *\\left(f_{c 0}^{\\prime}\\right)^{\\frac{1}{8}} \\\\ &f_{t}=7.5 * \\sqrt{f_{c 0}^{\\prime}} \\\\ &\\varepsilon_{t}=\\frac{2 * f_{t}}{E_{c}} \\\\ &x_{p}=2 \\\\ &x_{n}=2.3 \\\\ &r=\\frac{f_{c 0}^{\\prime}}{750}-1.9 \\end{aligned} \\] US_Customary_Units.png \\[ \\begin{aligned} &f_{c 0}=\\text { cylinder strength (MPa) } \\\\ &\\varepsilon_{c 0}=\\frac{f_{c 0}^{\\prime} \\frac{1}{4}}{28} \\\\ &E_{c}=8,200 *\\left(f_{c 0}^{\\prime}\\right)^{\\frac{3}{8}} \\\\ &f_{t}=0.62 * \\sqrt{f_{c o}^{\\prime}} \\\\ &\\varepsilon_{t}=\\frac{2 * f_{t}}{E_{c}} \\\\ &x_{p}=2 \\\\ &x_{n}=2.3 \\\\ &r=\\frac{f_{c 0}^{\\prime}}{5.2}-1.9 \\end{aligned} \\] SI_Metric_Units.png Confined Concrete Confinement increases the strength and ductility of concrete. These effects are accounted in the above figure by replaceing the peak compressive strength and the corresponding strain with \\(f^\\prime_{cc}\\) and e\u2019cc, respectively. The value of \\(r\\) is also decreased. The recommended approach to define all critical parameters needed to model the confined concrete under compression are as follows: \\[ f_{c c}^{\\prime}=f_{c 0}^{\\prime} \\left(1+k_{1} * x^{\\prime}\\right) \\] where: \\[ \\begin{aligned} &f_{c 0}^{\\prime}=\\text { unconfined peak compressive strength } \\\\ &k_{1}=A \\left[0.1+\\frac{0.9}{1+B x^{\\prime}}\\right] \\\\ &x^{\\prime}=\\frac{f_{l 1}+f_{l 2}}{2 f_{c 0}^{\\prime}} \\\\ &A=6.886-(0.6069+17.275 \\mathrm{q}) e^{-4.989 \\mathrm{q}} \\\\ &B=\\frac{4.5}{\\frac{5}{A}\\left[0.9849-0.6306 e^{-3.8939 \\mathrm{q}}\\right]-0.1}-5 &q=\\frac{f_{l 1}}{f_{l 2}} \\quad f_{l 2} \\geq f_{l 1} \\\\ &\\varepsilon_{c c}^{\\prime}=\\varepsilon_{c 0}\\left(1+k_{2} x^{\\prime}\\right) \\\\ &k_{2}=5 \\mathrm{k}_{1} \\quad \\text { for normal strength transverse reinforcement } \\\\ &k_{2}=3 \\mathrm{k}_{1} \\quad \\text { for high strength transverse reinforcement } \\\\ &x_{n}=30 \\text { (value is recommended in order to follow the descending branch to large strains) } \\\\ &n=\\frac{E_{c} \\varepsilon_{c c}}{f_{c c}^{\\prime}} \\\\ &r=\\frac{n}{n-1} \\end{aligned} \\] Confined_Concrete_Parameters.png The monotonic envelope for the tension side of the confined concrete follows the same curve that is used for unconfined concrete. Cyclic Behavior The hysteretic rules for cyclic behavior of confined and unconfined concrete is built into the model and requires no further input from the user. These rules generally follow the recommendations of Chang and Mander, which was established based on statistical regression analysis on the experimental data from cyclic compression tests of a number of researchers. However, three simplifications were made to the rules proposed by Chang and Mander which are: Instead of the power function for unloading and reloading paths, Concrete07 uses tri-linear paths for unloading and reloading. The reason for this change is to increase the computational efficiency of the model, as well as numerical stability. The original model shifts the tension envelope as compression reloading after a reversal occurs. This shift is deemed unnecessary and not implemented in Concrete07. The original model requires an additional strain be applied beyond the unloading strain to rejoin the monotonic envelope. The Concrete07 rejoins the envelope at the unloading strain; this simplification increases the numerical stability and computational efficiency. A full description of the Concrete07 material model, modifications to the Chang and Mander concrete model, and the effects of Concrete07 in improving the simulation capacity of OpenSees is given in Waugh (2007). A comparison of the cyclic behavior of Concrete07 and Concrete03 is shown in below; a magnified view of the tension region is shown separately. A confined concrete is used in this illustration so that the differences between the models behavior is more pronounced. Hysteretic_behavior_of_Concrete07.png Concrete07 gives larger residual displacements than Concrete03. Concrete07 also has a higher initial stiffness compared with Concrete03 and has a much slower softening post-peak in tension. Chang and Mander state that the abrupt loss of capacity shown in Concrete03 in tension is due to testing conditions and not representative of the true material behavior. Comp1.png Comp2.png Axial Load If the material model is used in a section that is going to be subjected to cyclic loading, problems can occur if there is no axial load on the section. The section should be subjected to axial load due to the self weight of the element. If the material is loaded into tension without any compression strain, and then reversed, the model will target \\(-0.00002\\) strain if cracking has not occurred or 5% of the peak strain if cracking has occurred. The increased value after cracking is due to material being wedged in the open cracks. Users are encouraged to apply some axial load to the section equal to the self weight of the element or a small amount if the user does want minimal axial load. Less than 0.05% of f\u2019cAg is adequate to ensure a stable response. This will then be used instead of the default behavior described above. References Chang, G.A., and Mander, J.B., (1994) \u201cSeismic Energy Based Fatigue Damage Ananlysis of Bridge Columns:Part 1 - Evaluation of Seismic Capacity,\u201d NCEER Technical Report No. NCEER-94-0006 State University of New York, Buffalo, N.Y. Waugh, J., (2009) \u201cNonlinear analysis of T-shaped concrete walls subjected to multi-directional displacements\u201d, PhD Thesis, Iowa State University, IA. Code developed by: Jonathan Waugh, Iowa State University and Sri Sritharan, Iowa State University","title":"Concrete07"},{"location":"library/modeling/uniaxial/concrete/94-ConcreteCM/","text":"ConcreteCM This command is used to construct a UniaxialMaterial ConcreteCM (Kolozvari et al., 2015), which is a uniaxial hysteretic constitutive model for concrete developed by Chang and Mander (1994). This model is a refined, rule-based, generalized, and non-dimensional constitutive model that allows calibration of the monotonic and hysteretic material modeling parameters, and can simulate the hysteretic behavior of confined and unconfined, ordinary and high-strength concrete, in both cyclic compression and tension (Figure 1). The model addresses important behavioral features, such as continuous hysteretic behavior under cyclic compression and tension, progressive stiffness degradation associated with smooth unloading and reloading curves at increasing strain values, and gradual crack closure effects. Details of the model are available in the report by Chang and Mander (1994). Model.uniaxial(\u201c ConcreteCM \u201d, \u2003\u2003\u2003name, \u2003\u2003\u2003fpcc, \u2003\u2003\u2003epcc, \u2003\u2003\u2003Ec, \u2003\u2003\u2003rc, \u2003\u2003\u2003xcrn, \u2003\u2003\u2003ft, \u2003\u2003\u2003et, \u2003\u2003\u2003rt, \u2003\u2003\u2003xcrp) fpcc float Compressive strength (f\u2019c) epcc float Strain at compressive strength ( \\(\\epsilon^\\prime_c\\) ) Ec float Initial tangent modulus ( \\(E_c\\) ) rc float Shape parameter in Tsai\u2019s equation defined for compression ( \\(r_c\\) ) xcrn float Non-dimensional critical strain on compression envelope ( \\(\\epsilon^-_{cr}\\) , where the envelope curve starts following a straight line) ft float Tensile strength ( \\(f_t\\) ) et float Strain at tensile strength ( \\(\\epsilon\\) t) rt float Shape parameter in Tsai\u2019s equation defined for tension ( \\(r_t\\) ) xcrp float Non-dimensional critical strain on tension envelope ( \\(\\epsilon^ _{cr}\\) , where the envelope curve starts following a straight line \u2013 large value [e.g., 10000] recommended when tension stiffening is considered) gap int gap = 0, less gradual gap closure (default); gap = 1, more gradual gap closure Figure 1. Hysteretic Constitutive Model for Concrete by Chang and Mander (1994) The Chang and Mander (1994) model generates continuous hysteretic stress-strain relationships with slope continuity for confined and unconfined concrete in both compression and tension. The compression envelope curve of the model is defined by the initial tangent slope, (E c ), the peak coordinate ( \\(\\epsilon^\\prime_c\\) , \\(f^\\prime_c\\) ), a parameter (r c ) from Tsai\u2019s (1988) equation defining the shape of the envelope curve, and a parameter ( \\(\\epsilon\\) - cr ) to define normalized (with respect to \\(\\epsilon^\\prime_c\\) ) strain where the envelope curve starts following a straight line, until zero compressive stress is reached at the spalling strain, \\(\\epsilon_{sp}\\) . These parameters can be controlled based on specific experimental results for a refined calibration of the compression envelope (Figure 2). Chang and Mander (1994) proposed empirical relationships for parameters \\(E_c\\) , \\(\\epsilon\\) \u2019 c , and r c for unconfined concrete with compressive strength f\u2019 c , based on review of previous research. Parameters f\u2019 c , \\(\\epsilon\\) \u2019 c , E c , r c , and \\(\\epsilon\\) - cr can also be calibrated to represent the stress-strain behavior of confined concrete in compression, to follow the constitutive relationships for confined concrete proposed by Mander et al (1988) or similar. Figure 2. Compression and Tension Envelope Curves The shape of the tension envelope curve in the model is the same as that of the compression envelope; however, the tension envelope curve is shifted to a new origin that is based on the unloading strain from the compression envelope (Figure 2). As well, the strain ductility experienced previously on the compression envelope is also reflected on the tension envelope. The parameters associated with the tension envelope curve include the tensile strength of concrete (f t ), the monotonic strain at tensile strength ( \\(\\epsilon_\\textrm{t}\\) ), a parameter (r t ) from Tsai\u2019s (1988) equation defining the shape of the tension envelope curve, and a parameter ( \\(\\epsilon\\) + cr ) to define normalized (with respect to \\(\\epsilon\\) t ) strain where the tension envelope curve starts following a straight line, until zero tensile stress is reached at a strain of \\(\\epsilon\\) crk . These parameters can also be controlled and calibrated based on specific experimental results or empirical relations proposed by other researchers (e.g., Belarbi and Hsu, 1994) to model the behavior of concrete in tension and the tension stiffening phenomenon. Concrete experiencing tension stiffening can be considered not to crack completely; that is, a large value for parameter \\(\\epsilon\\) + cr (e.g., 10000) can be defined. Source: /usr/local/cvs/OpenSees/SRC/material/uniaxial/ Input Format: Example: uniaxialMaterial ConcreteCM 1 -6 .2 -0 .0021 4500 7 1.035 0.30 0.00008 1.2 10000 Example of hysteretic stress-strain history generated by the model code is illustrated in Figure 3. Figure 3. Concrete Stress-Strain Behavior Discussion: An optional input parameter gap is introduced in the ConcreteCM model implemented in OpenSees for providing the users with the opportunity to control the intensity of gap closure in the stress-strain behavior of concrete, which in-turn influences the level of pinching in the lateral load-displacement behavior of a RC wall. The original Chang and Mander (1994) model adopts a non-zero tangent stiffness at zero stress level upon unloading from the tension envelope, which is represented by gap = 1 in ConcreteCM . Using gap = 0 (default) produces less gradual gap closure, since it assumes zero tangent stiffness at zero stress level upon unloading from the tension envelope, and is suitable for most analyses. Figure 4 illustrates the effect of plastic stiffness upon unloading from tension envelope ( E + pl ) on crack closure, i.e. use of more gradual ( gap = 1) or less gradual ( gap = \\(0\\) ) gap closure. The effect of parameter gap on predictions of flexural behavior of a RC wall is illustrated in Example 1 of MVLEM element. Figure 4. Effect of Plastic Stiffness upon Unloading from Tension Envelope (Epl+) on Crack Closure Constitutive stress-strain concrete behavior is also implemented in OpenSees in uniaxialMaterial Cocnrete07 . However, ConcreteCM incorporates sophisticated unloading/reloading rules defined originally by Chang and Mander (1994), as opposed to Concrete07 that adopts simplified hysteretic rules. Comparison between stress-strain response predicted using ConcreteCM and Concrete07 is shown in Figure 5. Figure 5. Comparison of ConcreteCM and Concrete07 References Belarbi H. and Hsu T.C.C. (1994), \u201cConstitutive Laws of Concrete in Tension and Reinforcing Bars Stiffened by Concrete\u201d, ACI Structural Journal, V. 91, No. 4, pp. 465-474. Chang, G.A. and Mander, J.B. (1994), \u201cSeismic Energy Based Fatigue Damage Analysis of Bridge Columns: Part I - Evaluation of Seismic Capacity\u201d, NCEER Technical Report No. NCEER-94-0006, State University of New York, Buffalo. Kolozvari K., Orakcal K., and Wallace J. W. (2015). \u201cShear-Flexure Interaction Modeling of reinforced Concrete Structural Walls and Columns under Reversed Cyclic Loading\u201d, Pacific Earthquake Engineering Research Center, University of California, Berkeley, PEER Report No. 2015/12 Mander J.B., Priestley M.J.N., and Park R. (1988). \u201cTheoretical Stress-Strain Model for Confined Concrete\u201d, ASCE Journal of Structural Engineering, V. 114, No. 8, pp. 1804-1826. Orakcal K.(2004), \u201cNonlinear Modeling and Analysis of Slender Reinforced Concrete Walls\u201d, PhD Dissertation, Department of Civil and Environmental Engineering, University of California, Los Angeles. Tsai W.T. (1988), \u201cUniaxial Compressional Stress-Strain Relation of Concrete\u201d, ASCE Journal of Structural Engineering, V. 114, No. 9, pp. 2133-2136. Code developed by: Kristijan Kolozvari , California State University, Fullerton Kutay Orakcal , Bogazici University, Istanbul, Turkey John Wallace , Univeristy of California, Los Angeles","title":"ConcreteCM"},{"location":"library/modeling/uniaxial/concrete/95-ConcreteD/","text":"ConcreteD This command is used to construct a concrete material based on the Chinese design code. uniaxialMaterial ConcreteD $matTag $fc $epsc $ft $epst $Ec $alphac $alphat < $cesp > < $etap > matTag integer tag identifying material fc concrete compressive strength * epsc concrete strain at corresponding to compressive strength* ft concrete tensile strength * epst concrete strain at corresponding to tensile strength* Ec concrete initial Elastic modulus* alphac compressive descending parameter* alphat tensile descending parameter* cesp plastic parameter, recommended values: 0.2~0.3* etap plastic parameter, recommended values: 1.0~1.3* NOTES : Concrete compressive strength and the corresponding strain should be input as negative values. The value \\(fc/\\) epsc and \\(ft/\\) epst should be smaller than $Ec. The default value for $cesp and $etap are 0.25 and 1.15, respectively. EXAMPLE : Example 1: Simulation of compressive test in Karson and Jirsa (1969). uniaxialMaterial ConcreteD 1 -27.6 -0.002 3 0.0001 35000 1.0 0.1 0.25 1.15 REFERENCES : Karsan, I. D., and Jirsa, J. O. (1969). \u201cBehavior of concrete under compressive loadings.\u201d Journal of the Structural Division, 95(12), 2535-2563. Ministry of Housing and Urban-Rural Development of the People\u2019s Republic of China. (2010). \u201cCode for design of concrete structures.\u201d GB50010-2010, Beijing, China. Ren, X. D. (2010). Multi-scale based stochastic damage constitutive theory for concrete. Doctoral dissertation, Tongji University, Shanghai. (in Chinese) Wu, J. Y., Li, J., and Faria, R. (2006). \u201cAn energy release rate-based plastic-damage model for concrete.\u201d International Journal of Solids and Structures, 43(3), 583-612. Zeng, S. J. (2012). Dynamic Experimental Research and Stochastic Damage Constitutive Model for Concrete. Doctoral dissertation, Tongji University, Shanghai. (in Chinese) Code developed by : Zengyong Wan, Decheng Feng, Xiaodan Ren, Jie Li, College of Civil Engineering, Tongji University,","title":"ConcreteD"},{"location":"library/modeling/uniaxial/concrete/97-ConfinedConcrete01/","text":"ConfinedConcrete01 This command is used to construct an uniaxial material object of confined concrete in according to the work of Braga, Gigliotti and Laterza (2006). The confined concrete model (BGLmodel) has not tensile strength and degraded linear unloading/reloading stiffness as proposed by Karsan and Jirsa (1969). The BGL model accounts for confinement effects due to different arrangements of transverse reinforcement and/or external strengthening such as steel jackets or FRP wraps. The confinement effect along the column is described as well. In order to obtain th ecompressive envelope curve a non linear approach is performed at each increment of column axial strain.The sougth curve is obtained crossing different stress\u2010strain relationships, each of which corresponding to a different level of confinement. Currently, the Attard and Setunge\u2019s model is implemented in calculating each active curve of the confined concrete. IMPORTANT: the units to be used are MPa, mm. Model.uniaxial(\u201c ConfinedConcrete01 \u201d, \u2003\u2003\u2003name, \u2003\u2003\u2003secType, \u2003\u2003\u2003fpc, \u2003\u2003\u2003E, \u2003\u2003\u2003eps_ult, \u2003\u2003\u2003poisson, \u2003\u2003\u2003L1, \u2003\u2003\u2003phis, \u2003\u2003\u2003S, \u2003\u2003\u2003fyh, \u2003\u2003\u2003Es0, \u2003\u2003\u2003haRatio, \u2003\u2003\u2003mu, \u2003\u2003\u2003phiLon) secType str label for the transverse reinforcement configuration. S1 square section with S1 type of transverse reinforcement with or without external FRP wrapping S2 square section with S2 type of transverse reinforcement with or without external FRP wrapping S3 square section with S3 type of transverse reinforcement with or without external FRP wrapping S4a square section with S4a type of transverse reinforcement with or without external FRP wrapping S4b square section with S4b type of transverse reinforcement with or without external FRP wrapping S5 square section with S5 type of transverse reinforcement with or without external FRP wrapping C circular section with or without external FRP wrapping R rectangular section with or without external FRP wrapping. fpc float E float Young\u2019s modulus of elasticity eps_ult Alt poisson Alt L1 float length/diameter of square/circular core section measured respect to the hoop center line. L2 float additional dimensions when multiple hoops are being used. L3 float additional dimensions when multiple hoops are being used. phis float hoop diameter. If section arrangement has multiple hoops it refers to the external hoop. S float hoop spacing. fyh float yielding strength of the hoop steel. Es0 float elastic modulus of the hoop steel. haRatio float hardening ratio of the hoop steel. mu float ductility factor of the hoop steel. phiLon float diameter of longitudinal bars. internals [phisi,Si,fyhi,Es0i,haRatioi,mui] , optional parameters for defining the internal transverse reinforcement.If they are not specified they will be assumed equal to the external ones (for S2, S3, S4a, S4b and S5 typed). phisi float Si float fyhi float Es0i float haRatioi float mui float wrap [cover,Am,Sw,ful,Es0w] , cover float cover thickness measured from the outer line of hoop. Am float total area of FRP wraps (number of layers x wrap thickness x wrap width). Sw float spacing of FRP wraps (if continuous wraps are used the spacing is equal to the wrap width). ful float ultimate strength of FRP wraps. Es0w float elastic modulus of FRP wraps. gravel = False bool silica = False bool tol float maxNumIter float epscuLimit float stRatio float uniaxialMaterial ConfinedConcrete01 $tag $secType $fpc $Ec ( < -epscu $epscu > OR < -gamma $gamma > ) ( < -nu $nu > OR < -varub > OR < -varnoub > ) $L1 ( $L2 ) ( $L3 ) $phis $S $fyh $Es0 $haRatio $mu $phiLon < -internal $phisi $Si $fyhi $Es0i $haRatioi $mui > < -wrap $cover $Am $Sw $fuil $Es0w > < -gravel > < -silica > < -tol $tol > < -maxNumIter $maxNumIter > < -epscuLimit $epscuLimit > < -stRatio $stRatio > matTag ( int ) integer tag identifying material secType ( str ) tag for the transverse reinforcement configuration. see image below. \u2018S1\u2019 square section with S1 type of transverse reinforcement with or without external FRP wrapping \u2018S2\u2019 square section with S2 type of transverse reinforcement with or without external FRP wrapping \u2018S3\u2019 square section with S3 type of transverse reinforcement with or without external FRP wrapping \u2018S4a\u2019 square section with S4a type of transverse reinforcement with or without external FRP wrapping \u2018S4b\u2019 square section with S4b type of transverse reinforcement with or without external FRP wrapping \u2018S5\u2019 square section with S5 type of transverse reinforcement with or without external FRP wrapping \u2018C\u2019 circular section with or without external FRP wrapping \u2018R\u2019 rectangular section with or without external FRP wrapping. fpc ( float ) unconfined cylindrical strength of concrete specimen. Ec ( float ) initial elastic modulus of unconfined concrete. epscu_type ( str ) Method to define confined concrete ultimate strain - -epscu then value is confined concrete ultimate strain, - -gamma then value is the ratio of the strength corresponding to ultimate strain to the peak strength of the confined concrete stress-strain curve. If gamma cannot be achieved in the range [0, epscuLimit] then epscuLimit (optional, default: 0.05) will be assumed as ultimate strain. epscu_val ( float ) Value for the definition of the concrete ultimate strain nu ( str ) or ( list ) Definition for Poisson\u2019s Ratio. - [\u2018-nu\u2019, <value of Poisson\u2019s ratio>] - \u2018-varub\u2019 Poisson\u2019s ratio is defined as a function of axial strain by means of the expression proposed by Braga et al. (2006) with the upper bound equal to 0.5 - \u2018-varnoub\u2019 Poisson\u2019s ratio is defined as a function of axial strain by means of the expression proposed by Braga et al. (2006) without any upper bound. L1 ( float ) length/diameter of square/circular core section measured respect to the hoop center line. L2 ( float ) additional dimensions when multiple hoops are being used. L3 ( float ) additional dimensions when multiple hoops are being used. phis ( float ) hoop diameter. If section arrangement has multiple hoops it refers to the external hoop. S ( float ) hoop spacing. fyh ( float ) yielding strength of the hoop steel. Es0 ( float ) elastic modulus of the hoop steel. haRatio ( float ) hardening ratio of the hoop steel. mu ( float ) ductility factor of the hoop steel. phiLon ( float ) diameter of longitudinal bars. internalArgs ( list ( float )) internalArgs= [phisi, Si, fyhi, Es0i, haRatioi, mui] optional parameters for defining the internal transverse reinforcement. If they are not specified they will be assumed equal to the external ones (for S2 , S3 , S4a , S4b and S5 typed). wrapArgs ( list ( float )) wrapArgs=[cover, Am, Sw, ful, Es0w] optional parameters required when section is strengthened with FRP wraps. cover cover thickness measured from the outer line of hoop. Am total area of FRP wraps (number of layers x wrap thickness x wrap width). Sw spacing of FRP wraps (if continuous wraps are used the spacing is equal to the wrap width). ful ultimate strength of FRP wraps. Es0w elastic modulus of FRP wraps. \u2018-gravel\u2019 ( str ) Unknown \u2018-silica\u2019 ( str ) Unknown tol ( float ) Unknown maxNumIter ( int ) Unknown epscuLimit ( float ) Unknown stRatio Unknown tag integer tag identifying material. secType tag for the transverse reinforcement configuration. See NOTE 1. fpc unconfined cylindrical strength of concrete specimen. Ec initial elastic modulus of unconfined concrete. <-epscu $epscu> OR <-gamm $gamma> confined concrete ultimate strain. See NOTE 2. <-nu \\(nu&gt; OR &lt;-varub&gt; OR &lt;-varnoub&gt;</strong></p></td> <td><p>Poisson's Ratio. See NOTE 3.</p></td> </tr> <tr class=\"odd\"> <td><p><code class=\"parameter-table-variable\">L1</code></p></td> <td><p>length/diameter of square/circular core section measured respect to the hoop center line.</p></td> </tr> <tr class=\"even\"> <td><p><strong>(\\) L2), ($L3) additional dimensions when multiple hoops are being used. See NOTE 4. phis hoop diameter. If section arrangement has multiple hoops it refers to the external hoop. S hoop spacing. fyh yielding strength of the hoop steel. Es0 elastic modulus of the hoop steel. haRatio hardening ratio of the hoop steel. mu ductility factor of the hoop steel. phiLon diameter of longitudinal bars. <-internal $phisi $Si $fyhi $Es0i $haRatioi $mui> optional parameters for defining the internal transverse reinforcement. If they are not specified they will be assumed equal to the external ones (for S2, S3, S4a, S4b and S5 typed). <-wrap $cover $Am $Sw $ful $Es0w> optional parameters required when section is strengthened with FRP wraps. See NOTE 5. NOTES: The following section types are available: S1 square section with S1 type of transverse reinforcement with or without external FRP wrapping; S2 square section with S2 type of transverse reinforcement with or without external FRP wrapping; S3 square section with S3 type of transverse reinforcement with or without external FRP wrapping; S4a square section with S4a type of transverse reinforcement with or without external FRP wrapping; S4b square section with S4b type of transverse reinforcement with or without external FRP wrapping; S5 square section with S5 type of transverse reinforcement with or without external FRP wrapping; C circular section with or without external FRP wrapping; R rectangular section with or without external FRP wrapping. SectionTypes.png The confined concrete ultimate strain is defined using -epscu or -gamma . When -gamma option is specified, gamma is the ratio of the strength corresponding to ultimate strain to the peak strength of the confined concrete stress-strain curve. If gamma cannot be achieved in the range [0, epscuLimit ] then epscuLimit (optional, default: 0.05) will be assumed as ultimate strain. Poisson\u2019s Ratio is specified by one of these 3 methods: a) providing nu using the -nu option. b) using the -varUB option in which Poisson\u2019s ratio is defined as a function of axial strain by means of the expression proposed by Braga et al. (2006) with the upper bound equal to 0.5; or c) using the -varNoUB option in which case Poisson\u2019s ratio is defined as a function of axial strain by means of the expression proposed by Braga et al. (2006) without any upper bound. L1 (2l), L2 (a) and L3 (b) are required when either S4a or S4b section types is used. L1 (2d) and L2 (2c) must be used for rectangular section. When external stengthening is used must be specified the following parameters: cover cover thickness measured from the outer line of hoop. Am total area of FRP wraps (number of layers x wrap thickness x wrap width). Sw spacing of FRP wraps (if continuous wraps are used the spacing is equal to the wrap width). ful ultimate strength of FRP wraps. Es0w elastic modulus of FRP wraps. Stresses and strains can be defined either as positive or as negative values. All commands are not case sensitive. Examples Square section reinforced by simple transverse hoop and by additional FRP wraps (Section S1) S1.png Section S1 # uniaxialMaterial ConfinedConcrete01 $tag $secType $fpc $Ec -epscu # $epscu $nu $L1 $phis $S $fyh $Es0 $haRatio $mu $phiLon -stRatio # $stRatio</li> uniaxialMaterial ConfinedConcrete01 1 S1 -30 .0 26081.0 -epscu -0 .03 \\ -varub 300.0 10.0 100.0 300.0 206000.0 0.0 1000.0 16.0 -stRatio 0.85 Section S1 strengthened by additional FRP wraps # uniaxialMaterial ConfinedConcrete01 $tag $secType $fpc $Ec -epscu # $epscu $nu $L1 $phis $S $fyh $Es0 $haRatio $mu phiLon $cover $Am $Sw # $ful $Es0w -stRatio $stRatio</li> uniaxialMaterial ConfinedConcrete01 1 S1 -30 .0 26081.0 -epscu -0 .03 \\ -varub 300.0 10.0 100.0 300.0 206000.0 0.0 1000.0 16.0 \\ -wrap 30.0 51.0 100.0 3900.0 230000.0 -stRatio 0.85 Square section reinforced by multiple transverse hoop and by additional FRP wraps (Section S4a) S4a.png Section S4a # uniaxialMaterial ConfinedConcrete01 $tag $secType $fpc $Ec -epscu # $epscu $nu $L1 $L2 $L3 $phis $S $fyh $Es0 $haRatio $mu $phiLon -stRatio # $stRatio</li> uniaxialMaterial ConfinedConcrete01 1 S4a -30 .0 26081.0 -epscu -0 .03 \\ -varUB 300.0 200.0 100.0 10.0 100.0 300.0 206000.0 0.0 1000.0 16.0 \\ -stRatio 0.85 Section S4a strengthened by additional FRP wraps # uniaxialMaterial ConfinedConcrete01 $tag $secType $fpc $Ec -epscu # $epscu $nu $L1 $L2 $L3 $phis $S $fyh $Es0 $haRatio $mu $phiLon $cover # $Am $Sw $ful $Es0w -stRatio $stRatio uniaxialMaterial ConfinedConcrete01 1 S4a -30 .0 26081.0 -epscu -0 .03 \\ -varUB 300.0 200.0 100.0 10.0 100.0 300.0 206000.0 0.0 1000.0 16.0 \\ -wrap 30.0 51.0 100.0 3900.0 230000.0 -stRatio 0.85 Rectangular section reinforced by simple transverse hoop and by additional FRP wraps (Section R) R.png Section R # uniaxialMaterial ConfinedConcrete01 $tag $secType $fpc $Ec -epscu $epscu $nu $L1 $L2 $phis $S $fyh $Es0 $haRatio $mu $phiLon -stRatio $stRatio uniaxialMaterial ConfinedConcrete01 1 R -30 .0 26081.0 -epscu -0 .03 \\ -varUB 500.0 300.0 10.0 100.0 300.0 206000.0 0.0 1000.0 16.0 \\ -stRatio 0.85 Section R strengthened by additional FRP wraps # uniaxialMaterial ConfinedConcrete01 $tag $secType $fpc $Ec -epscu \\ # $epscu $nu $L1 $L2 $phis $S $fyh $Es0 $haRatio $mu $phiLon $cover $Am \\ # $Sw $ful $Es0w -stRatio $stRatio uniaxialMaterial ConfinedConcrete01 1 R -30 .0 26081.0 -epscu -0 .03 \\ -varUB 500.0 300.0 10.0 100.0 300.0 206000.0 0.0 1000.0 16.0 -wrap 30.0 \\ 51.0 100.0 3900.0 230000.0 -stRatio 0.85 REFEERENCES: Attard, M. M., Setunge, S., 1996. \u201cStress-strain relationship of confined and unconfined concrete\u201d. Material Journal ACI, 93(5), 432-444 Braga, F., Gigliotti, R., Laterza, M., 2006. \u201cAnalytical stress-strain relationship for concrete confined by steel stirrups and/or FRP jackets\u201d. Journal of Structural Engineering ASCE, 132(9), 1402-1416. D\u2019Amato M., February 2009. \u201cAnalytical models for non linear analysis of RC structures: confined concrete and bond-slips of longitudinal bars\u201d. Doctoral Thesis. University of Basilicata, Potenza, Italy. D\u2019Amato, M., Braga, F., Gigliotti, R., Kunnath S., Laterza, M., 2012. \u201cA numerical general-purpose confinement model for non-linear analysis of R/C members\u201d. Computers and Structures Journal, Elsevier, Vol. 102-103, 64-75. Karsan, I. D., Jirsa, J. O., 1969. \u201cBehavior of concrete under compressive loadings\u201d, Journal of Structural Division ASCE, 95(12), 2543-2563. Code Developed by: Michele D\u2019Amato, University of Basilicata, Italy","title":"ConfinedConcrete01"},{"location":"library/modeling/uniaxial/concrete/Concrete02IS/","text":"Concrete02IS Model.uniaxial(\u201c Concrete02IS \u201d, name, E, fpc, epsc0, fpcu, epscu) E float Young\u2019s modulus of elasticity fpc float peak compressive stress epsc0 float fpcu float epscu float tension [rat,ft,Ets] , rat float ft float Ets float Tensile initial modulus This model is discussed in this blog post by Prof. Scott. Code developed by: Dr. Nasser Marafi","title":"Concrete02IS"},{"location":"library/modeling/uniaxial/elastic/180-ElasticBilin/","text":"ElasticBilin This command is used to construct an elastic bilinear uniaxial material object. Unlike all other bilinear materials, the unloading curve follows the loading curve exactly. Model.uniaxial(\u201c ElasticBilin \u201d, name, E, E2, eps2) E float tangent in tension for stains: 0 <= strains \\(\\le\\) epsP2 E2 float tangent when material in tension with strains > epsP2 eps2 float strain at which material changes tangent in tension. EN1 float optional, default = EP1 . tangent in compression for stains: 0 < strains \\(\\le\\) epsN2 EN2 float optional, default = EP2 . tangent in compression with strains < epsN2 epsN2 float optional, default = -epsP2. strain at which material changes tangent in compression. ElasticPP.gif NOTE: eps0 can not be controlled. It is always zero. Code Developed by: fmk","title":"ElasticBilin"},{"location":"library/modeling/uniaxial/elastic/181-ElasticMultiLinear/","text":"ElasticMultiLinear This command is used to construct a multi-linear elastic uniaxial material object. The nonlinear stress-strain relationship is given by a multi-linear curve that is define by a set of points. The behavior is nonlinear but it is elastic. This means that the material loads and unloads along the same curve, and no energy is dissipated. The slope given by the last two specified points on the positive strain axis is extrapolated to infinite positive strain. Similarly, the slope given by the last two specified points on the negative strain axis is extrapolated to infinite negative strain. The number of provided strain points needs to be equal to the number of provided stress points. Model.uniaxial(\u201c ElasticMultilinear \u201d, name, points) points [[strain,stress]] , Points defining multilinear backbone. [strain,stress] Grp(Num) , strain float stress float ElasticMultiLinear.png Examples uniaxialMaterial ElasticMultiLinear 1 \\ -strain -0 .045 -0 .04 -0 .02 0.0 0.02 0.04 0.045 \\ -stress 10 -100 -10 0 50 55 100 Code Developed by: Andreas Schellenberg, University of California, Berkeley.","title":"ElasticMultiLinear"},{"location":"library/modeling/uniaxial/elastic/195-Elastic%20Uniaxial/","text":"Elastic This command is used to construct an elastic uniaxial material object. Model.uniaxial(\u201c ElasticUniaxialMaterial \u201d, name, E) E float Young\u2019s modulus of elasticity eta = 0.0 float damping tangent Eneg float G float Code Developed by: fmk","title":"Elastic"},{"location":"library/modeling/uniaxial/generic/177-Elastic-No%20Tension/","text":"Elastic-No Tension This command is used to construct a uniaxial elastic-no tension material object. uniaxialMaterial ENT $matTag $E matTag integer tag identifying material E tangent ENT.gif Code Developed by: fmk","title":"Elastic-No Tension"},{"location":"library/modeling/uniaxial/generic/179-Elastic-Perfectly%20Plastic/","text":"Elastic-Perfectly Plastic This command is used to construct an elastic perfectly-plastic uniaxial material object. Model.uniaxial(\u201c ElasticPP \u201d, name, E, epsyP) E float Young\u2019s modulus of elasticity epsyP float strain or deformation at which material reaches plastic state in tension epsyN float strain or deformation at which material reaches plastic state in compression. (optional, default is tension value) eps0 float initial strain (optional, default: zero) ElasticPP.gif Code Developed by: fmk","title":"Elastic-Perfectly Plastic"},{"location":"library/modeling/uniaxial/generic/322-Hardening/","text":"Hardening This command is used to construct a uniaxial material object with combined linear kinematic and isotropic hardening. The model includes optional visco-plasticity using a Perzyna formulation. Model.uniaxial(\u201c HardeningMaterial \u201d, name, E, fy, H_iso, H_kin) E float Young\u2019s modulus of elasticity fy float Yield stress. H_iso float isotropic hardening Modulus H_kin float kinematic hardening Modulus eta float visco-plastic coefficient (optional, default=0.0) HardeningMaterial.gif Code Developed by: Micheal H. Scott, Oregon State University Image Developed by: Silvia Mazzoni","title":"Hardening"},{"location":"library/modeling/uniaxial/generic/381-Maxwell/","text":"Maxwell This command is used to construct a ViscousDamper material, which represents the Maxwell Model (linear spring and nonlinear dashpot in series). The ViscousDamper material simulates the hysteretic response of nonlinear viscous dampers. An adaptive iterative algorithm has been implemented and validated to solve numerically the constitutive equations within a nonlinear viscous damper with a high-precision accuracy. uniaxialMaterial ViscousDamper $matTag $K $Cd $alpha < $LGap > < $NM $RelTol $AbsTol $MaxHalf > matTag integer tag identifying material K Elastic stiffness of linear spring to model the axial flexibility of a viscous damper (e.g. combined stiffness of the supporting brace and internal damper portion) Cd Damping coefficient alpha Velocity exponent LGap Gap length to simulate the gap length due to the pin tolerance NM Employed adaptive numerical algorithm (default value NM = 1; 1 = Dormand-Prince54, 2=6th order Adams-Bashforth-Moulton, 3=modified Rosenbrock Triple) RelTol Tolerance for absolute relative error control of the adaptive iterative algorithm (default value 10^-6) AbsTol Tolerance for absolute error control of adaptive iterative algorithm (default value 10^-10) MaxHalf Maximum number of sub-step iterations within an integration step (default value 15) Examples: 1. Input parameters: Assume a viscous damper with axial stiffness K=300.0kN/mm, damping coefficient Cd=280.3kN(s/mm) 0.3 , and exponent a=0.30. The input parameters for the material should be as follows: uniaxialMaterial ViscousDamper 1 300 280.3 0.30 Using these properties, Figure 1 shows the hysteretic response of this damper for sinusoidal displacement increments of 12, 24 and 36mm and a frequency f = 0.5Hz. The sensitivity of the viscous damper with respect to its velocity exponent is shown in Figures 2 to 4 for the following set of parameters: Viscous Damper with various input parameter variations 2. Single story single bay frame with viscous damper References [1] Akcelyan, S., Lignos, D. G., Hikino, T., and Nakashima, M. (2016). \u201cEvaluation of simplified and state-of-the-art analysis procedures for steel frame buildings equipped with supplemental damping devices based on E-Defense full-scale shake table tests.\u201d Journal of Structural Engineering, 142(6), 04016024. 1 [2] Oohara, K., and Kasai, K. (2002), \u201cTime-History Analysis Models for Nonlinear Viscous Dampers\u201d, Proc. Structural Engineers World Congress (SEWC), Yokohama, JAPAN, CD-ROM, T2-2-b-3 (in Japanese). [3] Kasai K, Oohara K. \u201cAlgorithm and Computer Code To Simulate Response of Nonlinear Viscous Damper\u201d Passively Controlled Structure Symposium 2001, Yokohama, Japan (in Japanese). Code developed by : Sarven Akcelyan & Prof. Dimitrios G. Lignos , (McGill University)","title":"Maxwell"},{"location":"library/modeling/uniaxial/generic/404-MultiLinear/","text":"MultiLinear This command is used to construct a uniaxial multilinear material object. uniaxialMaterial MultiLinear $matTag $u1 $f1 $u2 $f2 $u3 $f3 $u4 $f4 ... matTag integer tag identifying material u1 f1 strain and stress (or deformation & force) at first point of the envelope u2 f2 strain and stress (or deformation & force) at second point of the envelope u3 f3 strain and stress (or deformation & force) at third point of the envelope u4 f4 strain and stress (or deformation & force) at fourth point of the envelope MultiLinear_Material2.png MultiLinear Material \u2013 Hysteretic Behavior Code Developed by: Frank Mckenna, UC Berkeley Images Developed by: Vesna Terzic","title":"MultiLinear"},{"location":"library/modeling/uniaxial/generic/748-ViscousDamper/","text":"ViscousDamper This command is used to construct a ViscousDamper material, which represents the Maxwell Model (linear spring and nonlinear dashpot in series). The ViscousDamper material simulates the hysteretic response of nonlinear viscous dampers. An adaptive iterative algorithm has been implemented and validated to solve numerically the constitutive equations within a nonlinear viscous damper with a high-precision accuracy. uniaxialMaterial ViscousDamper $matTag $K $Cd $alpha < $LGap > < $NM $RelTol $AbsTol $MaxHalf > matTag integer tag identifying material K Elastic stiffness of linear spring to model the axial flexibility of a viscous damper (e.g. combined stiffness of the supporting brace and internal damper portion) Cd Damping coefficient alpha Velocity exponent LGap Gap length to simulate the gap length due to the pin tolerance NM Employed adaptive numerical algorithm (default value NM = 1; 1 = Dormand-Prince54, 2=6th order Adams-Bashforth-Moulton, 3=modified Rosenbrock Triple) RelTol Tolerance for absolute relative error control of the adaptive iterative algorithm (default value 10^-6) AbsTol Tolerance for absolute error control of adaptive iterative algorithm (default value 10^-10) MaxHalf Maximum number of sub-step iterations within an integration step (default value 15) Examples Input parameters: Assume a viscous damper with axial stiffness K=300.0kN/mm, damping coefficient Cd=280.3kN (s/mm) 0.3 , and exponent \\(a=0.30\\) . The input parameters for the material should be as follows: uniaxialMaterial ViscousDamper 1 300 280.3 0.30 Using these properties, Figure 1 shows the hysteretic response of this damper for sinusoidal displacement increments of 12, 24 and 36mm and a frequency \\(f = 0.5\\) Hz. The sensitivity of the viscous damper with respect to its velocity exponent is shown in Figures 2 to 4 for the following set of parameters: Viscous Damper with various input parameter variations Single story single bay frame with viscous damper docs/contrib/examples/163-Dynamic Analyses of 1-Story Moment Frame with Viscous Dampers.html References [1] Akcelyan, S., Lignos, D. G., Hikino, T., and Nakashima, M. (2016). \u201cEvaluation of simplified and state-of-the-art analysis procedures for steel frame buildings equipped with supplemental damping devices based on E-Defense full-scale shake table tests.\u201d Journal of Structural Engineering, 142(6), 04016024. 1 [2] Akcelyan, S., Lignos, D. G., Hikino, T. (2018). \u201cAdaptive Numerical Method Algorithms for Nonlinear Viscous and Bilinear Oil Damper Models Subjected to Dynamic Loading.\u201d Soil Dynamics and Earthquake Engineering, 113, 488-502. 2 . [3] Akcelyan, S. (2017). \u201cSeismic retrofit of existing steel tall buildings with supplemental damping devices.\u201d Ph.D. Dissertation, McGill University, Canada. [4] Oohara, K., and Kasai, K. (2002), \u201cTime-History Analysis Models for Nonlinear Viscous Dampers\u201d, Proc. Structural Engineers World Congress (SEWC), Yokohama, JAPAN, CD-ROM, T2-2-b-3 (in Japanese). [5] Kasai K, Oohara K. \u201cAlgorithm and Computer Code To Simulate Response of Nonlinear Viscous Damper\u201d Passively Controlled Structure Symposium 2001, Yokohama, Japan (in Japanese). Code developed by : Sarven Akcelyan & Prof. Dimitrios G. Lignos , (McGill University)","title":"ViscousDamper"},{"location":"library/modeling/uniaxial/generic/749-Viscous/","text":"Viscous This command is used to construct a uniaxial viscous material object. stress =C(strain-rate)^alpha uniaxialMaterial Viscous $matTag $C $alpha matTag integer tag identifying material C damping coeficient alpha power factor (=1 means linear damping) Notes: This material can only be assigned to truss and zeroLength elements. This material can not be combined in parallel/series with other materials. When defined in parallel with other materials it is ignored. References See Eqn 9 in G. Pekcan, J.B.Mander abd S.S. Chen, \u201cFundamental Considerations for the Design of Non-Linear Viscous Dampers\u201d, Earthqauke Engineering & Structural Dynamics 28,1405-1425 (1999) Code Developed by: Mehrdad Sasani, NEU","title":"Viscous"},{"location":"library/modeling/uniaxial/geotechnical/556-PyLiq1/","text":"PyLiq1 This command constructs a uniaxial \\(p-y\\) material that incorporates liquefaction effects. This p y material is used with a zeroLength element to connect a pile (beam-column element) to a 2 D plane-strain FE mesh or displacement boundary condition. The \\(p-y\\) material obtains the average mean effective stress (which decreases with increasing excess pore pressure) either from two specified soil elements, or from a time series. Currently, the implementation requires that the specified soil elements consist of FluidSolidPorousMaterials in FourNodeQuad elements, or PressureDependMultiYield or PressureDependMultiYield02 materials in FourNodeQuadUP or NineFourQuadUP elements. There are two possible forms: uniaxialMaterial PyLiq1 $matTag $soilType $pult $Y50 $Cd $c $pRes $ele1 $ele2 OR uniaxialMaterial PyLiq1 $matTag $soilType $pult $Y50 $Cd $c $pRes -timeSeries $tag matTag integer tag identifying material soilType soilType = 1 Backbone of \\(p-y\\) curve approximates Matlock (1970) soft clay relation. soilType = 2 Backbone of \\(p-y\\) curve approximates API (1993) sand relation. pult Ultimate capacity of the \\(p-y\\) material. Note that \u201cp\u201d or \u201cpult\u201d are distributed loads [force per length of pile] in common design equations, but are both loads for this uniaxialMaterial [i.e., distributed load times the tributary length of the pile]. Y50 Displacement at which 50% of pult is mobilized in monotonic loading. Cd Variable that sets the drag resistance within a fully-mobilized gap as Cd*pult. c The viscous damping term (dashpot) on the far-field (elastic) component of the displacement rate (velocity). (optional Default = 0.0). Nonzero c values are used to represent radiation damping effects pRes sets the minimum (or residual) peak resistance that the material retains as the adjacent solid soil elements liquefy ele1 ele2 are the eleTag (element numbers) for the two solid elements from which PyLiq1 will obtain mean effective stresses and excess pore pressures seriesTag Alternatively, mean effective stress can be supplied by a time series by specifying the text string -timeSeries and the tag of the seriesm $seriesTag. NOTES: To model the effects of liquefaction with PyLiq1 , it is necessary to use the material stage updating command: updateMaterialStage -material matNum -stage sNum where the argument matNum is the material number (for PyLiq1) and the argument sNum is the desired stage (valid values are 0 & 1 ). With sNum = 0 , the PyLiq1 behavior will be independent of any pore pressure in the specified solidElem\u2019s. When updateMaterialStage first sets sNum=1 , PyLiq1 will obtain the average mean effective stress in the two solidElem\u2019s and treat it as the initial consolidation stress prior to undrained loading. Thereafter, the behavior of PyLiq1 will depend on the mean effective stresses (and hence excess pore pressures) in the solidElem\u2019s. The default value of sNum is 0 (i.e., sNum = 0 if updateMaterialStage is not called). Note that the updateMaterialStage command is used with some soil material models, and that sNum = 0 generally corresponds to the application of gravity loads (e.g., elastic behavior with no excess pore pressure development) and sNum = 1 generally corresponds to undrained loading (e.g., plastic behavior with excess pore pressure development). The analysis for gravity loading cannot use the \u201calgorithm Linear\u201d command because the relevant soil materials do not currently work properly with this command. Instead, the \u201calgorithm Newton\u201d or some other option must be used. EQUATIONS and EXAMPLE RESPONSES: The PyLiq1 material inherits the PySimple1 material, and behaves identically to the PySimple1 material if there is no excess pore water pressure (i.e., sNum = 0). The constitutive equations for the PySimple1 material are given in separate documentation and not repeated here. The PyLiq1 material modifies the \\(p-y\\) behavior in response to the average mean effective stress (p\u2032), as affected by the excess pore water pressures, in two specified solid soil elements. The PyLiq1 material is used within a zeroLength element, and that zeroLength element generally shares a node with some solid soil elements (e.g., most commonly 1, 2, or 4 solid elements in a 2D mesh). Specifying two solid soil elements allows the PyLiq1 material to depend on pore pressures above and below its nodal position (essentially covering its full tributary length). The mean effective stress is affected by changes in mean total stress and excess pore pressure. For modeling purposes, an excess pore water pressure ratio is calculated as \\(ru = 1-\\frac{p^\\prime}{p_c^\\prime}\\) , where \\(p_c^\\prime\\) is the mean effective consolidation stress prior to undrained loading. The average value of ru is obtained from the specified solid soil elements and used within PyLiq1. The constitutive response of PyLiq1 is then taken as the constitutive response of PySimple1 scaled in proportion to the mean effective stress within the specified solid soil elements. This means that the ultimate capacity (pult) and tangent modulus are scaled by a factor of \\((1-r_u)\\) . Two additional constraints are then placed on the constitutive response. The first is that the scaled ultimate capacity cannot fall below the specified residual capacity of the material (i.e., pRes). The second constraint applies to the situation where the mean effective stress in the adjacent solid soil elements is incrementally increasing [e.g., the pore pressures decrease as the soils are incrementally dilatant (phase transformation)]. In this \u201chardening\u201d situation, the loading path from the \\(p-y\\) relation at time \\(i\\) to time \\(i+1\\) is bounded by the material\u2019 elastic stiffness (i.e., the unload/reloading stiffness); e.g., the incremental loading path cannot be steeper than the elastic stiffness. Note that the above approach only provides a first-order approximation for the softening effects of liquefaction on \\(p-y\\) behavior. Two simple examples of PyLiq1 behavior are presented in the following figures. In these examples, there is a single FourNodeQuad element containing a FluidSolidPorousMaterial with a PressureDependMultiYield soil material. This solid element is connected to an elastic pile via a single \u201cp-y\u201d element (i.e., a zeroLength element containing a PyLiq1 material). The solid element is an order of magnitude stiffer than the \\(p-y\\) element, and is subjected to transient cyclic simple shear loading. In the first example (first Figure), the adjacent soil element is subjected to uniform cyclic loading that produces triggering of liquefaction (ru = 100%) in about 7 cycles. The cyclic shear stress ratio (CSR), excess pore water pressure ratio (ru), and shear strain (\u03b3) versus cycle number for the solid soil element are plotted on the left side of the Figure. The soil element experiences uniform cyclic deformations; e.g., lateral spreading does not develop because the horizontal cyclic loading has no static bias in either direction. The pile is set as relatively rigid. Two different cases are then presented for the \\(p-y\\) element response. In the first case, sNum = 0 such that the \\(p-y\\) element is independent of changes in mean effective stress (or excess pore pressure) in the soil element. The resulting behavior is shown in the upper right-hand plot of the Figure. In the second case, sNum was set to 1 prior to cyclic loading, and thus the resulting behavior is dependent on the excess pore pressure in the soil element (lower right-hand plot of the Figure). The \\(p-y\\) element exhibits the overall softening that is expected when the adjacent soil element liquefies, and also shows temporary stiffening (hardening) when the adjacent soil goes through phase transformation (with its associated drop in excess pore pressure). In these plots, the \u201cp\u201d is normalized by the \\(p_{ult}\\) for drained monotonic loading. In the second example (second Figure), the adjacent soil element is subjected to a static shear load plus uniform cyclic loading such that triggering of liquefaction is accompanied by progressive lateral deformation in the direction of the static load bias (i.e., lateral spreading). Again, the left side of the Figure shows the CSR, ru and \u03b3 versus cycle number for the solid soil element. sNum was set to 1 prior to cyclic loading such that the \\(p-y\\) behavior is dependent on the excess pore pressure in the soil element. The residual capacity ( \\(p_{res}\\) ) of the \\(p-y\\) material is 10% of the drained ultimate capacity. Two different cases are then presented. In the first case, the pile is set as relatively rigid. The resulting behavior is shown in the upper right-hand plot of the Figure. The peak \u201cp\u201d occurs just as triggering of liquefaction occurs in the soil element, and is about 0.49 times the drained monotonic capacity pult. Subsequent peaks in \u201cp\u201d drop a bit to about 0.46 times pult. In the second case, the pile has a finite elastic stiffness such that it\u2019s peak elastic deflection in this example is equal in magnitude to about 10 times the \\(y_{50}\\) value for the \\(p-y\\) element. The resulting behavior is shown in the lower right-hand plot of the Figure. Again, the peak \u201cp\u201d occurs just as triggering of liquefaction occurs in the soil element, being about 0.18pult in this case. Subsequent peaks in \u201cp\u201d drop by about 20% to about 0.14pult. The inclusion of pile flexibility reduced, by a factor of about 3, the peak values of \u201cp\u201d that developed in the \\(p-y\\) element as the soil progressively spread past the pile. During each cycle of loading, the soil element cyclically ratchets in the direction of the static load bias and alternates between being extremely soft (ru = 100%) and then stiffening when it goes through phase transformation (ru drops). As the soil stiffens, the \\(p-y\\) element gains strength, transferring load onto the pile and causing the pile to elastically deform in the direction of loading. Then when the soil is unloaded and ru becomes 100% again, the \\(p-y\\) element loses strength, unloading the pile and allowing the pile to elastically return closer to its undeformed position. In each cycle of loading and progressive spreading of the soil, the magnitude of \u201cp\u201d that develops against the pile depends on the pile\u2019s flexibility relative to the displacement range over which the soil goes through phase transformation. PyLiq1NoSpreading.png PyLiq1WithSpreading.png Examples model basic -ndm 2 -ndf 2 node 1 0.0 0.0 node 2 0.0 0.0 fix 2 1 1 fix 1 0 1 timeSeries Path 1 -fileTime time .txt -filePath meanStress.txt -factor -1 .0 uniaxialMaterial PyLiq1 1 2 1.0 0.0001 10.0 0.0 0.10 -timeSeries 1 element zeroLength 1 1 2 -mat 1 -dir 1 uniaxialMaterial TzLiq1 2 1 1.0 0.0001 0.0 -timeSeries 1 element zeroLength 2 1 2 -mat 2 -dir 1 updateMaterialStage -material 1 -stage 1 updateMaterialStage -material 2 -stage 1 recorder Element -file PY1.txt -time -ele 1 force recorder Element -file TZ1.txt -time -ele 2 force recorder Node -file NodalDisps1.txt -time -node 1 -dof 1 2 disp pattern Plain 1 \"Sine 0.0 10.0 1.0 -factor 1.0\" { sp 1 1 0.001 } system ProfileSPD test NormDispIncr 1.0E-8 25 0 constraints Penalty 1 .e18 1 .e18 algorithm Newton numberer RCM integrator Newmark 0.6 0.30 analysis VariableTransient analyze 1000 0.01 0.0001 0.01 15 References \u201cSeismic Soil-pile-strcture interaction experiments and analysis\u201d, Boulanger, R.w., Curras, C.J., Kutter, B.L., Wilson, D.W., and Abghari, A. (1990). Journal of Geotechnical and Geoenvironmental Engineering, ASCS, 125(9):750-759. Code Developed by: Ross Boulanger, UC Davis This command is used to construct a PySimple1 uniaxial material object:","title":"PyLiq1"},{"location":"library/modeling/uniaxial/geotechnical/557-PySimple1/","text":"PySimple1 This command is used to construct a PySimple1 uniaxial material object: Model.uniaxial(\u201c PySimple1 \u201d, name, soilType, pult, y50, Cd) soilType int 1 Backbone of \\(p-y\\) curve approximates Matlock (1970) soft clay relation. 2 Backbone of \\(p-y\\) curve approximates API (1993) sand relation. pult float Ultimate capacity of the p-y material. Note that \\(p\\) or \\(p_{ult}\\) are distributed loads [force per length of pile] in common design equations, but are both loads for this uniaxialMaterial [i.e., distributed load times the tributary length of the pile]. y50 float Displacement at which 50% of pult is mobilized in monotonic loading. Cd float Variable that sets the drag resistance within a fully-mobilized gap as \\(C_d p_{ult}\\) . c float The viscous damping term (dashpot) on the far-field (elastic) component of the displacement rate (velocity). (optional Default = 0.0). Nonzero c values are used to represent radiation damping effects NOTES: In general the HHT algorithm is preferred over a Newmark algorithm when using this material. This is due to the numerical oscillations that can develop with viscous damping forces under transient loading with certain solution algorithms and damping ratios. Equations The equations describing PySimple1 behavior are described in reference [1]. Only minor changes have been made in its implementation for OpenSees. The nonlinear \\(p-y\\) behavior is conceptualized as consisting of elastic ( \\(p-y^e\\) ), plastic ( \\(p-y^p\\) ), and gap \\((p-y^g)\\) components in series. Radiation damping is modeled by a dashpot on the \u201cfar-field\u201d elastic component \\((p-y^e)\\) of the displacement rate. The gap component consists of a nonlinear closure spring ( \\(p^c-y^g\\) ) in parallel with a nonlinear drag spring \\((p^d-y^g)\\) . Note that \\(y = y^e + y^p + y^g\\) , and that \\(p = p^d + p^c\\) . Plastic Component The plastic component has an initial range of rigid behavior between \\[-C_r p_\\text{ult} < p < C_r p_\\text{ult}\\] with \\(C_r\\) = the ratio of \\(p/p_\\text{ult}\\) when plastic yielding first occurs in virgin loading. The rigid range of \\(p\\) , which is initially \\(2 C_r p_\\text{ult}\\) , translates with plastic yielding (kinematic hardening). The rigid range of \\(p\\) can be constrained to maintain a minimum size on both the positive and negative loading sides (e.g., 25% of \\(p_\\text{ult}\\) ), and this is accomplished by allowing the rigid range to expand or contract as necessary. Beyond the rigid range, loading of the plastic \\((p-y^p)\\) component is described by: \\[p = p_{\\text{ult}} - (p_{\\text{ult}} - p_o) \\left [\\frac{c y_{50}}{c y_{50} + | z_p - z^p_0|} \\right ]^n\\] where \\(p_\\text{ult}\\) is the ultimate resistance of the \\(p-y\\) material in the current loading direction, \\(p_o = p\\) at the start of the current plastic loading cycle, \\(y^p_o = y_p\\) at the start of the current plastic loading cycle, \\(c\\) = constant to control the tangent modulus at the start of plastic yielding, and n = an exponent to control sharpness of the \\(p-y^p\\) curve. Gap-Closure The closure \\((p^c-y^g)\\) spring is described by: \\[p^c = 1.8 p_{\\text{ult}} \\left [\\frac{y_{50}}{y_{50} + 50(y_o^\\text{+} - y^g)} - \\frac{y_{50}}{y_{50} + 50(y_o^\\text{-} - y^g)} \\right ]\\] where \\(y_o^+\\) = memory term for the positive side of the gap, \\(y_o^-\\) = memory term for the negative side of the gap. The initial values of \\(y_o^+\\) and \\(y_o^-\\) were set as \\(y_{50}/100\\) and \\(-y_{50}/100\\) , respectively. The factor of \\(1.8\\) brings \\(p^c\\) up to \\(p_\\text{ult}\\) during virgin loading to \\(y_o^+\\) (or \\(y_o^-\\) ). Gap enlargement follows logic similar to that of Matlock et al. (1978). The gap grows on the positive side when the plastic deformation occurs on the negative loading side. Consequently, the \\(y_o^+\\) value equals the opposite value of the largest past negative value of, \\(y^p + y^g + 1.5 y_{50}\\) where the \\(1.5y_{50}\\) represents some rebounding of the gap. Similarly, the \\(y_o^-\\) value equals the opposite value of the largest past positive value of \\(y^p+y^g-1.5y_{50}\\) . This closure spring allows for a smooth transition in the load displacement behavior as the gap opens or closes. Drag component The nonlinear drag \\((p^d-y^g)\\) spring is described by: \\[p^d = C_d p_{\\text{ult}} - (C_d p_{\\text{ult}} - p^d_o) \\left [\\frac{y_{50}}{y_{50} + 2| y^g - y^g_o|} \\right ]^n \\] where \\(C_d =\\) ratio of the maximum drag force to the ultimate resistance of the \\(p\\) - \\(y\\) material, \\(d^p_o =p^d\\) at the start of the current loading cycle, and \\(y^g_o = y^g\\) at the start of the current loading cycle. The flexibility of the above equations can be used to approximate different \\(p\\) - \\(y\\) backbone relations. Matlock\u2019s (1970) recommended backbone for soft clay is closely approximated using \\(c = 10\\) , \\(n = 5\\) , and \\(C_r = 0.35\\) . API\u2019s (1993) recommended backbone for drained sand is closely approximated using \\(c = 0.5\\) , \\(n = 2\\) , and \\(C_r = 0.2\\) . PySimple1 is currently implemented to allow use of these two default sets of values. Values of \\(p_\\text{ult}\\) , \\(y_{50}\\) , and \\(C_d\\) must then be specified to define the \\(p-y\\) material behavior. Damping Viscous damping on the far-field (elastic) component of the \\(p\\) - \\(y\\) material is included for approximating radiation damping. For implementation in OpenSees the viscous damper is placed across the entire material, but the viscous force is calculated as proportional to the component of velocity (or displacement) that developed in the far-field elastic component of the material. For example, this correctly causes the damper force to become zero during load increments across a fully formed gap. In addition, the total force across the \\(p\\) - \\(y\\) material is restricted to \\(p_{ult}\\) in magnitude so that the viscous damper cannot cause the total force to exceed the near-field soil capacity. Users should also be familiar with numerical oscillations that can develop in viscous damper forces under transient loading with certain solution algorithms and damping ratios. In general, an HHT algorithm is preferred over a Newmark algorithm for reducing such oscillations in materials like PySimple1 . Examples PySimple1A.gif PySimple1B.gif References \u201cSeismic Soil-pile-strcture interaction experiments and analysis\u201d, Boulanger, R.w., Curras, C.J., Kutter, B.L., Wilson, D.W., and Abghari, A. (1999). Jornal of Geotechnical and Geoenvironmental Engineering, ASCS, 125(9):750-759. https://doi.org/10.1061/(ASCE)1090-0241(1999)125:9(750) Code developed by: Ross Boulanger, UC Davis","title":"PySimple1"},{"location":"library/modeling/uniaxial/geotechnical/565-QzSimple1/","text":"QzSimple1 This command is used to construct a QzSimple1 uniaxial material. Model.uniaxial(\u201c QzSimple1 \u201d, name, qzType, qult, Z50) qzType str 1 Backbone of \\(q-z\\) curve approximates Reese and O\u2019Neill\u2019s (1987) relation for drilled shafts in clay. 2 Backbone of \\(q-z\\) curve approximates Vijayvergiya\u2019s (1977) relation for piles in sand. qult float Ultimate capacity of the \\(q-z\\) material. SEE NOTE 1. Z50 float Displacement at which 50% of qult is mobilized in monotonic loading. SEE NOTE 2. suction float Uplift resistance is equal to suction qult. Default = 0.0. The value of suction must be 0.0 to 0.1. c float The viscous damping term (dashpot) on the far-field (elastic) component of the displacement rate (velocity). Default = 0.0. Nonzero c values are used to represent radiation damping effects.* NOTES: qult : Ultimate capacity of the \\(q\\) - \\(z\\) material. Note that \u201cq\u201d or \u201cqult\u201d are stresses [force per unit area of pile tip] in common design equations, but are both loads for this uniaxialMaterial [i.e., stress times tip area]. Y50 : Displacement at which 50% of pult is mobilized in monotonic loading. Note that Vijayvergiya\u2019s relation ( qzType=2 ) refers to a \u201ccritical\u201d displacement ( zcrit ) at which qult is fully mobilized, and that the corresponding z50 would be 0. 125zcrit. optional args $suction and $c must either both be omitted or both provided. EQUATIONS and EXAMPLE RESPONSES: The equations describing QzSimple1 behavior are similar to those for \\(p\\) - \\(y\\) materials by Boulanger, R. W., Curras, C. J., Kutter, B. L., Wilson, D. W., and Abghari, A. (1999). \u201cSeismic soil-pile-structure interaction experiments and analyses.\u201d Journal of Geotechnical and Geoenvironmental Engineering, ASCE, 125(9): 750-759. Modifications were required for representing the different responses of a \\(q-z\\) material in compression versus uplift. The nonlinear \\(q\\) - \\(z\\) behavior is conceptualized as consisting of elastic ( \\(q\\) - \\(z^e\\) ), plastic \\(z^e\\) ) \\(z^e\\) ) ( \\(q\\) - \\(z^p\\) ), and gap ( \\(q-z^g\\) ) components in series. Radiation damping is modeled by a dashpot on the \u201cfar-field\u201d elastic component ( \\(q-z^e\\) ) of the displacement rate. The gap component consists of a bilinear closure spring ( \\(q^c-z^g\\) ) in parallel with a nonlinear drag \\(q^c-z^g\\) ) spring ( \\(q^d-z^g\\) ). Note that \\(z = z^e + z^p + z^g\\) , and that \\(q = q^d + q^c\\) . The plastic component has an initial range of rigid behavior between \\[-C_r q_\\text{ult} < q < C_r q_\\text{ult}\\] with \\(C_r\\) = the ratio of \\(\\frac{q}{q_{\\text{ult}}}\\) when plastic yielding first occurs in virgin loading. The rigid range of \\(q\\) , which is initially \\(2 C_r q_\\text{ult}\\) , translates and grows with plastic yielding. The rigid range of \\(q\\) is constrained to a maximum size of \\(0.7q_{\\text{ult}}\\) . Beyond the rigid range, loading of the plastic ( \\(q-z^p\\) ) component is described by: \\[q = q_{\\text{ult}} - (q_{\\text{ult}} - q_0) \\left [\\frac{c * z_{50}}{c * z_{50} + | z_p - z^p_0|} \\right ]\\] where \\(q_\\textrm{ult}\\) = the ultimate resistance of the \\(q-z\\) material in the current loading direction, \\(q_o = q\\) at the start of the current plastic loading cycle, p \\(z^p_o = z^p\\) at the start of the current plastic loading cycle, and c and n are constants that control the shape of \\(q-z^p\\) curve. The closure ( \\(q^c-z^g\\) ) component is simply a bilinear elastic spring, which is relatively rigid in compression and extremely flexible in tension (uplift). The nonlinear drag ( \\(q^d-z^g\\) ) component is used to allow thethe specification of some minimum \u201csuction\u201d on the pile tip during uplift. It is described by: \\[q^d = C_d q_\\text{ult} - (C_d q_{\\text{ult}} - q^d_0) \\left [\\frac{z_{50}}{z_{50} + 2| z^g - z^g_0|} \\right ] \\] where \\(C_d\\) = ratio of the maximum drag (suction) force to the ultimate resistance of the \\(q-z\\) material, \\(q^d_o = q^d\\) at the start of the current loading cycle, and \\(z^g_o = z^g\\) at the start of the current loading cycle. The flexibility of the above equations can be used to approximate different q-z backbone relations. Reese and O\u2019Neill\u2019s (1987) recommended backbone for drilled shafts in clay is closely approximated using \\(c = 0.35\\) , \\(n = 1.2\\) , and \\(C_r = 0.2\\) . Vijayvergiya\u2019s (1977) recommended backbone for piles in sand is closely approximated using \\(c = 12.3\\) , \\(n = 5.5\\) , and \\(C_r = 0.3\\) . QzSimple1 is currently implemented to allow use of these two default sets of values. Values of \\(q_\\text{ult}\\) , \\(z_50\\) , and suction (i.e., \\(C_d\\) ) must then be specified to define the \\(q-z\\) material behavior. Viscous damping on the far-field (elastic) component of the \\(q-z\\) material is included for approximating radiation damping. For implementation in OpenSees the viscous damper is placed across the entire material, but the viscous force is calculated as proportional to the component of velocity (or displacement) that developed in the far-field elastic component of the material. For example, this correctly causes the damper force to become zero during load increments across a fully formed gap in uplift. In addition, the total force across the \\(q-z\\) material is restricted to \\(q_\\text{ult}\\) in magnitude so that the viscous damper cannot cause the total force to exceed the near-field soil capacity. Users should also be familiar with numerical oscillations that can develop in viscous damper forces under transient loading with certain solution algorithms and damping ratios. In general, an HHT algorithm is preferred over a Newmark algorithm for reducing such oscillations in materials like QzSimple1. Examples of the monotonic backbones and cyclic loading response of QzSimple1 are given in the following plots. QzSimple1A.gif QzSimple1B.gif Examples References \u201cSeismic Soil-pile-strcture interaction experiments and analysis\u201d, Boulanger, R.W., Curras, C.J., Kutter, B.L., Wilson, D.W., and Abghari, A. (1990). Jornal of Geotechnical and Geoenvironmental Engineering, ASCS, 125(9):750-759. Code Developed by: Ross Boulanger, UC Davis","title":"QzSimple1"},{"location":"library/modeling/uniaxial/geotechnical/722-TzLiq1/","text":"TzLiq1 The command constructs a uniaxial t-z material that incorporates liquefaction effects. This t z material is used with a zeroLength element to connect a pile (beam-column element) to a 2 D plane-strain FE mesh. The t-z material obtains the average mean effective stress (which decreases with increasing excess pore pressure) from two specified soil elements. Currently, the implementation requires that the specified soil elements consist of FluidSolidPorousMaterials in FourNodeQuad elements. uniaxialMaterial TzLiq1 $matTag $tzType $tult $z50 $c $ele1 $ele2 OR uniaxialMaterial TzLiq1 $matTag $tzType $tult $z50 $c -timeSeries $seriesTag matTag integer tag identifying material soilType soilType = 1 Backbone of t-z curve approximates Reese and O\u2019Neill (1987). soilType = 2 Backbone of t-z curve approximates Mosher (1984) relation. tult Ultimate capacity of the t-z material. SEE NOTE 1. Z50 Displacement at which 50% of tult is mobilized in monotonic loading. c The viscous damping term (dashpot) on the far-field (elastic) component of the displacement rate (velocity). ele1 ele2 are the eleTag (element numbers) for the two solid elements from which PyLiq1 will obtain mean effective stresses and excess pore pressures seriesTag Alternatively, mean effective stress can be supplied by a time series by specifying the text string -timeSeries and the tag of the seriesm $seriesTag. NOTES: The argument tult is the ultimate capacity of the t-z material. Note that \u201ct\u201d or \u201ctult\u201d are shear stresses [force per unit area of pile surface] in common design equations, but are both loads for this uniaxialMaterial [i.e., shear stress times the tributary area of the pile]. Nonzero c values are used to represent radiation damping effects. To model the effects of liquefaction with TzLiq1, it is necessary to use the material stage updating command: updateMaterialStage -material matNum -stage sNum where the argument matNum is the material number (for TzLiq1) and the argument sNum is the desired stage (valid values are 0 & 1). With sNum=0, the TzLiq1 behavior will be independent of any pore pressure in the specified solidElem\u2019s. When updateMaterialStage first sets sNum=1, TzLiq1 will obtain the average mean effective stress in the two solidElem\u2019s and treat it as the initial consolidation stress prior to undrained loading. Thereafter, the behavior of TzLiq1 will depend on the mean effective stress (and hence excess pore pressures) in the solidElem\u2019s. The default value of sNum is 0 (i.e., sNum=0 if updateMaterialStage is not called). Note that the updateMaterialStage command is used with some soil material models, and that sNum=0 generally corresponds to the application of gravity loads (e.g., elastic behavior with no excess pore pressure development) and sNum=1 generally corresponds to undrained loading (e.g., plastic behavior with excess pore pressures development). The analysis for gravity loading cannot use the Linear solution algorithm because the relevant soil materials do not currently work properly with this command. Instead, the \u201calgorithm Newton\u201d or some other option must be used. TzLiq1 inherits TzSimple1 and modifies its response based on the mean effective stresses (and hence excess pore pressures) in the specified solid soil elements. The logic and implementation are the same as for how PyLiq1 inherits and modifies PySimple1 . Therefore, the reader is referred to the documentation of PyLiq1 for details. References \u201cSeismic Soil-pile-strcture interaction experiments and analysis\u201d, Boulanger, R.W., Curras, C.J., Kutter, B.L., Wilson, D.W., and Abghari, A. (1990). Jornal of Geotechnical and Geoenvironmental Engineering, ASCS, 125(9):750-759. Code Developed by: Ross Boulanger, UC Davis","title":"TzLiq1"},{"location":"library/modeling/uniaxial/geotechnical/723-TzSimple1/","text":"TzSimple1 This command is used to construct a TzSimple1 uniaxial material object: uniaxialMaterial TzSimple1 $matTag $tzType $tult $z50 < $c > matTag integer tag identifying material soilType soilType = 1 Backbone of t-z curve approximates Reese and O\u2019Neill (1987). soilType = 2 Backbone of t-z curve approximates Mosher (1984) relation. tult Ultimate capacity of the t-z material. SEE NOTE 1. Z50 Displacement at which 50% of tult is mobilized in monotonic loading. c The viscous damping term (dashpot) on the far-field (elastic) component of the displacement rate (velocity). (optional Default = 0.0). See NOTE 2. NOTES: The argument tult is the ultimate capacity of the t-z material. Note that \\(t\\) or \\(t_\\text{ult}\\) are shear stresses (force per unit area of pile surface) in common design equations, but are both loads for this UniaxialMaterial (i.e., shear stress times the tributary area of the pile). Nonzero \\(c\\) values are used to represent radiation damping effects EQUATIONS and EXAMPLE RESPONSES The equations describing PySimple1 behavior are described in Boulanger, R. W., Curras, C. J., Kutter, B. L., Wilson, D. W., and Abghari, A. (1999). \u201cSeismic soil-pile-structure interaction experiments and analyses.\u201d Journal of Geotechnical and Geoenvironmental Engineering, ASCE, 125(9): 750-759. Only minor changes have been made in its implementation for OpenSees. The nonlinear t-z behavior is conceptualized as consisting of elastic ( \\(t-z^e\\) ) and plastic ( \\(t-z^p\\) ) components in series. Radiation damping is modeled by a dashpot on the \u201cfar-field\u201d elastic component ( \\(t-z^e\\) ) of the displacement rate. Note that \\(z = z^e + z^p\\) , and that \\(t = t^e = t^p\\) . The plastic component is described by: \\[t^p = t_{\\text{ult}} - (t_{\\text{ult}} - t^p_0) \\left [\\frac{c z_{50}}{c z_{50} + | z_p - z^p_0|} \\right ] \\] where $t_{ult} = $ the ultimate resistance of the t-z material in the current loading direction, \\(t^p_o = t^p\\) at the start of the current plastic loading cycle, \\(z^p_0 = z^P\\) at the start of the current plastic loading cycle, and c = a constant and n = an exponent that define the shape of the \\(t-z^p\\) curve. The elastic component can be conveniently expressed as: \\[t^e = C_e \\frac{t_{\\text{ult}}}{z_{50}} z^e\\] where \\(C_e\\) = a constant that defines the normalized elastic stiffness. The value of \\(C_e\\) is not an independent parameter, but rather depends on the constants c & n (along with the fact that \\(t = 0.5 t_{\\text{ult}}\\) at \\(z = z_{50}\\) ). The flexibility of the above equations can be used to approximate different t-z backbone relations. Reese and O\u2019Neill\u2019s (1987) recommended backbone for drilled shafts is closely approximated using c = 0.5, n = 1.5, and Ce = 0.708. Mosher\u2019s (1984) recommended backbone for axially loaded piles in sand is closely approximated using c = 0.6, n = 0.85, and Ce = 2.05. TzSimple1 is currently implemented to allow use of these two default sets of values. Values of tult and z50 must then be specified to define the t-z material behavior. Viscous damping on the far-field (elastic) component of the t-z material is included for approximating radiation damping. For implementation in OpenSees the viscous damper is placed across the entire material, but the viscous force is calculated as proportional to the component of velocity (displacement rate) that developed in the far-field elastic component of the material. In addition, the total force across the t-z material is restricted to tult in magnitude so that the viscous damper cannot cause the total force to exceed the near-field soil capacity. Users should also be familiar with numerical oscillations that can develop in viscous damper forces under transient loading with certain solution algorithms and damping ratios. In general, an HHT algorithm is preferred over a Newmark algorithm for reducing such oscillations in materials like TzSimple1. Examples of the cyclic loading response of TzSimple1 are given in the following plots. Note that the response for tzType = 2 has greater nonlinearity at smaller displacements (and hence greater hysteretic damping) and that it approaches tult more gradually (such that t/tult is still well below TzSimple1.gif Examples References \u201cSeismic Soil-pile-strcture interaction experiments and analysis\u201d, Boulanger, R.W., Curras, C.J., Kutter, B.L., Wilson, D.W., and Abghari, A. (1990). Jornal of Geotechnical and Geoenvironmental Engineering, ASCS, 125(9):750-759. Code Developed by: Ross Boulanger, UC Davis","title":"TzSimple1"},{"location":"library/modeling/uniaxial/metallic/158-DoddRestrepo/","text":"DoddRestrepo This command is used to construct a Dodd-Restrepo steel material Model.uniaxial(\u201c Dodd_Restrepo \u201d, name, fy, fu, esh, esu, E, eshi, fshi) fy float Yield stress. fu float Ultimate tensile strength (UTS) esh float Tensile strain at initiation of strain hardening esu float Tensile strain at the UTS E float Young\u2019s modulus of elasticity eshi float Tensile strain for a point on strain hardening curve, recommended range of values for eshI: \\(\\left[ \\frac{\\texttt{esu} 5 \\texttt{esh}}{6}, \\frac{\\texttt{esu} 3 \\texttt{esh}}{4}\\right]\\) fshi float Tensile stress at point on strain hardening curve corresponding to eshI OmegaFac = 1.0 float Roundedness factor for Bauschinger curve in cycle reversals from the strain hardening curve. Range: \\(\\left[0.75, 1.15\\right]\\) . Largest value tends to near a bilinear Bauschinger curve. Default = 1.0. Note: Stresses and strains are defined in engineering terms, as they are reported in a tensile test. Examples: References Dodd, L. L. and Restrepo-Posada, J. I. (1995). Model for Predicting Cyclic Behaviour of Reinforcing Steel. ASCE Journal of Structural Engineering, V.121, No 3, pp. 433-445. Code developed by: L.L. Dodd & J.I. Restrepo","title":"DoddRestrepo"},{"location":"library/modeling/uniaxial/metallic/569-RambergOsgoodSteel/","text":"RambergOsgoodSteel This command is used to construct a Ramberg-Osgood steel material object. Model.uniaxial(\u201c RambergOsgoodSteel \u201d, name, E, fy, a, n) E float Young\u2019s modulus of elasticity fy float Yield stress. a float yield offset parameter n float Parameter to control the transition from elastic to plastic branches. Additionally controls the hardening of the material: by increasing \\(n\\) , hardening ratio will be decreased. Introduction to the Ramberg-Osgood Material Model: In earthquake engineering, Ramberg-Osgood functions are often used to model the behavior of structural steel materials and components. These functions are obtained when the power is normalized to an arbitrary strain, \\(\\varepsilon_0\\) , for which the plastic component of the strain, \\(\\varepsilon_\\text{plastic}\\) , is not zero. Generally the yield strain, \\(\\varepsilon_y\\) , provides a good choice for normalization of strain. The Ramberg-Osgood function is expressed as [1]: \\[ \\varepsilon=\\frac{\\sigma}{E_{0}}+a \\left(\\frac{\\sigma}{\\sigma_{0}}\\right)^{n} \\] Where E0 is the initial elastic modulus and \u03c30 is equal to E\u03b50. More explanation about parameter \u201ca\u201d (yielding offset) The value \u201ca\u201d which is equal to \\(\\alpha\\frac{\\sigma}{E_0}\\) can be seen as a yield offset, as shown in Fig.1. This comes from the fact that \\[ \\epsilon=\\dfrac{(1+\\alpha) \\sigma_{0}}{E} \\] when \u03c3=\u03c30. Accordingly (see Fig.1): RambergOsgoodSteel03.png Values for \u03b1 can also be found by means of fitting to experimental data, although for some materials, it can be fixed in order to have the yield offset equal to the accepted value of strain of 0.2%, which means [2]: \\(\\alpha \\frac{\\sigma}{E_{0}}=0.002\\) . Fig. 1: Generic representation of the Stress-Strain curve by means of the Ramberg-Osgood equation. Strain corresponding to the yield point is the sum of the elastic and plastic components. Fig. 2: RambergOsgoodSteel Material \u2013 Hysteretic Behavior of Model References Michel Bruneau, Chia-Ming Uang Andrew Whittaker. \u201cDuctile Design of Steel Structures\u201d McGraw-Hill Professional, 1997, ISBN: 0070085803 - 978-0070085800 Ramberg, W., & Osgood, W. R. (1943). \u201cDescription of stress-strain curves by three parameters.\u201d Technical Note No. 902, National Advisory Committee For Aeronautics, Washington DC. Contact Authors: Reza Rahimi, Graduate Research Assistant of Structural Engineering, Dalhousie University, reza.rahimi@dal.ca Reza Sepasdar, Graduate Research Assistant of Structural Engineering, Dalhousie University, reza.sepasdar@dal.ca Mohammad Reza Banan, Associate Professor of Civil Engineering, Department of Civil and Environmental Engineering, Shiraz University, Shiraz, Iran, banan@shirazu.ac.ir","title":"RambergOsgoodSteel"},{"location":"library/modeling/uniaxial/metallic/587-Reinforcing%20Steel/","text":"ReinforcingSteel This command is used to construct a ReinforcingSteel uniaxial material object. This object is intended to be used in a reinforced concrete fiber section as the steel reinforcing material. Model.uniaxial(\u201c ReinforcingSteel \u201d, \u2003\u2003\u2003name, \u2003\u2003\u2003fy, \u2003\u2003\u2003fu, \u2003\u2003\u2003E, \u2003\u2003\u2003Esh, \u2003\u2003\u2003esh, \u2003\u2003\u2003eult, \u2003\u2003\u2003MPCurveParams) fy float Yield stress in tension (see Figure 1) fu float Ultimate stress in tension E float Initial elastic tangent Esh float Tangent at initial strain hardening esh float Strain corresponding to initial strain hardening eult float Strain at peak stress GABuck [lsr,beta,r,gamma] , Buckling Model Based on Gomes and Appleton (1997) lsr float Slenderness Ratio (see Figure 2) beta float Amplification factor for the buckled stress strain curve. (see Figure 3) r float Buckling reduction factor r can be a real number between [0.0 and 1.0] r=1.0 full reduction (no buckling) r=0.0 no reduction 0.0<r<1.0 linear interpolation between buckled and unbuckled curves gamma float Buckling constant (see Figures 3 and 4) DMBuck [lsr,alpha] , Buckling model based on Dhakal and Maekawa (2002) lsr float Slenderness Ratio (see Figure 2) alpha = 1.0 float Adjustment Constant usually between 0.75 and 1.0 CMFatigue [Cf,alpha,Cd] , Coffin-Manson Fatigue and Strength Reduction Cf float Coffin-Manson constant C (see Figure 5) alpha float Coffin-Manson constant a (see Figure 5) Cd float Cyclic strength reduction constant (see Figure 6 and Equation 3) IsoHard [a1,limit] , Isotropic Hardening / Diminishing Yield Plateau a1 = 4.3 float Hardening constant limit = 0.01 float Limit for the reduction of the yield plateau. % of original plateau length to remain (0.01 < limit < 1.0 ).If limit = 1.0, then no reduction takes place MPCurveParams [R1,R2,R3] , Menegotto and Pinto Curve Parameters see Fig 6b R1 = 0.333 float R2 = 18 float R3 = 4 float Tcl Command uniaxialMaterial ReinforcingSteel $matTag $fy $fu $Es $Esh $esh $eult < -GABuck $lsr $beta $r $gama > < -DMBuck $lsr < $alpha > > < -CMFatigue $Cf $alpha $Cd > < -IsoHard < $a1 < $limit > > > matTag Material tag. fy yield stress. fu Es Esh esh eult -GABuck lsr Slenderness Ratio (see Figure 2) beta Amplification factor for the buckled stress strain curve. (see Figure 3) r Buckling reduction factor \\(r\\) can be a real number between [0.0 and 1.0] r=1.0 full reduction (no buckling) r=0.0 no reduction 0.0<r<1.0 linear interpolation between buckled and unbuckled curves gamma Buckling constant (see Figures 3 and 4) -DMBuck Buckling model based on Dhakal and Maekawa (2002) lsr Slenderness Ratio (see Figure 2) alpha Adjustment Constant usually between 0.75 and 1.0 Default: alpha=1.0, this parameter is optional. -CMFatigue Coffin-Manson Fatigue and Strength Reduction Cf Coffin-Manson constant \\(C\\) (see Figure 5) alpha Coffin-Manson constant \\(\\alpha\\) (see Figure 5) C d Cyclic strength reduction constant (see Figure 6 and Equation 3) -IsoHard Isotropic Hardening / Diminishing Yield Plateau a1 Hardening constant (default = 4.3) limit Limit for the reduction of the yield plateau. % of original plateau length to remain (0.01 < limit < 1.0 ) Limit =1.0, then no reduction takes place (default =0.01) -MPCurveParams Menegotto and Pinto Curve Parameters see Fig 6b R1 (default = 0.333) R2 (default = 18) R3 (default = 4) NOTE: This simulation is based on the Chang and Mander(1994) uniaxial steel model. The simulation has incorporated additional reversal memory locations to better control stress overshooting (default is 10 branches but this can be easily modified by changing the variable \u201c LastRule_RS \u201d within the header file \u201c ReinforcingSteel.h \u201d). The cycle counting method implemented in the routine achieves the same result as rainflow counting. Fatigue parameters are based on the Coffin-Manson equation for plastic strain amplitude as indicated in Figure 6a. The buckling simulations incorporated consist of a variation on Gomes and Appleton (1997) and Dhakal and Maekawa (2002). The buckling and fatigue portions of this simulation are still being further enhanced and refined. Additional buckling and fatigue options should be available in the near future. Figure 1: Material Constants Backbone curve The backbone curve shown in Figure 1 is used as a bounding surface for the reinforcing bar simulation. This backbone curve is shifted as described by Chang and Mander (1994) to account for Isotropic hardening. This backbone can be obtained by utilizing simple tension test data. Within the material class, the backbone curve is transformed from engineering stress space to natural stress space (accounting for change in area as the bar is stressed.) This allows the single backbone to represent both tensile and compressive stress-strain relations. The tension and compression backbone curves are not the same in engineering stress space for this model! This transformation assumes small strain relations described by Dodd and Restrepo-Posada (1995) The softening region (strain greater than eult ), shown in Figure 1, is a localization effect due to necking and is a function of the gage length used during measurement. This geometric effect is ignored in this simulation. In this simulation, it is assumed that there is no softening in natural stress space. Because the simulation always converts back to engineering stress space, you will observe some softening in the tension response due to the reduction in area, however this will be much smaller than that shown in the original backbone curve proposed by Chang and Mander. Diminishing yield plateau It has been observed that when a reinforcing bar is subjected to plastic strain reversals within the yield plateau, strain hardening will initiate at a lower strain that that of the same bar loaded monotonically. Additionally, isotropic hardening can result from repeated strain reversals and is commonly related to accumulated plastic strain. These two aspects of the stress-strain behavior of steel bars are somewhat related and that by shortening the yield plateau as a function of accumulated plastic strain, the model will have some capability to simulate both the diminishing yield plateau and isotropic hardening. The Chang and Mander model, on which this formulation is based, models only anisotropic hardening by shifting the backbone curves and by targeting previous reversal points on the backbone curves. By adding a component of isotropic hardening, the model has additional capabilities and is able to more accurately simulate test data. Accumulated plastic strain is tracked within the material model for each branch, plateau adjustments are made only in the outer branches for simplicity. The plastic strain due to the backbone curve is ignored so that a monotonically loaded sample can be calibrated to a monotonic test sample more easily. Buckling Models Figure 2: Slenderness Defined Figure 3: Buckling Parameters Gomes and Appleton buckled curve Figure 3 describes the use of the buckling parameters modified from Gomes and Appleton (1997). \\(\\beta\\) is an amplification factor that allows the user to scale the buckling curve. This is useful to adjust the location of the bifurcation point. The \\(r\\) factor is used to adjust the curve between the buckled curve and the unbuckled curve. The variable \\(r\\) can only be a real number between \\(0.0\\) and \\(1.0\\) . The \\(\\gamma\\) factor is the positive stress location about which the buckling factor is initiated. This factor was introduced to avoid kinks in the reloading branch. The implementation of the \\(\\gamma\\) factor is shown in Figure 3. The basic idea is that the stress strain curves are reduced toward the positive stress \\(\\gamma f_{su}\\) . The value \\(\\gamma\\) should be between \\(0.0\\) and \\(1.0\\) . A \\(\\gamma\\) of \\(0.0\\) will factor to the zero stress axis. This will usually produce a kink in the reloading curve at the zero stress location. Good results have been obtained using the following values for the buckling constants. or Figure 4 displays the buckling behavior due to the variation of the different constants. The response shown on the upper left is the unbuckled case. In each of the other cases, buckling behavior is defined by the constants shown. Figure 4: Effect of Sample Parameters in the Gomes and Appleton Buckling Model Dhakal and Maekawa buckled curve The buckling model described in this section is based on Dhakal and Maekawa (2002). This model takes two terms, \\(\\ell_{sr}\\) and \\(a\\) . \\(\\ell_{sr}\\) is the slenderness ratio as described in Figure 2 and \\(a\\) is an amplification factor. Dhakal and Maekawa suggest a value of \\(a =1.0\\) for linear strain hardening and \\(a =0.75\\) for elastic perfectly plastic material behavior. The material model in this implementation is neither linear strain hardening nor elastic perfectly plastic. However, since the material model does include strain hardening \\(a=1.0\\) has been assumed as the default value. Figure 5 shows the unbuckled vs buckled stress strain response curves. Figure 5: Effect of Suggested Parameters in the Dhakal and Maekawa Buckling Model Cyclic Degradation \\(C_f\\) and \\(a\\) are factors used to relate the number of half cycles to fracture to the half cycle plastic strain amplitude (Figure 6a). Plastic strain half cycle amplitude is defined by Equation 1. The total half cycle strain amplitude,, is shown in Figure 6b as the change in strain from reversal A to reversal B. \\(C_f\\) and a are used to define a cumulative damage factor, \\(D\\) , as described in Equation 2. Figure 6a: Coffin-Manson Constants Figure 6b: Half Cycle Terms Defined (1) (2) The cumulative damage factor is zero at no damage and \\(1.0\\) at fracture. Once a bar has been determined to have fractured, the strength is rapidly degraded to zero. Figure 7: Strength Reduction A degrade constant, \\(K_1\\) , is used to describe loss in strength due to damage or other phenomenon resulting in softening due to plastic reversals. The degradation is currently assumed to have a simple linear relationship with \\(D\\) . This is used to correlate strength degradation to the cumulative damage factor. This linear relationship is shown in Equation 3. \\[ \\phi_{S R}=K_{1} D \\] (3) Alternately this simple linear equation can be rewritten in a way that makes the strength degradation independent of the number of half cycles to failure. Keeping the failure and degradation terms independent is convenient for calibration. Equation 3 is rewritten below utilizing the strength degradation constant \\(C_d\\) . \\[ \\phi_{S R}=\\sum\\left(\\frac{\\Delta \\varepsilon_{p}}{C_{d}}\\right)^{\\frac{1}{\\alpha}} \\quad\\quad\\text{(4)} \\] The constants \\(K_1\\) , and \\(C_d\\) can be related as shown in Equation 5. \\[ C_{d}=\\frac{C_{f}}{K_{1}^{\\alpha}} \\quad\\quad \\text{(5)} \\] Suggested starting values have been obtained from data reported by Brown and Kunnath (2000) for bars with a slenderness of \\(6\\) . Keep in mind that this experimental data is limited and additional calibration may be necessary to capture realistic behavior in a reinforcing bar embedded in concrete and influenced by other factors such as confinement. \\(a\\) \\(0.506\\) \\(C_f\\) \\(0.260\\) \\(C_d\\) \\(0.389\\) Sample Simulations of Degradation behavior \\(a\\) is best obtained from calibration of test results. \\(a\\) is used to relate damage from one strain range to an equivalent damage at another strain range. This is usually constant for a material type. \\(C_f\\) is the ductility constant used to adjust the number of cycles to failure. A higher value for \\(C_f\\) will result in a lower damage for each cycle. A higher value \\(C_f\\) translates to a larger number of cycles to failure. \\(C_d\\) is the strength reduction constant. A larger value for \\(C_d\\) will result in a lower reduction of strength for each cycle. The four charts shown in Figure 8 demonstrate the effect that some of the variables have on the cyclic response. Figure 8: Fatigue and Degradation Parameter Examples In Figure 8, the upper left response contains no strength degradation by setting the \\(C_d\\) variable to \\(0.0\\) . The upper right response shows strength degradation due to the suggested values of \\(C_f\\) , \\(a\\) , and \\(C_d\\) . The response shown on the lower left demonstrates the change in the response when the suggested values of \\(C_f\\) and \\(a\\) are used with \\(C_d=0.6\\) . Making the value of \\(C_d\\) larger results in less strength reduction due to damage. The response on the lower right once again returns to the suggested values but \\(C_f\\) is changed to \\(0.15\\) . This results in a more rapid accumulation of damage causing the bar to fail sooner. Note however that the strength degradation is unaffected by the more rapid accumulation of damage. The strength reduction and failure are not interdependent making the model easier to calibrate. References Chang, G. and Mander, J. (1994). \u201cSeismic Energy Based Fatigue Damage Analysis of Bridge Columns: Part I - Evaluation of Seismic Capacity.\u201d NCEER Technical Report 94-0006. Dodd, L. and Restrepo-Posada, J. (1995). \u201cModel for Predicting Cyclic Behavior of Reinforcing Steel\u201d J. Struct. Eng., 121(3), 433-445. Gomes, A., and Appleton, J. (1997). \u201cNonlinear Cyclic Stress-Strain Relationship of Reinforcing Bars Including Buckling.\u201d Eng. Struct., 19(10), 822-826. Brown, J. and Kunnath, S.K. (2000). \u201cLow Cycle Fatigue Behavior of Longitudinal Reinforcement in Reinforced Concrete Bridge Columns.\u201d NCEER Technical Report 00-0007. Dhakal, R. and Maekawa, K. (2002). \u201cModeling for Postyield Buckled of Reinforcement\u201d J. Struct. Eng., 128(9), 1139-1147. Code developed by: Jon Mohle M.S., P.E. Sashi Kunnath: http://cee.engr.ucdvis.edu/faculty/kunnath/kunnath.htm","title":"ReinforcingSteel"},{"location":"library/modeling/uniaxial/metallic/664-Steel01/","text":"Steel01 This command is used to construct a uniaxial bilinear steel material object with kinematic hardening and optional isotropic hardening described by a non-linear evolution equation (REF: Fedeas). uniaxialMaterial Steel01 $matTag $Fy $E0 $b < $a1 $a2 $a3 $a4 > matTag integer tag identifying material Fy yield strength E0 initial elastic tangent b strain-hardening ratio (ratio between post-yield tangent and initial elastic tangent) a1 isotropic hardening parameter, increase of compression yield envelope as proportion of yield strength after a plastic strain of \\(a2*(\\) Fy/E0). (optional) a2 isotropic hardening parameter (see explanation under $a1). (optional). a3 isotropic hardening parameter, increase of tension yield envelope as proportion of yield strength after a plastic strain of \\(a4*(\\) Fy/E0). (optional) a4 isotropic hardening parameter (see explanation under $a3). (optional) Steel01.gif Steel01 Material \u2013 Hysteretic Behavior of Model w/o Isotropic Hardening Steel01HystereticA.jpg Steel01 Material \u2013 Hysteretic Behavior of Model with Isotropic Hardening in Compression Steel01HystereticB.jpg Steel01 Material \u2013 Hysteretic Behavior of Model with Isotropic Hardening in Tension Steel01HystereticC.jpg NOTES: If strain-hardening ratio is zero and you do not expect softening of your system use BandSPD solver. Code Developed by: Filip Filippou, UC Berkeley Images Developed by: Silvia Mazzoni","title":"Steel01"},{"location":"library/modeling/uniaxial/metallic/666-Steel02/","text":"Steel02 This command is used to construct a uniaxial Giuffre-Menegotto-Pinto steel material object with isotropic strain hardening. Model.uniaxial(\u201c Steel02 \u201d, name, fy, E, b) fy float yield strength E float Young\u2019s modulus of elasticity b = 0.0 float strain-hardening ratio (ratio between post-yield tangent and initial elastic tangent R0 = 18 float cR1 = 0.925 float Bauschinger evolution parameter cR2 = 0.15 float Bauschinger evolution parameter a1 = 0.0 float increase of compression yield envelope as proportion of yield strength after a plastic strain of a2\u2217(Fy/E0) a2 = 1.0 float see explanation under a1 . a3 = 0.0 float increase of tension yield envelope as proportion of yield strength after a plastic strain of a4\u2217(Fy/E0) a4 = 1.0 float see explanation under a3 . sigInit = 0.0 float initial stress more on OpenSees uniaxialMaterial Arguments \u2013 Steel02 Steel02 Material \u2013 Material Parameters of Monotonic Envelope Steel02Monotonic.jpg Steel02 Material \u2013 Hysteretic Behavior of Model w/o Isotropic Hardening Steel02HystereticA.jpg Steel02 Material \u2013 Hysteretic Behavior of Model with Isotropic Hardening in Compression Steel01 Material \u2013 Hysteretic Behavior of Model with Isotropic Hardening in Tension Steel02HystereticC.jpg References Filippou, F. C., Popov, E. P., Bertero, V. V. (1983). \u201cEffects of Bond Deterioration on Hysteretic Behavior of Reinforced Concrete Joints\u201d. Report EERC 83-19, Earthquake Engineering Research Center, University of California, Berkeley. Code Developed by: Filip Filippou, UC Berkeley Images Developed by: Silvia Mazzoni","title":"Steel02"},{"location":"library/modeling/uniaxial/metallic/667-Steel4/","text":"Steel4 img { transition:transform 0.25s ease; } img:hover { -webkit-transform:scale(1.5); /* or some other value */ transform:scale(1.5); } This command is used to construct a general uniaxial material with combined kinematic and isotropic hardening and optional non-symmetric behavior. Model.uniaxial(\u201c Steel04 \u201d, name, fy, E) fy float Yield stress. E float Young\u2019s modulus of elasticity kin [b_k,R_0,r_1,r_2] , apply kinematic hardening Kinematic hardening is based on the Menegotto-Pinto model. The parameters and their use is identical to those of the Steel02 material. Steel4 param kin.png recommended values: R_0 = 20 , r_1 = 0.90 , r_2 = 0.15 b_k float hardening ratio (E_k/E_0) R_0 float control the exponential transition from linear elastic to hardening asymptote r_1 float r_2 float iso [b_i,b_l,rho_i,R_i,l_yp] , apply isotropic hardening Isotropic hardening increases the yield strength of the material. The applied increase is calculated as a function of the accumulated plastic strain. The following parameters control that function. Steel4 param iso.png b_i float initial hardening ratio (E_i/E_0) b_l float saturated hardening ratio (E_is/E_0) rho_i float specifies the position of the intersection point between initial and saturated hardening asymptotes R_i float control the exponential transition from initial to saturated asymptote l_yp float length of the yield plateau in \\(\\varepsilon_{y0} = f_y / E_0\\) units ult [f_u,R_u] , apply an ultimate strength limit The ultimate strength limit serves as an upper limit of material resistance. After the limit is reached the material behaves in a perfectly plastic manner. Exponential transition is provided from the kinematic hardening to the perfectly plastic asymptote. Note that isotropic hardening is also limited by the ultimate strength, but the transition from the isotropic hardening to the perfectly plastic asymptote is instantaneous. Steel4 param ult.png f_u float ultimate strength R_u float control the exponential transition from kinematic hardening to perfectly plastic asymptote asym [[kin1,kin2,kin3,kin4],[iso1,iso2,iso3,iso4],[ult1,ult2]] , assume non-symmetric behavior If non-symmetric behavior is assumed, material response under tension and compression will be controlled by two different parameter sets. The normal parameters control behavior under tension. Additional parameters shall be specified to describe behavior under compression. The following parameters are expected after the normal parameters when the options below are used. Steel4 param asymi.png Steel4 param asymk.png kin [kin1,kin2,kin3,kin4] , kin1 float kin2 float kin3 float kin4 float iso [iso1,iso2,iso3,iso4] , iso1 float iso2 float iso3 float iso4 float ult [ult1,ult2] , ult1 float ult2 float sig_init float apply initial stress Initial stress is assumed at 0 strain at the beginning of the loading process. The absolute value of the initial stress is assumed to be less than the yield strength of the material. Steel4 param init.png cycNum int expected number of half-cycles during the loading process Efficiency of the material can be slightly increased by correctly setting this value. The default value is cycNum = 50 Load history memory can be turned off by setting cycNum = 0 . Examples Under development\u2026 Code developed by: Adam Zsarn\u00f3czay, zsarnoczay@vbt.bme.hu","title":"Steel4"},{"location":"library/modeling/uniaxial/metallic/668-SteelMPF/","text":"SteelMPF This command is used to construct a uniaxialMaterial SteelMPF (Kolozvari et al., 2015), which represents the well-known uniaxial constitutive nonlinear hysteretic material model for steel proposed by Menegotto and Pinto (1973), and extended by Filippou et al. (1983) to include isotropic strain hardening effects. Model.uniaxial(\u201c SteelMPF \u201d, name, fyp, fyn, E, bp, bn) fyp float yield strength fyn float yield strength E float Young\u2019s modulus of elasticity bp = 0.0 float strain-hardening ratio (ratio between post-yield tangent and initial elastic tangent bn = 0.0 float strain-hardening ratio (ratio between post-yield tangent and initial elastic tangent R0 = 18 float cR1 = 0.925 float Bauschinger evolution parameter cR2 = 0.15 float Bauschinger evolution parameter a1 = 0.0 float increase of compression yield envelope as proportion of yield strength after a plastic strain of a2\u2217(Fy/E0) a2 = 1.0 float see explanation under a1 . a3 = 0.0 float increase of tension yield envelope as proportion of yield strength after a plastic strain of a4\u2217(Fy/E0) a4 = 1.0 float see explanation under a3 . sigInit = 0.0 float initial stress The relationship is in the form of curved transitions (Figure 1), each from a straight-line asymptote with slope E 0 (modulus of elasticity) to another straight-line asymptote with slope E 1 = bE 0 (yield modulus) where b is the strain hardening ratio. The curvature of the transition curve between the two asymptotes is governed by a cyclic curvature parameter R , which permits the Bauschinger effect to be represented, and is dependent on the absolute strain difference between the current asymptote intersection point and the previous maximum or minimum strain reversal point depending on whether the current strain is increasing or decreasing, respectively. The strain and stress pairs (\u03b5 r ,\u03c3 r ) and (\u03b5 0 ,\u03c3 0 ) shown on Figure 1 are updated after each strain reversal. The model allows calibration of isotropic hardening parameters in both compression and tension through optional input variables a 1 and a 2 for isotropic strain hardening in compression, and a 3 and a 4 for isotropic strain hardening tension, and uses default values of a 1 = a 3 = 0.0 and a 2 = a 4 = 1.0 that yield no isotropic strain hardening for either compression or tension. To incorporate isotropic strain hardening in compression, the recommended parameters are a 1 = 0.01 and a 2 = 7.0. To incorporate isotropic strain hardening in tension, the recommended parameters are a 3 = 0.01 and a 4 = 7.0. Source: /usr/local/cvs/OpenSees/SRC/material/uniaxial/ Figure 1. Constitutive Model for Steel (Menegotto and Pinto, 1973) Input Format: Example: uniaxialMaterial SteelMPF 1 60 60 29000 0.02 0.02 20.0 0.925 0.15 Discussion: Although the Menegotto-Pinto model is already available in OpenSees (e.g., [ Steel02 ]), the formulation of SteelMPF introduces several distinctive features compared to existing models. For example, the model allows definition of different yield stress values and strain hardening ratios for tension and compression, and it considers degradation of cyclic curvature parameter R for strain reversals in both pre- and post- yielding regions, which could produce more accurate predictions of yield capacity for some RC wall specimens ( element MVLEM , Example 1), whereas Steel02 considers the degradation in post-yielding region only. Strain-stress relationships obtained using SteelMPF and Steel02 are compared in Figure 2 for a strain history that includes strain reversals at strain values equal to one-half of the yield strain (i.e., \u03b5 r = \u00b10.001 = \u03b5 y /2). Figure 2. Comparing the degradation of cyclic curvature in the pre-yielding region for Steel02 and SteelMPF Furthermore, it has been observed from the strain-stress relationships obtained from quasi-static or dynamic analyses using existing steel models in OpenSees (e.g., Steel02 ) that after partial unloading occurs in a model element caused by dynamic loading or stress re-distribution under quasi-static loading due to concrete cracking or crushing, the Menegotto-Pinto formulation produces stress overshooting in the cyclic stress-strain behavior of reinforcing steel. This overshooting effect is not behavioral and causes non-physical hardening in the stress-strain behavior, upon reloading from the partial unloading loop. This phenomenon is illustrated in Figure 3 for the Steel02 model in OpenSees. This anomaly results in overestimation of steel stresses predicted by the Steel02 model upon return from partial unloading, yielding strain-stress curve that may not represent the physical constitutive behavior of reinforcing steel under cyclic loading. This limitation in the Menegotto-Pinto model formulation has also been acknowledged by Filippou et al. (1983). The overshooting effect observed in the existing OpenSees material model for reinforcing steel (e.g., Steel02 ) has been remedied in SteelMPF , via manipulating the model formulation so that reloading behavior after partial unloading cannot overshoot the previous loading loop in the cyclic stress-strain behavior. The comparison between strain-stress relationships obtained using SteelMPF and Steel02 for a strain history that includes low-amplitude unloading followed by reloading is presented in Figure 3. Figure 3. Comparing the stress overshooting upon reloading from low-amplitude unloading for Steel02 and SteelMPF References Filippou F.C., Popov, E.P., and Bertero, V.V. (1983). \u201cEffects of Bond Deterioration on Hysteretic Behavior of Reinforced Concrete Joints\u201d. Report EERC 83-19, Earthquake Engineering Research Center, University of California, Berkeley. Kolozvari K., Orakcal K., and Wallace J. W. (2015). \u201cShear-Flexure Interaction Modeling of reinforced Concrete Structural Walls and Columns under Reversed Cyclic Loading\u201d, Pacific Earthquake Engineering Research Center, University of California, Berkeley, PEER Report No. 2015/12 Menegotto, M., and Pinto, P.E. (1973). Method of analysis of cyclically loaded RC plane frames including changes in geometry and non-elastic behavior of elements under normal force and bending. Preliminary Report IABSE, vol 13. Code developed by: Kristijan Kolozvari , California State University, Fullerton Kutay Orakcal , Bogazici University, Istanbul, Turkey John Wallace , Univeristy of California, Los Angeles","title":"SteelMPF"},{"location":"library/modeling/uniaxial/metallic/730-UVCuniaxial/","text":"UVCuniaxial This command is used to construct an Updated Voce-Chaboche (UVC) material for uniaxial stress states (e.g., beam elements). This material is a refined version of the classic nonlinear isotropic/kinematic hardening material model based on the Voce isotropic hardening law and the Chaboche kinematic hardening law. The UVC model contains an updated isotropic hardening law, with parameter constraints, to simulate the permanent decrease in yield stress with initial plastic loading associated with the discontinuous yielding phenomenon in mild steels. Details regarding the model, its implementation, and calibration can be found in the references cited at the end. The multiaxial (e.g., for solid/brick elements) and plane-stress (e.g., for quad/plate/shell elements) versions are also available. The multiaxial and plane-stress implementations have the exact same hardening rules as this uniaxial model, and only differ in their purpose and numerical implementation. Available in OpenSees version 3.1.0+. Model.uniaxial(\u201c UVCuniaxial \u201d, \u2003\u2003\u2003name, \u2003\u2003\u2003E, \u2003\u2003\u2003fy, \u2003\u2003\u2003QInf, \u2003\u2003\u2003b, \u2003\u2003\u2003DInf, \u2003\u2003\u2003a, \u2003\u2003\u2003N, \u2003\u2003\u2003backstress) E float Young\u2019s modulus of elasticity fy float Yield stress. QInf float Maximum increase in yield stress due to cyclic hardening (isotropic hardening). b float Saturation rate of QInf, b > 0. DInf float Decrease in the initial yield stress, to neglect the model updates set DInf = 0. a float Saturation rate of DInf, \\(a > 0\\) . If \\(D_\\infty == 0\\) , then a is arbitrary (but still a > 0). N int Number of backstresses to define, \\(N \\ge 1\\) . backstress [[C,gamma]] , Backstress parameters, up to 9 pairs may be specified. If C is specified, then the corresponding gamma must also be specified. Note that only the first N backstresses will be read by the parser. [C,gamma] Grp(Num) , C float gamma float Examples 1. Validation with Abaqus: This first example compares the response of the UVC model with the built-in nonlinear isotropic/kinematic material model in Abaqus v6.14. For this validation the model updates are neglected by simply setting DInf = 0.0 and a = 1.0. The model parameters are: E = 179800 MPa, fy = 318.5 MPa, QInf = 100.7 MPa, b = 8.0, DInf = 0.0 MPa, a = 1.0, C1 = 11608.2 MPa, gamma1 = 145.2, C2 = 1026.3 MPa, gamma2 = 4.7 Figure 1 shows that the UVC implementation in OpenSees agrees with the built-in Abaqus model to the level of machine precision. Therefore, you can use the UVC model in place of the nonlinear isotropic/kinematic hardening material model provided in Abaqus and many other finite element simulation platforms. The finite element models used to validate the Abaqus and OpenSees responses can be found at https://github.com/ahartloper/UVC_MatMod . Figure 1. Validation of UVC model with built-in nonlinear isotropic/kinematic material in Abaqus. 2. Comparison with structural steels: The applicability of the UVC material model for structural steels is demonstrated through two comparisons with experimental data from uniaxial coupon tests. A comparison with a North American steel, A992 Gr. 50 (nominal fy = 345 MPa), is shown in Figure 2. A comparison with a European steel, S355J2+N (nominal fy = 355 MPa), is shown in Figure 3. In both cases the UVC model is able to represent well the initial yield stress as well as the material behavior in later loading cycles. The parameters used for the A992 Gr. 50 and S355J2+N steels, along with other common structural steels, are provided and discussed in the next section. Figure 2. Comparison of UVC model with uniaxial coupon test data from the A992 Gr. 50 W14X82 flange data set. Figure 3. Comparison of UVC model with uniaxial coupon test data from the S355J2+N 25 mm plate data set. UVC model parameters for structural steels Below is a list of UVC model parameters for twelve structural steels from Reference [1] using two backstresses. These parameters are applicable for all implementations of the UVC model (uniaxial, plane-stress, multiaxial). References [1,3] contain detailed information on the calibration procedure used to obtain the model parameters. All of the parameters provided in the table below were obtained by minimizing the total squared-strain energy across at least five uniaxial coupon tests of distinct strain histories subject to the constraint that the material response is non-softening. Therefore, the UVC material model parameters should be representative of steel material behavior for arbitrarily imposed strains. Note that although the parameters in this table are considered representative of a specific sample of each material, significant variations can exist between different samples of the same material. All the parameters in the table are obtained through the UVC model calibration procedure implemented in the open-source Python package RESSPyLab . The RESSPyLab package can be used to generate UVC model parameters for other steel materials if the data is available. Details and examples on the calibration are provided on the RESSPyLab web page. Note that the parameters provided in the table below were calibrated using the true stress-strain definition, i.e., \\[e_\\text{true} = \\ln\\left(1+\\frac{L-L_0}{L_0}\\right)\\] and \\[s_\\text{true} = \\frac{F}{A_0} \\left( 1 + \\frac{L-L_0}{L_0}\\right).\\] UVC Material Parameters Material E f y Q Inf b D Inf a C 1 gamma 1 C 2 gamma 2 - [GPa] [MPa] [MPa] - [MPa] - [MPa] - [MPa] S355J2+N (25 mm plate) 197.41 338.80 134.34 14.71 133.75 229.25 26242.00 199.04 2445.30 11.66 S355J2+N (50 mm plate) 185.97 332.18 120.48 8.14 93.15 261.75 21102.00 173.60 2300.60 10.42 S355J2+N (HEB500 flange) 192.13 315.04 138.01 11.36 96.16 223.66 18587.84 257.31 1351.98 6.52 S355J2+N (HEB500 web) 199.68 334.94 139.32 14.07 120.33 274.73 28528.03 315.17 2569.45 24.68 S460NL (25 mm plate) 187.61 439.20 97.35 14.02 136.64 226.40 26691.00 188.75 2892.40 10.44 S690QL (25 mm plate) 188.63 685.39 0.11 0.11 132.30 285.15 34575.00 185.16 3154.20 20.14 A992 Gr. 50 (W14X82 web) 210.74 378.83 122.63 19.74 143.49 248.14 31638.00 277.32 1548.60 9.04 A992 Gr. 50 (W14X82 flange) 191.02 373.72 141.47 15.20 135.95 211.16 25621.00 235.12 942.18 3.16 A500 Gr. B (HSS305X16) 191.21 324.09 228.02 0.11 50.41 270.40 17707.00 207.18 1526.20 6.22 BCP325 (22 mm plate) 178.61 368.03 112.25 10.78 105.95 221.92 20104.00 200.43 2203.00 11.76 BCR295 (HSS350X22) 178.74 412.21 0.09 0.09 103.30 212.83 20750.59 225.26 1245.04 2.09 HYP400 (27mm plate) 189.36 454.46 62.63 16.57 109.28 145.74 13860.00 141.61 1031.10 3.53 References Please use Reference [1] when citing the UVC model. [1] Hartloper, A. R., de Castro e Sousa A., and Lignos D.G. \u201cConstitutive Modeling of Structural Steels: Nonlinear Isotropic/Kinematic Hardening Material Model and its Calibration\u201d, https://doi.org/10.1061/(ASCE)ST.1943-541X.0002964 . [2] Hartloper, A. R., de Castro e Sousa A., and Lignos D.G. (2019). \u201cSensitivity of Simulated Steel Column Instabilities to Plasticity Model Assumptions\u201d. 12th Canadian Conference on Earthquake Engineering, Quebec City, QC, Canada. https://infoscience.epfl.ch/record/267788 [3] Hartloper, A. R., de Castro e Sousa A., and Lignos D.G. (2019). \u201cA Nonlinear Isotropic/Kinematic Hardening Model for Materials with Discontinuous Yielding\u201d. Report No. 271062, Resilient Steel Structures Laboratory (RESSLab), EPFL, Lausanne, Switzerland. https://infoscience.epfl.ch/record/271062 . Code developed, implemented, and maintained by: Alex Hartloper (EPFL). Issues, bugs, and feature requests can be opened at the github repository .","title":"UVCuniaxial"},{"location":"library/modeling/uniaxial/metallic/SteelBRB/","text":"SteelBRB unixialMaterial SteelBRB tag E sigmaY0 sigmaY_T alpha_T beta_T delta_T \\ sigmaY_C alpha_C beta_C delta_C <Tol> This file contains the class definition for steel buckling restrained braces refer to: Alessandro Zona, Andrea Dall\u2019Asta, 2012, \u201cElastoplastic model for steel buckling restrained braces\u201d, Journal of Constructional steel research 68(2012), 118-125 https://doi.org/10.1016/j.jcsr.2011.07.017","title":"SteelBRB"},{"location":"library/modeling/uniaxial/other/178-Elastic-Perfectly%20Plastic%20Gap/","text":"Elastic-Perfectly Plastic Gap This command is used to construct an elastic perfectly-plastic gap uniaxial material object. uniaxialMaterial ElasticPPGap $matTag $E $Fy $gap < $eta > < damage > matTag integer tag identifying material E tangent Fy stress or force at which material reaches plastic state gap initial gap (strain or deformation) eta hardening ratio (=Eh/E), which can be negative damage an optional string to specify whether to accumulate damage or not in the material. With the default string, \u201cnoDamage\u201d the gap material will re-center on load reversal. If the string \u201cdamage\u201d is provided this recentering will not occur and gap will grow. ElasticPPGap.gif Examples _ElasticPPGap.tcl <tcl>ElasticPPGap.tcl</tcl> Code Developed by: Kevin Mackie, University of Central Florida","title":"Elastic-Perfectly Plastic Gap"},{"location":"library/modeling/uniaxial/other/210-Engineered%20Cementitious%20Composites/","text":"ECC01 This command is used to construct a uniaxial Engineered Cementitious Composites (ECC)material object based on the ECC material model of Han, et al. (see references). Reloading in tension and compression is linear. uniaxialMaterial ECC01 $matTag $sigt0 $epst0 $sigt1 $epst1 $epst2 $sigc0 $epsc0 $epsc1 $alphaT1 $alphaT2 $alphaC $alphaCU $betaT $betaC matTag integer tag identifying material sigt0 tensile cracking stress epst0 strain at tensile cracking stress sigt1 peak tensile stress epst1 strain at peak tensile stress sigt2 ultimate tensile strain sigc0 compressive strength (see NOTES) epsc0 strain at compressive strength (see NOTES) epsc1 ultimate compressive strain (see NOTES) alphaT1 exponent of the unloading curve in tensile strain hardening region alphaT2 exponent of the unloading curve in tensile softening region alphaC exponent of the unloading curve in the compressive softening alphaCU exponent of the compressive softening curve (use 1 for linear softening) betaT parameter to determine permanent strain in tension betaC parameter to determine permanent strain in compression NOTES Compressive ECC parameters should be input as negative values. ECC01.gif eccTensile.gif eccCompression.gif References Han TS, Feenstra PH, Billington SL, \u201cSimulation of Highly Ductile Fiber-Reinforced Cement-Based Composite Components Under Cyclic Loading,\u201d ACI Structural Journal, V. 100, No. 6, pp. 749-757. Code Developed by: Won Lee, Stanford and Sara Billington, Stanford","title":"ECC01"},{"location":"library/modeling/uniaxial/other/29-BARSLIP/","text":"BarSlip This command is used to construct a uniaxial material that simulates the bar force versus slip response of a reinforcing bar anchored in a beam-column joint. The model exhibits degradation under cyclic loading. Cyclic degradation of strength and stiffness occurs in three ways: unloading stiffness degradation, reloading stiffness degradation, strength degradation. uniaxialMaterial BarSlip $matTag $fc $fy $Es $fu $Eh $db $ld $nb $depth $height < $ancLratio > $bsFlag $type < $damage $unit > matTag unique material object integer tag fc positive floating point value defining the compressive strength of the concrete in which the reinforcing bar is anchored fy positive floating point value defining the yield strength of the reinforcing steel Es floating point value defining the modulus of elasticity of the reinforcing steel fu positive floating point value defining the ultimate strength of the reinforcing steel Eh floating point value defining the hardening modulus of the reinforcing steel ld floating point value defining the development length of the reinforcing steel db point value defining the diameter of reinforcing steel nb an integer defining the number of anchored bars depth floating point value defining the dimension of the member (beam or column) perpendicular to the dimension of the plane of the paper height floating point value defining the height of the flexural member, perpendicular to direction in which the reinforcing steel is placed, but in the plane of the paper ancLratio floating point value defining the ratio of anchorage length used for the reinforcing bar to the dimension of the joint in the direction of the reinforcing bar (optional, default: 1.0) bsFlag string indicating relative bond strength for the anchored reinforcing bar (options: \u201cStrong\u201d or \u201cWeak\u201d) type string indicating where the reinforcing bar is placed. (options: \u201cbeamtop\u201d, \u201cbeambot\u201d or \u201ccolumn\u201d) damage string indicating type of damage:whether there is full damage in the material or no damage (optional, options: \u201cDamage\u201d, \u201cNoDamage\u201d ; default: Damage) unit string indicating the type of unit system used (optional, options: \u201cpsi\u201d, \u201cMPa\u201d, \u201cPa\u201d, \u201cpsf\u201d, \u201cksi\u201d, \u201cksf\u201d) (default: \u201cpsi\u201d / \u201cMPa\u201d)* NOTES Model Characteristics: The uniaxial material model uses the Pinching4 material model (Ref. Pinching4 material model). The response envelope for the bar-slip springs does not represent strength deterioration, but once the slip demand exceeds 3mm (0.12 in), strength deterioration due to cyclic loading initiates. As a result the bond-slip springs always exhibit positive stiffness, but strength deterioration upon reloading to a previously observed slip demand. Reloading and Unloading Stiffness deterioration are also simulated. The damage index for unloading and reloading stiffness degradation is evaluated the same say as the Pinching4 material (ref. Pinching4 material doc.) but the index for strength degradation is specified as With degradation model parameters gF*. It should be noted in here that the deterioration parameters for unloading, reloading stiffness and strength degradation cannot be modified by the user and are defined to represent observed behavior. The model includes predefined bond strengths, so there is the necessity to include in Units in this material model. For default one can specify units in psi (i.e. pounds/inch2) or in MPa (i.e. N/mm2). The code detects units in psi if the compressive strength of concrete is greater than 1000 otherwise it takes it as MPa system. The optional variable unit will help the user to specify other different types of unit systems according to one\u2019s choice, but currently it is limited to the unit systems as specified above. The user should also take care to specify the units of length in the corresponding matching units. (note: Pa = N/m2; ksf = kilo-pound/ft2) Code Developed by: Nilanjan Mitra, CalPoly State University","title":"BarSlip"},{"location":"library/modeling/uniaxial/other/331-Hyperbolic%20Gap/","text":"HyperbolicGapMaterial This command is used to construct a hyperbolic gap material object. uniaxialMaterial HyperbolicGapMaterial $matTag $Kmax $Kur $Rf $Fult $gap matTag integer tag identifying material Kmax initial stiffness Kur unloading/reloading stiffness Rf failure ratio Fult ultimate (maximum) passive resistance* gap initial gap* NOTES: This material is implemented as a compression-only gap material. Fult and gap should be input as negative values. Recomended Values: Kmax = 20300 kN/m of abutment width Kcur = $Kmax Rf = 0.7 Fult = -326 kN per meter of abutment width gap = -2.54 cm DESCRIPTION: This file contains the class implementation for HyperbolicGapMaterial. This material is based on abutment stiffness models for bridge simulation proposed by Patrick Wilson and Ahmed Elgamal at UCSD. The abutment stiffness models are based on large-scale abutment tests performed on the outdoor shaking table at UCSD. The model is described for a 1.68 meter (5.5 ft) tall backwall height (typical size) and a 1 meter wide section along the width of the abutment (to be scaled accordingly). The hyperbolic force-displacement model is based on work by Duncan and Mokwa (2001) and Shamsabadi et al. (2007) with calibrated parameters from UCSD abutment tests. This model matches very well with test data up to 7.64 cm of longitudinal displacement. \\[F(x) = \\frac{x}{\\frac{1}{K_\\text{max}} + R_f \\frac{x}{F_\\text{ult}}}\\] HyperbolicGapA.png HyperbolicGapB.png References Duncan, J. M., and Mokwa, R. L. (2001). \u201cPassive earth pressures: theories and tests.\u201d Journal of Geotechnical and Geoenvironmental Engineering, 127(3), 248-257. Shamsabadi, A., Rollins, K. M., and Kapuskar, M. (2007). \u201cNonlinear soil-abutment-bridge structure interaction for seismic performance-based design.\u201d Journal of Geotechnical and Geoenvironmental Engineering, 133(6), 707-720. Wilson, P and Elgamal, A (2006). \u201cLarge scale measurement of lateral earth pressure on bridge abutment back-wall subjected to static and dynamic loading.\u201d Proceedings of the New Zealand Workshop on Geotechnical Earthquake Engineering, University of Canterbury, Christchurch, New Zealand: pp 307-315. Code Developed by: Mathew Dryden, UC Berkeley and Patrick Wilson, UCSD","title":"HyperbolicGapMaterial"},{"location":"library/modeling/uniaxial/other/332-Hysteretic/","text":"Hysteretic This command is used to construct a uniaxial bilinear hysteretic material object with pinching of force and deformation, damage due to ductility and energy, and degraded unloading stiffness based on ductility. uniaxialMaterial Hysteretic $matTag $s1p $e1p $s2p $e2p < $s3p $e3p > $s1n $e1n $s2n $e2n < $s3n $e3n > $pinchX $pinchY $damage1 $damage2 < $beta > matTag integer tag identifying material s1p e1p stress and strain (or force & deformation) at first point of the envelope in the positive direction s2p e2p stress and strain (or force & deformation) at second point of the envelope in the positive direction s3p e3p stress and strain (or force & deformation) at third point of the envelope in the positive direction (optional) s1n e1n stress and strain (or force & deformation) at first point of the envelope in the negative direction s2n e2n stress and strain (or force & deformation) at second point of the envelope in the negative direction s3n e3n stress and strain (or force & deformation) at third point of the envelope in the negative direction (optional) pinchx pinching factor for strain (or deformation) during reloading pinchy pinching factor for stress (or force) during reloading damage1 damage due to ductility: D1(mu-1) damage2 damage due to energy: D2(Eii/Eult) beta power used to determine the degraded unloading stiffness based on ductility, mu-beta (optional, default=0.0) Hysteretic.gif Hysteretic2.png NOTE: In cases $s3p > \\(s2p and abs(\\) s3n) > abs($s2n), the envelope of the hysteretic material after $e3p or $e3n follows the slope defined by 2nd and 3rd point of the envelope. In cases $s3p <= \\(s2p and abs(\\) s3n) <= abs($s2n) the envelope of the hysteretic material after $e3p or $e3n is a flat line with a constant stress (or force) equal to $s3p or $s3n. Examples Effects of Hysteretic-Material Parameters 1 Code Developed by: Michael Scott (Oregon State University) & Filip Filippou (UC Berkeley) Images Developed by: Silvia Mazzoni","title":"Hysteretic"},{"location":"library/modeling/uniaxial/other/334-Impact/","text":"ImpactMaterial This command is used to construct an impact material object uniaxialMaterial ImpactMaterial $matTag $K1 $K2 $\u03b4y $gap matTag integer tag identifying material K1 initial stiffness K2 secondary stiffness $\u03b4y yield displacement gap initial gap* Notes This material is implemented as a compression-only gap material. Delta_y and gap should be input as negative values. DESCRIPTION: This material is based on an approximation to the Hertz contact model proposed by Muthukumar (See REFERENCES below). The energy dissipated during impact is: E = kh * \u03b4m^(n+1) * (1-e^2) / (N+1) where kh is the impact stiffness parameter, with a typical value of EA/L or 25,000 k-in.-3/2; n is typically taken as 3/2 for the exponent associated with the Hertz power rule; e is the coefficient of restitution, with typical values from 0.6-0.8; and \u03b4m is the maximum penetration during the pounding event. The effective stiffness, Keff, is: Keff = kh * sqrt(\u03b4m) The yield displacement is: \u03b4y = a * \u03b4m where a is typically taken as 0.1. The initial stiffness, K1, and secondary stiffness, K2, are then selected such that the Impact model dissipates an amount of energy during a pounding event that is consistent with the associated energy dissipated in the Hertz model. K1 = Keff + E / (a*\u03b4m^2) K2 = Keff - E / ((1-a)*\u03b4m^2) Response of Impact Material during a pounding event. ImpactA.gif Response of Impact Material for displacement cycles of increasing amplitude. ImpactB.gif Examples References Muthukumar, S., and DesRoches, R. (2006). \u201cA Hertz Contact Model with Non-linear Damping for Pounding Simulation.\u201d Earthquake Engineering and Structural Dynamics, 35, 811-828. Muthukumar, S. (2003). \u201cA Contact Element Approach with Hysteresis Damping for the Analysis and Design of Pounding in Bridges.\u201d PhD Thesis, Georgia Institute of Technology. http://smartech.gatech.edu/ Nielson, B. (2005). \u201cAnalytical Fragility Curves for Highway Bridges in Moderate Seismic Zones.\u201d PhD Thesis, Georgia Institute of Technology. http://smartech.gatech.edu/ Code Developed by: Mathew Dryden, UC Berkeley","title":"ImpactMaterial"},{"location":"library/modeling/uniaxial/other/504-Pinching4/","text":"Pinching4 This command is used to construct a uniaxial material that represents a \u201cpinched\u201d load-deformation response and exhibits degradation under cyclic loading. Cyclic degradation of strength and stiffness occurs in three ways: unloading stiffness degradation, reloading stiffness degradation, strength degradation. uniaxialMaterial Pinching4 $matTag $ePf1 $ePd1 $ePf2 $ePd2 $ePf3 $ePd3 $ePf4 $ePd4 < $eNf1 $eNd1 $eNf2 $eNd2 $eNf3 $eNd3 $eNf4 $eNd4 > $rDispP $rForceP $uForceP < $rDispN $rForceN $uForceN > $gK1 $gK2 $gK3 $gK4 $gKLim $gD1 $gD2 $gD3 $gD4 $gDLim $gF1 $gF2 $gF3 $gF4 $gFLim $gE $dmgType matTag integer tag identifying material ePf1 ePf2 ePf3 ePf4 floating point values defining force points on the positive response envelope ePd1 ePd2 ePd3 ePd4 floating point values defining deformation points on the positive response envelope eNf1 eNf2 eNf3 eNf4 floating point values defining force points on the negative response envelope eNd1 eNd2 eNd3 eNd4 floating point values defining deformation points on the negative response envelope rDispP floating point value defining the ratio of the deformation at which reloading occurs to the maximum historic deformation demand fFoceP floating point value defining the ratio of the force at which reloading begins to force corresponding to the maximum historic deformation demand uForceP floating point value defining the ratio of strength developed upon unloading from negative load to the maximum strength developed under monotonic loading rDispN floating point value defining the ratio of the deformation at which reloading occurs to the minimum historic deformation demand fFoceN floating point value defining the ratio of the force at which reloading begins to force corresponding to the minimum historic deformation demand uForceN floating point value defining the ratio of strength developed upon unloading from negative load to the minimum strength developed under monotonic loading gK1 gK2 gK3 gK4 gKLim floating point values controlling cyclic degradation model for unloading stiffness degradation gD1 gD2 gD3 gD4 gDLim floating point values controlling cyclic degradation model for reloading stiffness degradation gF1 gF2 gF3 gF4 gFLim floating point values controlling cyclic degradation model for strength degradation gE floating point value used to define maximum energy dissipation under cyclic loading. Total energy dissipation capacity is defined as this factor multiplied by the energy dissipated under monotonic loading. dmgType string to indicate type of damage (option: \u201ccycle\u201d, \u201cenergy\u201d) NOTES: Piinching4.jpg Damage Models: Stiffness and strength are assumed to deteriorate due to the imposed \u201cload\u201d history. The same basic equations are used to describe deterioration in strength, unloading stiffness and reloading stiffness: \\[k_i = k_0(1 -\\delta k_i)\\] where \\(k_i\\) is the unloading stiffness at time \\(t_i\\) , \\(k_0\\) is the initial unloading stiffness (for the case of no damage), and \\(\\delta k_i\\) (defined below) is the value of the stiffness damage index at time \\(t_i\\) . \\[d_{\\text{max i}} = d_{\\text{max 0}}(1 -\\delta d_i)\\] where \\(d_{\\text{max i}}\\) is the deformation demand that defines the end of the reload cycle for increasing deformation demand, $d_{} $ is the maximum historic deformation demand (which would be the deformation demand defining the end of the reload cycle if degradation of reloading stiffness is ignored), and \\(\\delta d_i\\) (defined below) is the value of reloading stiffness damage index at time \\(t_i\\) . \\[f_{\\text{max i}} = f_{\\text{max 0}}(1 -\\delta f_i)\\] where \\(f_{\\text{max i}}\\) is the current envelope maximum strength at time \\(t_i\\) , $f_{} $ is the initial envelope maximum strength for the case of no damage, and \\(\\delta f_i\\) (defined below) is the value of strength value index at time \\(t_i\\) . The damage indices \\(\\delta k_i\\) , \\(\\delta d_i\\) , and \\(\\delta f_i\\) , may be defined to be a function of displacement history only ( dmgType = \"cycle\" ) or displacement history and energy accumulation ( dmgType = \"energy\" ). For either case, all of the damage indices are computed using the same basic equation. If the damage indices are assumed to be a function of displacement history and energy accumulation, the unloading stiffness damage index, \\(\\delta k_i\\) is computed as follows: \\[\\delta k_i = \\left( \\text{gK1} (d_{max})^\\text{gK3} + \\text{gK2} \\left (\\frac{E_i}{E_\\text{monotonic}} \\right )^\\text{gK3} \\right ) \\le \\text{gKLim}\\] where \\[(d_{max} = \\text{max} \\left[ \\frac{d_\\text{max i}}{\\text{def}_\\text{max}}, \\frac{d_\\text{min i}}{\\text{def}_\\text{min}} \\right ]\\] Examples Pinching4MaterialExample DESCRIPTION: Stiffness and strength are assumed to deteriorate due to the imposed \u201cload\u201d history. The same basic equations are used to describe deterioration in strength, unloading stiffness and reloading stiffness: References PEER 2003/10 Code developed by: Nilinjan Mitra, University of Washington","title":"Pinching4"},{"location":"library/modeling/uniaxial/other/512-Plane%20Stress%20Concretes/","text":"ReinforcedConcretePlaneStress WARNING .. AT PRESENT CODE AS SUBMITTED DOES NOT APPEAR TO WORK .. LOOK AT CONVERGENCE IN EXAMPLE A number of Reinforced and Prestressed Concrete Plane Stress Materials are available. The ones on this page have been provided the University of Houston and are based on the Cyclic Softened Membrane Model (CSMM). They are capable of modeling the cyclic shear behavior of prestressed and reinforced concrete membranes. This command is used to construct a Reinforced Concrete Plane Stress material object based on Rotating Angle Theory with steel along two directions. nDMaterial ReinforcedConcretePlaneStress matTag? rho? s1? s2? c1? c2? angle1? angle2? rou1? rou2? fpc? fy? E0? epsc0? This command is used to construct a Reinforced Concrete Plane Stress material object based on Fixed Angle theory with steel along two directions. nDMaterial FAReinforcedConcretePlaneStress matTag? rho? s1? s2? c1? c2? angle1? angle2? rou1? rou2? fpc? fy? E0? epsc0? This command is used to construct a Reinforced Concrete Plane Stress material object based on Rotating Angle theory with steel along four directions. nDMaterial RAFourSteelRCPlaneStress matTag? rho? UniaxiaMatTag1? UniaxiaMatTag2? UniaxiaMatTag3? UniaxiaMatTag4? UniaxiaMatTag5? UniaxiaMatTag6? angle1? angle2? angle3? angle4? rou1? rou2? rou3? rou4? fpc? fy? E0? epsc0? This command is used to construct a Reinforced Concrete Plane Stress material object based on Fixed Angle theory with steel along four directions. nDMaterial FAFourSteelRCPlaneStress matTag? rho? UniaxiaMatTag1? UniaxiaMatTag2? UniaxiaMatTag3? UniaxiaMatTag4? UniaxiaMatTag5? UniaxiaMatTag6? angle1? angle2? angle3? angle4? rou1? rou2? rou3? rou4? fpc? fy? E0? epsc0? This command is used to construct a Prestressed Concrete Plane Stress material object based on Rotating Angle Theory with steel along two directions. nDMaterial PrestressedConcretePlaneStress matTag? rho? t1? s1? c1? c2? angle1? angle2? rou1? rou2? pstrain? fpc? fyT? fy2? E0? epsc0? This command is used to construct a Prestressed Concrete Plane Stress material object based on Fixed Angle theory with steel along two directions. nDMaterial FAPrestressedConcretePlaneStress matTag? rho? t1? s2? c1? c2? angle1? angle2? rou1? rou2? pstrain? fpc? fyT? fy? E0? epsc0? This command is used to construct a Prestressed Concrete Plane Stress material object based on Rotating Angle Theory with steel along four directions. nDMaterial RAFourSteelPCPlaneStress matTag? rho? UniaxiaMatTag1? UniaxiaMatTag2? UniaxiaMatTag3? UniaxiaMatTag4? angle1? angle2? rou1? rou2? pstrain? fpc? fyT? fy? E0? epsc0? This command is used to construct a Prestresed Concrete Plane Stress material object based on Fixed Angle theory with steel along four directions. nDMaterial FAFourSteelPCPlaneStress matTag? rho? t1? t2? s3? s4? c1? c2? angle1? angle2? angle3? angle4? rou1? rou2? rou3? rou4? pstrain1? pstrain2? fpc? fyT? fy? E0? epsc0? matTag integer tag identifying material rho material density t1 t2 material tags for uniaxial materials of type TendonL01 s1 s2 .. material tags for uniaxial materials of type SteelZ01 c1 c2 material tags for uniaxial materials of type ConcreteL01, ConcreteZ01 angle1 angle2 \u2026 angle of \\(i\\) \u2019th (steel or tendon) layer to x coordinate rou1 rou2 \u2026 steel ratio of the \\(i\\) \u2019th layer. pstrain1 pstrain2 initial strain in tendons fpc compressive strength of concrete fyT yield strength of tendons fy yield strength of steel E0 initial stiffness of steel (Young\u2019s Modulus) epsc0 compressive strain of concrete A number of special uniaxial materials are needed for these materials. These materials are created using the following uniaxialMaterial commands. uniaxialMaterial SteelZ01 tag ? fy? E0? fpc? rou? <ac?> <rc?> uniaxialMaterial TendonL01 tag ? fpy? Eps? fpc? rou? epsp? <ac?> <rc?> uniaxialMaterial ConcreteL01 tag ? fpc? epsc0? uniaxialMaterial ConcreteZ01 tag ? fpc? epsc0? tag unique uniaxial integer tag identifying material fy yield strength bare steel E0 initial stiffness fpc compressive strength of concrete epsc0 strain at compressive strength rou steel ratio epsp prestress strain ac unloading path parameter (default = 1.9) rc reloading path parameter (default = 10.0) EXAMPLE N_FSW13.tcl References T.T.C. Hsu and Y.L. Mo, \u201cUnified Theory of Concrete Structures\u201d, Wiley, COMING APRIL 2010 Y.L. Mo, J. Zhong, T.T.C. Hsu, \u201cSeismic simulation of RC wall-type structures\u201d,Engineering Structures, 30(11), 3167-3175, 2008. Code developed by: A. Laskar , J. Zhong , Y.L. Mo and Thomas T.C. Hsu , University of Houston.","title":"ReinforcedConcretePlaneStress"},{"location":"library/modeling/uniaxial/other/58-Bilin/","text":"IMKBilin This command is used to construct a bilin material. The bilin material simulates the modified Ibarra-Medina-Krawinkler deterioration model with bilinear hysteretic response. Note that the hysteretic response of this material has been calibrated with respect to more than 350 experimental data of steel beam-to-column connections and multivariate regression formulas are provided to estimate the deterioration parameters of the model for different connection types. These relationships were developed by Lignos and Krawinkler (2009, 2011) and have been adopted by PEER/ATC (2010). uniaxialMaterial IMKBilin $matTag $K0 $as_Plus $as_Neg $My_Plus $My_Neg $Lamda_S $Lamda_C $Lamda_A $Lamda_K $c_S $c_C $c_A $c_K $theta_p_Plus $theta_p_Neg $theta_pc_Plus $theta_pc_Neg $Res_Pos $Res_Neg $theta_u_Plus $theta_u_Neg $D_Plus $D_Neg < $nFactor > matTag integer tag identifying material K0 elastic stiffness as_Plus strain hardening ratio for positive loading direction as_Neg strain hardening ratio for negative loading direction My_Plus effective yield strength for positive loading direction My_Neg effective yield strength for negative loading direction (negative value) Lamda_S Cyclic deterioration parameter for strength deterioration Lamda_C Cyclic deterioration parameter for post-capping strength deterioration Lamda_A Cyclic deterioration parameter for acceleration reloading stiffness deterioration (is not a deterioration mode for a component with Bilinear hysteretic response). Lamda_K Cyclic deterioration parameter for unloading stiffness deterioration c_S rate of strength deterioration. The default value is 1.0. c_C rate of post-capping strength deterioration. The default value is 1.0. c_A rate of accelerated reloading deterioration. The default value is 1.0. c_K rate of unloading stiffness deterioration. The default value is 1.0. theta_p_Plus pre-capping rotation for positive loading direction (often noted as plastic rotation capacity) theta_p_Neg pre-capping rotation for negative loading direction (often noted as plastic rotation capacity) (positive value) theta_pc_Plus post-capping rotation for positive loading direction theta_pc_Neg post-capping rotation for negative loading direction (positive value) Res_Pos residual strength ratio for positive loading direction Res_Neg residual strength ratio for negative loading direction (positive value) theta_u_Plus ultimate rotation capacity for positive loading direction theta_u_Neg ultimate rotation capacity for negative loading direction (positive value) D_Plus rate of cyclic deterioration in the positive loading direction (this parameter is used to create assymetric hysteretic behavior for the case of a composite beam). For symmetric hysteretic response use 1.0. D_Neg rate of cyclic deterioration in the negative loading direction (this parameter is used to create assymetric hysteretic behavior for the case of a composite beam). For symmetric hysteretic response use 1.0. nFactor elastic stiffness amplification factor, mainly for use with concentrated plastic hinge elements (optional, default = 0). ModIKModel.PNG Image from: Lignos et al. (2011) The deterioration model parameters can be calibrated based on actual experimental data of steel components. Instead, a user can determine the same parameters with predictive equations that have been developed by Lignos and Krawinkler (2009, 2011). These equations relate deterioration modelling parameters with geometric and material properties of steel components and have been developed with multivariate regression analysis after extensive calibration of a recently developed steel component database of more than 300 steel specimens (Lignos and Krawinkler 2007, 2009, 2011). References : [1] Ibarra L.F., and Krawinkler, H. (2005). \u201cGlobal collapse of frame structures under seismic excitations\u201d, Rep. No. TB 152, The John A. Blume Earthquake Engineering Center, Stanford University, Stanford, CA. [2] Ibarra L.F., Medina R. A., and Krawinkler H. (2005). \u201cHysteretic models that incorporate strength and stiffness deterioration\u201d, Earthquake Engineering and Structural Dynamics, 34(12), 1489-1511. [3] Karavasilis T.L., Ricles J.M., Sause R. (2009). \u201cImplementation of deterioration elements in OpenSEES for collapse simulations\u201d ATLSS Engineering Research Center, Rep. No. 09-11. [4] Lignos, D.G., and Krawinkler, H. (2007), \u201cA database in support of modeling of component deterioration for collapse prediction of steel frame structures\u201d, Proc. ASCE Structures Congress, Long Beach CA, SEI institute. [5] Lignos, D.G., Krawinkler, H. (2009). \u201cSidesway collapse of deteriorating structural systems under seismic excitations,\u201d Rep.No.TB 172, The John A. Blume Earthquake Engineering Research Center, Stanford University, Stanford, CA. [6] Lignos, D. G., Krawinkler, H. and Whittaker, A.S. (2011). \u201cPrediction and validation of sidesway collapse of two scale models of a 4-story steel moment frame\u201d, Earthquake Engineering and Structural Dynamics, EESD, Vol. 40 (7), 807-825. [7] Lignos, D.G., and Krawinkler, H. (2010b). \u201cA steel database for component deterioration of tubular hollow square steel columns under varying axial load for collapse assessment of steel structures under earthquakes\u201d, Proc. 7th International Conference on Urban Earthquake Engineering (7CUEE), March 3-5, Tokyo, Japan. [8] Lignos, D.G., and Krawinkler, H. (2011). \u201cDeterioration modeling of steel components in support of collapse prediction of steel moment frames under earthquake loading\u201d, Journal of Structural Engineering, ASCE, Vol. 137 (11), 1291-1302. https://doi.org/10.1061/(ASCE)ST.1943-541X.0000376 [9] PEER/ATC (2010). \u201cModeling and acceptance criteria for seismic design and analysis of tall buildings\u201d, PEER/ATC-72-1, prepared by the Applied Technology Council in cooperation with the Pacific Earthquake Engineering Research Center, Redwood City, CA.. Code developed by: Dr. Dimitrios G. Lignos, McGill University and was implemented by Dr. Theodore Karavasilis, Oxford University nFactor Implemented by: by Dr. Andre R. Barbosa, Oregon State University and Mr. Filipe L.A. Ribeiro, Universidade Nova de Lisboa","title":"IMKBilin"},{"location":"library/modeling/uniaxial/other/59-BilinearOilDamper/","text":"BilinearOilDamper This command is used to construct a BilinearOilDamper material, which simulates the hysteretic response of bilinear oil dampers with relief valve. Two adaptive iterative algorithms have been implemented and validated to solve numerically the constitutive equations within a bilinear oil damper with a high-precision accuracy. uniaxialMaterial BilinearOilDamper $matTag $K $Cd < $Fr $p > < $LGap > < $NM $RelTol $AbsTol $MaxHalf > matTag integer tag identifying material K Elastic stiffness of linear spring to model the axial flexibility of an oil damper (brace and damper portion) Cd Viscous damping coefficient of an oil damper (before relief) Fr Damper relief load (default=1.0, Damper property) p Post-relief viscous damping coefficient ratio (default=1.0, linear oil damper) LGap gap length to simulate the gap length due to the pin tolerance (default=0.0: zero tolerance) NM Employed adaptive numerical algorithm (default value NM = 1; 1 = Dormand-Prince54, 2=adaptive finite difference) RelTol Tolerance for absolute relative error control of the adaptive iterative algorithm (default value 10^-6) AbsTol Tolerance for absolute error control of adaptive iterative algorithm (default value 10^-10) MaxHalf Maximum number of sub-step iterations within an integration step (default value 15) Examples: 1. Input parameters: Assume a bilinear oil damper with axial stiffness K=200.0kN/mm, viscous damping coefficient C=6.0KN/(mm/s), relief load Fr=1000.0KN, p=0.1. The input parameters for the material should be as follows: uniaxialMaterial BilinearOilDamper 1 200.0 6.0 1000 0.1 Using these properties, Figure 1c shows the hysteretic response of this damper for sinusoidal displacement increments of 12, 24 and 36mm and a frequency f = 1.0Hz. Figures 1a-1d show the damper hysteresis with varying post-relief viscous damping coefficient ratio (p=1.0, 0.5, 0.1, 0.0). Figure 1.Oil Damper with various post-relief viscous damping coefficient ratios Assume a bilinear oil damper with axial stiffness K=200.0kN/mm, viscous damping coefficient C=6.0KN/(mm/s), relief load Fr=1000.0KN, p=0.1 and LGap = 0.5mm due to the pin tolerance at the damper ends. The input parameters for the material should be as follows: uniaxialMaterial BilinearOilDamper 1 200.0 6.0 1000 0.1 0.5 Using these properties, Figure 2c shows the hysteretic response of this damper for sinusoidal displacement increments of 0.5, 1 and 1.5mm and a frequency f = 1.0Hz. Figures 2a-2d show the damper hysteresis with varying gap length (LGap = 0.0, 0.2. 0.5. 1.0 mm) Figure 2.Oil Damper with various gap lengths References : [1] Akcelyan, S., Lignos, D. G., Hikino, T. (2018). \u201cAdaptive Numerical Method Algorithms for Nonlinear Viscous and Bilinear Oil Damper Models Subjected to Dynamic Loading.\u201d Soil Dynamics and Earthquake Engineering, 113, 488-502. 1 . [2] Akcelyan, S. (2017). \u201cSeismic retrofit of existing steel tall buildings with supplemental damping devices.\u201d Ph.D. Dissertation, McGill University, Canada. Code developed by : Sarven Akcelyan & Prof. Dimitrios G. Lignos , (McGill University)","title":"BilinearOilDamper"},{"location":"library/modeling/uniaxial/other/623-SelfCentering/","text":"SelfCentering This command is used to construct a uniaxial self-centering (flag-shaped) material object with optional non-recoverable slip behaviour and an optional stiffness increase at high strains (bearing behaviour). This material is primarily used to model a self-centering energy-dissipative (SCED) brace (Christopoulos et al., 2008) with the option to model the slippage of an external friction fuse (which causes non-recoverable deformation above a given brace strain). In practice, the external friction fuse is used to limit the amount of force in the brace (since the post-activation stiffness is generally non-zero). The bearing option is used to approximately model the effect of bolt bearing in the brace or external fuse mechanisms, which causes a steep increase in the stiffness of the brace. For self-centering energy-dissipative brace design, this bearing effect model may be used to impose a limit on slip or activation strain based on the anticipated available strain capacity of the mechanism. Note that this bearing effect is only intended to be a flag to indicate the existence of bearing; the SCED brace system should be designed such that the brace will not experience such bearing in practice. This material type could potentially be used for any comparable self-centering system that exhibits a flag-shaped hysteretic response (for example: rocking wall systems if the uniaxial material is used as a moment/rotation hysteresis). uniaxialMaterial SelfCentering $matTag $k1 $k2 $sigAct $beta < $epsSlip > < $epsBear > < rBear > matTag integer tag identifying material k1 Initial Stiffness k2 Post-Activation Stiffness (0< \\(k2&lt;\\) k1) sigAct Forward Activation Stress/Force beta Ratio of Forward to Reverse Activation Stress/Force epsSlip slip Strain/Deformation (if $epsSlip = 0, there will be no slippage) epsBear Bearing Strain/Deformation (if $epsBear = 0, there will be no bearing) rBear Ratio of Bearing Stiffness to Initial Stiffness $k1 SC1.png References Christopoulos, C., Tremblay, R., Kim, H.-J., and Lacerte, M. (2008). \u201cSelf-Centering Energy Dissipative Bracing System for the Seismic Resistance of Structures: Development and Validation\u201d Journal of Structural Engineering ASCE, 134(1), 96-107. Tremblay, R., Lacerte, M., and Christopoulos, C. (2008). \u201cSeismic Response of Multistory Buildings with Self-Centering Energy Dissipative Steel Braces\u201d Journal of Structural Engineering ASCE, 134(1), 108-120. Code Developed by: Jeff Erochko, University of Toronto","title":"SelfCentering"},{"location":"library/modeling/uniaxial/other/63-Bond%20SP01/","text":"BondSP01 This command is used to construct a uniaxial material object for capturing strain penetration effects at the column-to-footing, column-to-bridge bent caps, and wall-to-footing intersections. In these cases, the bond slip associated with strain penetration typically occurs along a portion of the anchorage length. This model can also be applied to the beam end regions, where the strain penetration may include slippage of the bar along the entire anchorage length, but the model parameters should be chosen appropriately. uniaxialMaterial Bond_SP01 $matTag $Fy $Sy $Fu $Su $b $R This model is for fully anchored steel reinforcement bars that experience bond slip along a portion of the anchorage length due to strain penetration effects, which are usually the case for column and wall longitudinal bars anchored into footings or bridge joints matTag integer tag identifying material Fy Yield strength of the reinforcement steel Sy Rebar slip at member interface under yield stress. (see NOTES below) Fu Ultimate strength of the reinforcement steel Su Rebar slip at the loaded end at the bar fracture strength b Initial hardening ratio in the monotonic slip vs. bar stress response (0.3~0.5) R Pinching factor for the cyclic slip vs. bar response (0.5~1.0) Monotonic bar stress vs. slip response as modelled in Bond_SP01 BondSPMonotonic.png Cyclic bar stress vs. slip response as modelled in Bond_SP01 BondSPCyclic.png Pinching effect represented by $R in Bond_SP01 BondSPPinching.png NOTES: Sy Rebar slip at member interface under yield stress and may be obtained from \\[ \\texttt{Sy}(\\textrm{in})=0.1\\left(\\frac{d_{b}(\\textrm{in})}{4000} \\frac{\\texttt{Fy}(\\textrm{psi})}{\\sqrt{f_{c}^{\\prime}(p s i)}}\\left(2^{*} \\texttt{alpha}+1\\right)\\right)^{1 / \\texttt{alpha}}+0.013(\\textrm{in}) \\] or BondSP_Sy2.bmp where: \\(d_b\\) is rebar diameter \\(f_y\\) is yield strength of the reinforcement steel \\(f^\\prime_c\\) is concrete compressive strength of the adjoining connection member alpha is a parameter used in the local bond-slip relation and can be taken as 0.4 in accordance with CEB-FIP Model Code 90 Model background Capturing the structural response and associated damage require accurate modeling of localized inelastic deformations occurring at the member end regions as identified by shaded areas in Figure 4. These member end deformations consist of two components: 1) the flexural deformation that causes inelastic strains in the longitudinal bars and concrete, and 2) the member end rotation, as indicated by arrows in Figure 4, due to reinforcement slip. The slip considered here is the result of strain penetration along a portion of the fully anchored bars into the adjoining concrete members (e.g., footings and joints) during the elastic and inelastic response of a structure. Ignoring the strain penetration component may appear to produce satisfactory force-displacement response of the structural system by compromising strain penetration effects with greater contribution of the flexural action at a given lateral load. However, this approach will appreciably overestimate the strains and section curvatures in the critical inelastic regions of the member, and thereby overestimate the structural damage. Figure 4: Expected inelastic regions at the column and wall ends The zero-length section element available in OpenSees may be used to accurately model the strain penetration effects (or the fixed end rotations shown in Figure 4). Zero-length section elements have been generally used for section analyses to calculate the moment corresponding to a given curvature. To model the fixed-end rotation, the zero-length section element should be placed at the intersection between the flexural member and an adjoining member representing a footing or joint as shown in Figure 5. A duplicate node is also required between a fiber-based beam-column element and the adjoining concrete element as shown in Figure 5. The translational degree-of-freedom of this new node (i.e., node j in Figure 5) should be constrained to the other node (i.e., node i in Figure 5) to prevent sliding of the beam-column element under lateral loads because the shear resistance is not included in the zero-length section element. Figure 5: Adding a zero-length section element to a beam-column element The zero-length section element in OpenSees is assumed to have a unit length such that the element deformations (i.e., elongation and rotation) are equal to the section deformations (i.e., axial strain and curvature). The material model for the steel fibers in the zero-length section element represents the bar slip instead of strain for a given bar stress. The uniaxial material model Bond_SP01 is developed for steel fibers in the zero-length section elements. Note on Material Model for Concrete Fibers Similar to the model proposed for the steel fibers, a material model describing the monotonic response and hysteretic rules is also required for the concrete fibers. The combination of using the zero-length section element and enforcing the plane section assumption at the end of a flexural member impose high deformations to the extreme concrete fibers in the zero-length element. These deformations would likely correspond to concrete compressive strains significantly greater than the strain capacity stipulated by typical confined concrete models. Such high compressive strains at the end of flexural members are possible because of additional confinement effects expected from the adjoining members and because of complex localized deformation at the member end. Without further proof, it is suggested that the concrete fibers in the zero-length section element follow a concrete model in OpenSees (e.g., Concrete02). To accommodate the large deformations expected to the extreme concrete fibers in the zero-length element, this concrete model may be assumed to follow a perfectly plastic behavior once the concrete strength reduces to 80% of the confined compressive strength. A parametric study has indicated that the simulation results would not be very sensitive to the compressive strain chosen to trigger the perfectly plastic behavior for the concrete fibers in the zero-length section element. References Zhao, J., and S. Sritharan. (2007) Modeling of strain penetration effects in fiber-based analysis of reinforced concrete structures. ACI Structural Journal, 104(2), pp. 133-141. WEBSITE: http://www.uwm.edu/~jzhao/Bond_SP01_pages/Bond_index.html Code Developed by: Jian Zhao, University of Wisconsin, Milwakee and Sri Sritharan, Iowa State University","title":"BondSP01"},{"location":"library/modeling/uniaxial/other/73-CastFuse/","text":"CastFuse This command is used to construct a CastFuse uniaxial material. The CastFuse material simulates the hysteretic response a cast yielding fuse (CSF) for concentrically braced frames. The details of a CSF-brace are discussed in Gray et al. [1,2]. Isotropic hardening is modeled with the rules developed by Filippou et al. [3]. uniaxialMaterial Cast $matTag $n $bo $h $fy $E $L $b $Ro $cR1 $cR2 < $a1 $a2 $a3 $a4 > matTag integer tag identifying material n Number of yield fingers of the CSF-brace bo Width of an individual yielding finger at its base of the CSF-brace h Thickness of an individual yielding finger fy Yield strength of the steel material of the yielding finger E Modulus of elasticity of the steel material of the yielding finger L Height of an individual yielding finger b Strain hardening ratio Ro Parameter that controls the Bauschinger effect. Recommended Values for $Ro=between 10 to 30 cR1 Parameter that controls the Bauschinger effect. Recommended Value $cR1=0.925 cR2 Parameter that controls the Bauschinger effect. Recommended Value $cR2=0.150 a1 isotropic hardening parameter, increase of compression yield envelope as proportion of yield strength after a plastic deformation of $a2*(P<sub>p</sub>/K<sub>p</sub>) a2 isotropic hardening parameter (see explanation under $a1). (optional default = 1.0) a3 isotropic hardening parameter, increase of tension yield envelope as proportion of yield strength after a plastic deformation of $a4*(P<sub>p</sub>/K<sub>p</sub>) a4 isotropic hardening parameter (see explanation under $a3). (optional default = 1.0) Gray et al. [1] showed that the monotonic backbone curve of a CSF-brace with known properties (n, b<sub>o</sub>, h, L, fy, E) after yielding can be expressed as a close-form solution that is given by, P = P<sub>p</sub>/cos(2d/L), in which d is the axial deformation of the brace at increment i and P<sub>p</sub> is the yield strength of the CSF-brace and is given by the following expression P<sub>p</sub> = nb<sub>o</sub>h<sup>2</sup>f<sub>y</sub>/4L The elastic stiffness of the CSF-brace is given by, K<sub>p</sub> = nb<sub>o</sub>Eh<sup>3</sup>f<sub>y</sub>/6L<sup>3</sup> Examples: References : [1] Gray, M.G., Christopoulos, C., Packer, J.A., (2010). \u201cCast Steel Yielding Fuse for Concentrically Braced Frames,\u201d Proceedings of the 9th U.S. National and 10th Canadian Conference on Earthquake Engineering, July 25-29, 2010, Toronto, Ontario, Canada, paper No. 595. [2] Gray, M.G., Christopoulos, C., Packer, J.A., Lignos, D.G. (2012). \u201cDevelopment, Validation and Modeling of the New Cast Steel Yielding Brace System,\u201d Proceedings ASCE Structures Congress, March 29th-31st, Chicago, IL, USA, SEI institute. [3] Filippou, F. C., Popov, E. P., Bertero, V. V. (1983). \u201cEffects of Bond Deterioration on Hysteretic Behavior of Reinforced Concrete Joints,\u201d Report EERC 83-19, Earthquake Engineering Research Center, University of California, Berkeley. Code Developed by: Dr. Dimitrios G. Lignos, (McGill University)","title":"CastFuse"},{"location":"library/modeling/uniaxial/other/ModIMKBilin/","text":"ModIMKBilin This command is used to construct a bilin material. The bilin material simulates the modified Ibarra-Krawinkler deterioration model with bilinear hysteretic response. Note that the hysteretic response of this material has been calibrated with respect to more than 350 experimental data of steel beam-to-column connections and multivariate regression formulas are provided to estimate the deterioration parameters of the model for different connection types. These relationships were developed by Lignos and Krawinkler (2009, 2011) and have been adopted by PEER/ATC (2010). The input parameters for this component model can be computed interactively from this [link: http://resslabtools.epfl.ch/ ]. Use the module Component Model . uniaxialMaterial Bilin $matTag $K0 $as_Plus $as_Neg $My_Plus $My_Neg $Lamda_S $Lamda_C $Lamda_A $Lamda_K $c_S $c_C $c_A $c_K $theta_p_Plus $theta_p_Neg $theta_pc_Plus $theta_pc_Neg $Res_Pos $Res_Neg $theta_u_Plus $theta_u_Neg $D_Plus $D_Neg < $nFactor > matTag integer tag identifying material K0 elastic stiffness as_Plus strain hardening ratio for positive loading direction as_Neg strain hardening ratio for negative loading direction My_Plus effective yield strength for positive loading direction My_Neg effective yield strength for negative loading direction (negative value) Lamda_S Cyclic deterioration parameter for strength deterioration [E_t=Lamda_S*M_y; set Lamda_S = 0 to disable this mode of deterioration] Lamda_C Cyclic deterioration parameter for post-capping strength deterioration [E_t=Lamda_C*M_y; set Lamda_C = 0 to disable this mode of deterioration] Lamda_A Cyclic deterioration parameter for acceleration reloading stiffness deterioration (is not a deterioration mode for a component with Bilinear hysteretic response) [Input value is required, but not used; set Lamda_A = 0]. Lamda_K Cyclic deterioration parameter for unloading stiffness deterioration [E_t=Lamda_K*M_y; set Lamda_k = 0 to disable this mode of deterioration] c_S rate of strength deterioration. The default value is 1.0. c_C rate of post-capping strength deterioration. The default value is 1.0. c_A rate of accelerated reloading deterioration. The default value is 1.0. c_K rate of unloading stiffness deterioration. The default value is 1.0. theta_p_Plus pre-capping rotation for positive loading direction (often noted as plastic rotation capacity) theta_p_Neg pre-capping rotation for negative loading direction (often noted as plastic rotation capacity) (positive value) theta_pc_Plus post-capping rotation for positive loading direction theta_pc_Neg post-capping rotation for negative loading direction (positive value) Res_Pos residual strength ratio for positive loading direction Res_Neg residual strength ratio for negative loading direction (positive value) theta_u_Plus ultimate rotation capacity for positive loading direction theta_u_Neg ultimate rotation capacity for negative loading direction (positive value) D_Plus rate of cyclic deterioration in the positive loading direction (this parameter is used to create assymetric hysteretic behavior for the case of a composite beam). For symmetric hysteretic response use 1.0. D_Neg rate of cyclic deterioration in the negative loading direction (this parameter is used to create assymetric hysteretic behavior for the case of a composite beam). For symmetric hysteretic response use 1.0. nFactor elastic stiffness amplification factor, mainly for use with concentrated plastic hinge elements (optional, default = 0). ModIKModel.PNG Image from: Lignos et al. (2011) The deterioration model parameters can be calibrated based on actual experimental data of steel components. Instead, a user can determine the same parameters with predictive equations that have been developed by Lignos and Krawinkler (2009, 2011). These equations relate deterioration modelling parameters with geometric and material properties of steel components and have been developed with multivariate regression analysis after extensive calibration of a recently developed steel component database of more than 300 steel specimens (Lignos and Krawinkler 2007, 2009, 2011). References : [1] Ibarra L.F., and Krawinkler, H. (2005). \u201cGlobal collapse of frame structures under seismic excitations\u201d, Rep. No. TB 152, The John A. Blume Earthquake Engineering Center, Stanford University, Stanford, CA. [2] Ibarra L.F., Medina R. A., and Krawinkler H. (2005). \u201cHysteretic models that incorporate strength and stiffness deterioration\u201d, Earthquake Engineering and Structural Dynamics, 34(12), 1489-1511. [3] Karavasilis T.L., Ricles J.M., Sause R. (2009). \u201cImplementation of deterioration elements in OpenSEES for collapse simulations\u201d ATLSS Engineering Research Center, Rep. No. 09-11. [4] Lignos, D.G., and Krawinkler, H. (2007), \u201cA database in support of modeling of component deterioration for collapse prediction of steel frame structures\u201d, Proc. ASCE Structures Congress, Long Beach CA, SEI institute. [5] Lignos, D.G. and Krawinkler, H. (2012). \u201cSidesway collapse of deteriorating structural systems under seismic excitations,\u201d Rep.No.TB 177, The John A. Blume Earthquake Engineering Research Center, Stanford University, Stanford, CA. [electronic version: https://blume.stanford.edu/tech_reports ] [6] Lignos, D. G., Krawinkler, H. and Whittaker, A.S. (2011). \u201cPrediction and validation of sidesway collapse of two scale models of a 4-story steel moment frame\u201d, Earthquake Engineering and Structural Dynamics, EESD, Vol. 40 (7), 807-825. [7] Lignos, D.G., and Krawinkler, H. (2010). \u201cA steel database for component deterioration of tubular hollow square steel columns under varying axial load for collapse assessment of steel structures under earthquakes\u201d, Proc. 7th International Conference on Urban Earthquake Engineering (7CUEE), March 3-5, Tokyo, Japan. [8] Lignos, D.G., and Krawinkler, H. (2011). \u201cDeterioration modeling of steel components in support of collapse prediction of steel moment frames under earthquake loading\u201d, Journal of Structural Engineering, ASCE, Vol. 137 (11), 1291-1302. [9] PEER/ATC (2010). \u201cModeling and acceptance criteria for seismic design and analysis of tall buildings\u201d, PEER/ATC-72-1, prepared by the Applied Technology Council in cooperation with the Pacific Earthquake Engineering Research Center, Redwood City, CA.. [10] Lignos, D.G., Hartloper, A.R., Elkady, A.M.A., Deirlein, G.G., Hamburger, R. (2019). \u201cProposed Updates to the ASCE 41 Nonlinear Modeling Parameters for Wide-Flange Steel Columns in Support of Performance-Based Seismic Engineering\u201d, Journal of Structural Engineering, 04019083, https://doi.org/10.1061/(ASCE)ST.1943-541X.0002353 . Code Developed by: Dr. Dimitrios G. Lignos, McGill University and was implemented by Dr. Theodore Karavasilis, Oxford University nFactor Implemented by: by Dr. Andre R. Barbosa, Oregon State University and Mr. Filipe L.A. Ribeiro, Universidade Nova de Lisboa","title":"ModIMKBilin"},{"location":"library/modeling/uniaxial/other/ModIMKPeakOriented/","text":"ModIMKPeakOriented This command is used to construct a ModIMKPeakOriented material. This material simulates the modified Ibarra-Medina-Krawinkler deterioration model with peak-oriented hysteretic response. Note that the hysteretic response of this material has been calibrated with respect to 200 experimental data of RC beams in order to estimate the deterioration parameters of the model. This information was developed by Lignos and Krawinkler (2012). NOTE: before you use this material make sure that you have downloaded the latest OpenSees version. . A youtube video presents a summary of this model including the way to be used within openSees (http://youtu.be/YHBHQ-xuybE). uniaxialMaterial ModIMKPeakOriented $matTag $K0 $as_Plus $as_Neg $My_Plus $My_Neg $Lamda_S $Lamda_C $Lamda_A $Lamda_K $c_S $c_C $c_A $c_K $theta_p_Plus $theta_p_Neg $theta_pc_Plus $theta_pc_Neg $Res_Pos $Res_Neg $theta_u_Plus $theta_u_Neg $D_Plus $D_Neg matTag integer tag identifying material K0 elastic stiffness as_Plus strain hardening ratio for positive loading direction as_Neg strain hardening ratio for negative loading direction My_Plus effective yield strength for positive loading direction My_Neg effective yield strength for negative loading direction (negative value) Lamda_S Cyclic deterioration parameter for strength deterioration [E_t=Lamda_S*M_y, see Lignos and Krawinkler (2011); set Lamda_S = 0 to disable this mode of deterioration] Lamda_C Cyclic deterioration parameter for post-capping strength deterioration [E_t=Lamda_C*M_y, see Lignos and Krawinkler (2011); set Lamda_C = 0 to disable this mode of deterioration] Lamda_A Cyclic deterioration parameter for accelerated reloading stiffness deterioration [E_t=Lamda_A*M_y, see Lignos and Krawinkler (2011); set Lamda_A = 0 to disable this mode of deterioration] Lamda_K Cyclic deterioration parameter for unloading stiffness deterioration [E_t=Lamda_K*M_y, see Lignos and Krawinkler (2011); set Lamda_K = 0 to disable this mode of deterioration] c_S rate of strength deterioration. The default value is 1.0. c_C rate of post-capping strength deterioration. The default value is 1.0. c_A rate of accelerated reloading deterioration. The default value is 1.0. c_K rate of unloading stiffness deterioration. The default value is 1.0. theta_p_Plus pre-capping rotation for positive loading direction (often noted as plastic rotation capacity) theta_p_Neg pre-capping rotation for negative loading direction (often noted as plastic rotation capacity) (must be defined as a positive value) theta_pc_Plus post-capping rotation for positive loading direction theta_pc_Neg post-capping rotation for negative loading direction (must be defined as a positive value) Res_Pos residual strength ratio for positive loading direction Res_Neg residual strength ratio for negative loading direction (must be defined as a positive value) theta_u_Plus ultimate rotation capacity for positive loading direction theta_u_Neg ultimate rotation capacity for negative loading direction (must be defined as a positive value) D_Plus rate of cyclic deterioration in the positive loading direction (this parameter is used to create assymetric hysteretic behavior for the case of a composite beam). For symmetric hysteretic response use 1.0. D_Neg rate of cyclic deterioration in the negative loading direction (this parameter is used to create assymetric hysteretic behavior for the case of a composite beam). For symmetric hysteretic response use 1.0. ModIMKPeakOrientedDefinitionFigure.png Image from: Lignos and Krawinkler (2012) The deterioration model parameters can be calibrated based on actual experimental data of RC beams in terms of load - displacement or moment - rotation. Examples of such calibrations can be found in Lignos (2008) and Lignos and Krawinkler (2012). References : [1] Lignos, D.G., Krawinkler, H. (2012). \u201cDevelopment and Utilization of Structural Component Databases for Performance-Based Earthquake Engineering\u201d, Journal of Structural Engineering, ASCE, doi: 10.1061/(ASCE)ST.1943-541X.0000646. [2] Lignos, D.G., and Krawinkler, H. (2011). \u201cDeterioration modeling of steel components in support of collapse prediction of steel moment frames under earthquake loading\u201d, Journal of Structural Engineering, ASCE, Vol. 137 (11), 1291-1302. [3] Lignos, D.G. and Krawinkler, H. (2012). \u201cSidesway collapse of deteriorating structural systems under seismic excitations,\u201d Rep.No.TB 177, The John A. Blume Earthquake Engineering Research Center, Stanford University, Stanford, CA. [electronic version: https://blume.stanford.edu/tech_reports ] [4] Lignos, D.G. (2008). \u201cSidesway collapse of deteriorating structural systems under seismic excitations,\u201d Ph.D. Dissertation, Department of Civil and Environmental Engineering, Stanford University, Stanford, CA. [5] Ibarra L.F., and Krawinkler, H. (2005). \u201cGlobal collapse of frame structures under seismic excitations\u201d, Rep. No. TB 152, The John A. Blume Earthquake Engineering Center, Stanford University, Stanford, CA. [electronic version: https://blume.stanford.edu/tech_reports ] [6] Ibarra L.F., Medina R. A., and Krawinkler H. (2005). \u201cHysteretic models that incorporate strength and stiffness deterioration\u201d, Earthquake Engineering and Structural Dynamics, 34(12), 1489-1511. Code Developed by: Dr. Dimitrios G. Lignos, McGill University","title":"ModIMKPeakOriented"},{"location":"library/modeling/uniaxial/other/ModIMKPinching/","text":"ModIMKPinching This command is used to construct a ModIMKPinching material. This material simulates the modified Ibarra-Medina-Krawinkler deterioration model with pinching hysteretic response. NOTE: before you use this material make sure that you have downloaded the latest OpenSees version. A youtube video presents a summary of this model including the way to be used within openSees (http://youtu.be/YHBHQ-xuybE). uniaxialMaterial ModIMKPinching $matTag $K0 $as_Plus $as_Neg $My_Plus $My_Neg $FprPos $FprNeg $A_pinch $Lamda_S $Lamda_C $Lamda_A $Lamda_K $c_S $c_C $c_A $c_K $theta_p_Plus $theta_p_Neg $theta_pc_Plus $theta_pc_Neg $Res_Pos $Res_Neg $theta_u_Plus $theta_u_Neg $D_Plus $D_Neg matTag integer tag identifying material K0 elastic stiffness as_Plus strain hardening ratio for positive loading direction as_Neg strain hardening ratio for negative loading direction My_Plus effective yield strength for positive loading direction My_Neg effective yield strength for negative loading direction (Must be defined as a negative value) FprPos Ratio of the force at which reloading begins to force corresponding to the maximum historic deformation demand (positive loading direction) FprNeg Ratio of the force at which reloading begins to force corresponding to the absolute maximum historic deformation demand (negative loading direction) A_Pinch Ratio of reloading stiffness Lamda_S Cyclic deterioration parameter for strength deterioration [E_t=Lamda_S*M_y, see Lignos and Krawinkler (2011); set Lamda_S = 0 to disable this mode of deterioration] Lamda_C Cyclic deterioration parameter for post-capping strength deterioration [E_t=Lamda_C*M_y, see Lignos and Krawinkler (2011); set Lamda_C = 0 to disable this mode of deterioration] Lamda_A Cyclic deterioration parameter for accelerated reloading stiffness deterioration [E_t=Lamda_A*M_y, see Lignos and Krawinkler (2011); set Lamda_A = 0 to disable this mode of deterioration] Lamda_K Cyclic deterioration parameter for unloading stiffness deterioration [E_t=Lamda_K*M_y, see Lignos and Krawinkler (2011); set Lamda_K = 0 to disable this mode of deterioration] c_S rate of strength deterioration. The default value is 1.0. c_C rate of post-capping strength deterioration. The default value is 1.0. c_A rate of accelerated reloading deterioration. The default value is 1.0. c_K rate of unloading stiffness deterioration. The default value is 1.0. theta_p_Plus pre-capping rotation for positive loading direction (often noted as plastic rotation capacity) theta_p_Neg pre-capping rotation for negative loading direction (often noted as plastic rotation capacity) (must be defined as a positive value) theta_pc_Plus post-capping rotation for positive loading direction theta_pc_Neg post-capping rotation for negative loading direction (must be defined as a positive value) Res_Pos residual strength ratio for positive loading direction Res_Neg residual strength ratio for negative loading direction (must be defined as a positive value) theta_u_Plus ultimate rotation capacity for positive loading direction theta_u_Neg ultimate rotation capacity for negative loading direction (must be defined as a positive value) D_Plus rate of cyclic deterioration in the positive loading direction (this parameter is used to create assymetric hysteretic behavior for the case of a composite beam). For symmetric hysteretic response use 1.0. D_Neg rate of cyclic deterioration in the negative loading direction (this parameter is used to create assymetric hysteretic behavior for the case of a composite beam). For symmetric hysteretic response use 1.0. ModIMKDefinitionFigure.png Image from: Lignos and Krawinkler (2012) The deterioration model parameters can be calibrated based on actual experimental data of RC beams in terms of load - displacement or moment - rotation. Examples of such calibrations can be found in Lignos (2008) and Lignos and Krawinkler (2012). References : [1] Lignos, D.G., Krawinkler, H. (2012). \u201cDevelopment and Utilization of Structural Component Databases for Performance-Based Earthquake Engineering\u201d, Journal of Structural Engineering, ASCE, doi: 10.1061/(ASCE)ST.1943-541X.0000646. [2] Lignos, D.G., and Krawinkler, H. (2011). \u201cDeterioration modeling of steel components in support of collapse prediction of steel moment frames under earthquake loading\u201d, Journal of Structural Engineering, ASCE, Vol. 137 (11), 1291-1302. [3] Lignos, D.G. and Krawinkler, H. (2012). \u201cSidesway collapse of deteriorating structural systems under seismic excitations,\u201d Rep.No.TB 177, The John A. Blume Earthquake Engineering Research Center, Stanford University, Stanford, CA. [electronic version: https://blume.stanford.edu/tech_reports ] [4] Lignos, D.G. (2008). \u201cSidesway collapse of deteriorating structural systems under seismic excitations,\u201d Ph.D. Dissertation, Department of Civil and Environmental Engineering, Stanford University, Stanford, CA. [5] Ibarra L.F., and Krawinkler, H. (2005). \u201cGlobal collapse of frame structures under seismic excitations\u201d, Rep. No. TB 152, The John A. Blume Earthquake Engineering Center, Stanford University, Stanford, CA. [electronic version: https://blume.stanford.edu/tech_reports ] [6] Ibarra L.F., Medina R. A., and Krawinkler H. (2005). \u201cHysteretic models that incorporate strength and stiffness deterioration\u201d, Earthquake Engineering and Structural Dynamics, 34(12), 1489-1511. Code Developed by: Dr. Dimitrios G. Lignos, McGill University","title":"ModIMKPinching"},{"location":"library/modeling/uniaxial/walls/609-SAWS/","text":"SAWS This file contains the class definition for SAWSMaterial. SAWSMaterial provides the implementation of a one-dimensional hysteretic model develeped as part of the CUREe Caltech wood frame project. uniaxialMaterial SAWS $tag $F0 $FI $DU $S0 $R1 $R2 $R3 $R4 $alph $beta matTag integer tag identifying material F0 Intercept strength of the shear wall spring element for the asymtotic line to the envelope curve F0 > FI > 0 FI Intercept strength of the spring element for the pinching branch of the hysteretic curve. (FI > 0). DU Spring element displacement at ultimate load. (DU > 0). S0 Initial stiffness of the shear wall spring element (S0 > 0). R1 Stiffness ratio of the asymptotic line to the spring element envelope curve. The slope of this line is R1 S0. (0 < R1 < 1.0). R2 Stiffness ratio of the descending branch of the spring element envelope curve. The slope of this line is R2 S0. ( R2 < 0). R3 Stiffness ratio of the unloading branch off the spring element envelope curve. The slope of this line is R3 S0. ( R3 1). R4 Stiffness ratio of the pinching branch for the spring element. The slope of this line is R4 S0. ( R4 > 0). alpha Stiffness degradation parameter for the shear wall spring element. (ALPHA > 0). beta Stiffness degradation parameter for the spring element. (BETA > 0). Notes: Refer to the figure below for more information, and the reference provided at the end of this page for complete details about modeling assumptions. FolzFigure.gif Example Files: Click to download files Media:Test.tcl Media:SAWSZeroLength.tcl Example: Hysteresis TestHysteresis.jpg References Reference: Folz, B. and Filiatrault, A. (2001). \u201cSAWS - Version 1.0, A Computer Program for the Seismic Analysis of Woodframe Structures\u201d, Structural Systems Research Project Report No. SSRP-2001/09, Dept. of Structural Engineering, UCSD, La Jolla, CA . Code Developed by: Patxi Uriz, Exponent (Converted from FORTRAN code originally written by Bryan Folz)","title":"SAWS"},{"location":"library/modeling/uniaxial/walls/69-CFSSSWP/","text":"CFSSSWP This command is used to construct a uniaxialMaterial model that simulates the hysteresis response (Shear strength-lateral Displacement) of a Steel-Sheathed Cold-Formed Steel Shear Wall Panel (CFS-SWP). The hysteresis model has smooth curves and takes into account the strength and stiffness degradation, as well as pinching effect. This uniaxialMaterial gives results in Newton and Meter units, for strength and displacement, respectively. NOTE: before you use this material make sure that you have downloaded the latest OpenSees version. uniaxialMaterial CFSSSWP $tag $height $width $fuf $fyf $tf $Af $fus $fys $ts $np $ds $Vs $sc $dt $openingArea $openingLength matTag Integer identifier used to tag the material model height SWP\u2019s height (mm) width SWP\u2019s width (mm) fuf Tensile strength of framing members (MPa) fyf Yield strength of framing members (MPa) tf Framing thickness (mm) Af Framing cross section area (mm\u00b2) fus Tensile strength of steel sheet sheathing (MPa) fys Yield strength of steel sheet sheathing (MPa) ts Sheathing thickness (mm) np Sheathing number (one or two sides sheathed) ds Screws diameter (mm) Vs Screws shear strength (N) sc Screw spacing on the SWP perimeter (mm) dt Anchor bolt\u2019s diameter (mm) openingArea Total area of openings (mm\u00b2) openingLength Cumulative length of openings (mm) DESCRIPTION: The uniaxial hysteresis model of Cold-Formed Steel Shear Wall Panel (CFS-SWP) consists of three parts: backbone curves of the hysteresis loops (states 1 and 2), hysteresis criteria (unloading-reloading path: states 3 and 4) (Fig.2) and deterioration criteria. The following paragraphs will respectively introduce the terms of the three parts. Maximum lateral shear strength and the associated displacement are assessed using an analytical method for steel sheathed CFS SWP proposed by Yanari N and Yu C (2013) which takes into account a wide range of factors that affect the behaviour and strength of a CFS SWP, namely: material properties, thickness and geometry of sheathing and framing, spacing of studs, construction details such as size and spacing of sheathing-to-framing connections. The associated displacement is evaluated using the equation C2.1-1 given by AISI S213-07 code. In addition to the envelope curve, the proposed hysteresis model requires the introduction of parameters that define the strength and stiffness deterioration, as well as the pinching effect under cyclic loading. Compared to the monotonic test result, the hysteresis response of CFS SWP exhibits strength deterioration; even if the displacement associated to peak strength has not been reached yet. The stiffness deterioration of the proposed model is positively related to strength degraded degree, and is defined in a same way as the strength deterioration. In order to account for the overall lateral stiffness and strength of the SWP, an equivalent simple non-linear zeroLength element connected to rigid truss elements which transmit the force to the boundary studs that resist the uniaxial tension and compression stress is used (Fig.3). This modeling tip leads to a considerable reduction in terms of elements number constituting the CFS SWP. The boundary members form a mechanism and the lateral stiffness and strength are derived directly from the zeroLength element. The CFS SWP details, as well as a schematic representation of the finite element model are illustrated in Fig.3. Fig. 3: Cold-Formed Steel Shear Wall Panel details and equivalent OpenSees finite element model EXAMPLES: Cold-Formed Steel Steel Sheathed Shear Wall Panel examples References Smail Kechidi and Nouredine Bourahla, Deteriorating hysteresis model for cold-formed steel shear wall panel based on its physical and mechanical characteristics, Journal of Thin-Walled Structures (2016), pp.421-430. DOI:10.1016/j.tws.2015.09.022 . Smail Kechidi, Hysteresis model development for cold-formed steel shear wall panel based on physical and mechanical characteristics, Master Thesis, University of Blida 1, Algeria, 2014. Smail Kechidi and N Bourahla, Deteriorating hysteresis model for cold-formed steel shear wall panel based on physical and mechanical characteristics, OpenSees Days Portugal 2014- OPD 2014, 3-4 July 2014, Porto, Portugal. L.N. Lowes, A. Altoontash, Modelling reinforced-concrete beam-column joints subjected to cyclic loading, Journal of Structural Engineering, 129(12):1686-1697, 2003. Yanagi N, Yu C. Effective strip method for the design of cold-formed steel framed shear wall with steel sheet sheathing. Journal of Structural Engineering, ASCE 2014; 140(4). Nisreen Balh, Development of seismic design provisions for steel sheathed shear walls, Master Thesis, McGill University, Canada, 2010. Code Developed by: Smail Kechidi and Nouredine Bourahla, University of Blida 1, Algeria Images Developed by: Smail Kechidi, University of Blida 1, Algeria Authors contact: Smail Kechidi , PhD student at University of Blida 1, Algeria, s_kechidi@univ-blida.dz, skechidi@yahoo.com Nouredine Bourahla , Professor at University of Blida 1, Algeria, nbourahla@univ-blida.dz","title":"CFSSSWP"},{"location":"library/modeling/uniaxial/walls/70-CFSWSWP/","text":"CFSWSWP This command is used to construct a uniaxialMaterial model that simulates the hysteresis response (Shear strength-Lateral displacement) of a wood-sheathed cold-formed steel shear wall panel (CFS-SWP). The hysteresis model has smooth curves and takes into account the strength and stiffness degradation, as well as pinching effect. This uniaxialMaterial gives results in Newton and Meter units, for strength and displacement, respectively. NOTE: before you use this material make sure that you have downloaded the latest OpenSees version. uniaxialMaterial CFSWSWP $tag $height $width $fut $tf $Ife $Ifi $ts $np $ds $Vs $sc $nc $type $openingArea $openingLength matTag Integer identifier used to tag the material model height SWP\u2019s height (mm) width SWP\u2019s width (mm) fuf Tensile strength of framing members (MPa) tf Framing thickness (mm) Ife Moment of inertia of the double end-stud (mm4) Ifi Moment of inertia of the intermediate stud (mm4) ts Sheathing thickness (mm) np Sheathing number (one or two sides sheathed) ds Screws diameter (mm) Vs Screws shear strength (N) sc Screw spacing on the SWP perimeter (mm) nc Total number of screws located on the SWP perimeter type Integer identifier used to define wood sheathing type (DFP=1, OSB=2, CSP=3) openingArea Total area of openings (mm\u00b2) openingLength Cumulative length of openings (mm) DESCRIPTION: The uniaxial hysteresis model of Cold-Formed Steel Shear Wall Panel (CFS-SWP) consists of three parts: backbone curves of the hysteresis loops (states 1 and 2), hysteresis criteria (unloading-reloading path: states 3 and 4) (Fig.2) and deterioration criteria. The following paragraphs will respectively introduce the terms of the three parts. Maximum lateral shear strength and the associated displacement are assessed using an analytical method for wood sheathed CFS SWP proposed by Xu L and Martinez J (2007) which takes into account a wide range of factors that affect the behaviour and strength of a CFS SWP, namely: material properties, thickness and geometry of sheathing and framing, spacing of studs, construction details such as size and spacing of sheathing-to-framing connections. In addition to the envelope curve, the proposed hysteresis model requires the introduction of parameters that define the strength and stiffness deterioration, as well as the pinching effect under cyclic loading. Compared to the monotonic test result, the hysteresis response of CFS SWP exhibits strength deterioration; even if the displacement associated to peak strength has not been reached yet. The stiffness deterioration of the proposed model is positively related to strength degraded degree, and is defined in a same way as the strength deterioration. In order to account for the overall lateral stiffness and strength of the SWP, an equivalent simple non-linear zeroLength element connected to rigid truss elements which transmit the force to the boundary studs that resist the uniaxial tension and compression stress is used (Fig.3). This modeling tip leads to a considerable reduction in terms of elements number constituting the CFS SWP. The boundary members form a mechanism and the lateral stiffness and strength are derived directly from the zeroLength element. The CFS SWP details, as well as a schematic representation of the finite element model are illustrated in Fig.3. Fig. 3: Cold-Formed Steel Shear Wall Panel details and equivalent OpenSees finite element model. EXAMPLES: Cold-Formed Steel Wood Sheathed Shear Wall Panel examples References Smail Kechidi and Nouredine Bourahla, Deteriorating hysteresis model for cold-formed steel shear wall panel based on its physical and mechanical characteristics, Journal of Thin-Walled Structures (2016), pp.421-430. DOI:10.1016/j.tws.2015.09.022 . Smail Kechidi, Hysteresis model development for cold-formed steel shear wall panel based on physical and mechanical characteristics, Master Thesis, University of Blida 1, Algeria, 2014. Smail Kechidi and Nouredine Bourahla, Deteriorating hysteresis model for cold-formed steel shear wall panel based on physical and mechanical characteristics, OpenSees Days Portugal 2014- Workshop on Multi-Hazard Analysis of Structures using OpenSees, Porto 3-4, Portugal, July 2014. L.N. Lowes, A. Altoontash, Modelling reinforced-concrete beam-column joints subjected to cyclic loading, Journal of Structural Engineering, 129(12):1686-1697, 2003. A.E. Branston, Y.C. Chen, F.A. Boudreault and C.A. Rogers, Testing of light-gauge steel frame wood structural panel shear walls, Canadian Journal of Civil Engineering, 33(9):561-572, 2006. J. Martinez and L. Xu, Strength and stiffness determination of shear wall panels in cold-formed steel framing, Thin-Walled Structures, 44(10):1084-1095, 2006. Code Developed by: Smail Kechidi and Nouredine Bourahla, University of Blida 1, Algeria Images Developed by: Smail Kechidi, University of Blida 1, Algeria Authors contact: Smail Kechidi , PhD student at University of Blida 1, Algeria, s_kechidi@univ-blida.dz, skechidi@yahoo.com Nouredine Bourahla , Professor at University of Blida 1, Algeria, nbourahla@univ-blida.dz","title":"CFSWSWP"},{"location":"library/modeling/uniaxial/walls/96-ConcretewBeta/","text":"ConcretewBeta \u2003\u2003This command is used to construct a uniaxial concrete material object that explicitly considers for the effect of normal (to the axis where the material object is used) strain to the behavior of the concrete in compression. The compressive stress-strain envelope, up to the peak compressive strength(unconfined or confined) is based on the Fujii concrete model (Hoshikuma et al. 1997). The material has two options regarding the strength degradation in tension: (a) tri-linear or (b) nonlinear [based on the tension stiffening relation of Stevens et al (1991)]. The softening behavior in compression is tri-linear. \u2003\u2003The model accounts for the effect of normal tensile strains on the concrete compressive behavior when used with the Truss2 or CorotTruss2 elements. See the Truss2 Element for description of how the normal strain is computed. The instantaneous stress is \\(\\beta f\\) where \\(f\\) is the computed stress and \\(\\beta\\) is the compressive stress reduction factor which depends on the normal tensile strain, \\(\\epsilon_n\\) . The relation between \\(\\epsilon_n\\) and \\(\\beta\\) (see the Biaxial Behavior Section ) is tri-linear. Default values result in \\(\\beta\\) = 1. See the Examples Section for the use of this material model in truss models for planar RC walls and a beam-truss model for a non-planar wall loaded biaxially. Reinforced concrete wall with a C-shaped section subject to multi-axial loading, described in the examples . uniaxialMaterial ConcretewBeta $matTag $fpc $ec0 $fcint $ecint $fcres $ecres $ft $ftint $etint $ftres $etres < -lambda $lambda > < -alpha $alpha > < -beta $bint $ebint $bres $ebres > < -M $M > < -E $Ec > < -conf $fcc $ecc > matTag integer tag identifying material fpc peak unconfined concrete compressive strength* ec0 compressive strain corresponding to unconfined concrete compressive strength* fcint, ecint intermediate stress-strain point for compression post-peak envelope* fcres, ecres residual stress-strain point for compression post-peak envelope* ftint tensile strength of concrete ftint, etint intermediate stress-strain point for tension softening envelope ftres, etres residual stress-strain point for tension softening envelope Optional: lambda controls the path of unloading from compression strain (default 0.5) alpha controls the path of unloading from tensile strain (default 1) bint ebint intermediate \\(\\beta\\) -strain point for for biaxial effect (default 1 and 0, respectively) bres ebres residual \u03b2-strain point for for biaxial effect (default 1 and 0, respectively) M factor for Stevens et al. (1991) tension stiffening (default 0; see Note 2) Ec initial stiffness (default 2* fpc / ec0 ; see Note 3) fcc ecc confined concrete peak compressive stress and corresponding strain* (see Eq. 1) Notes Parameters of concrete in compression should be specified as negative values. For non-zero M , the tension stiffening behavior will govern the post-peak tension envelope. Tri-linear tension softening parameters ftint, etint, ftres, etres will have no effect, but dummy values must be specified. Value of Ec must be between fpc / ec0 and 2* fpc / ec0 otherwise the closest value will be assigned. Implementation thumb|upright=2.5|Equation 1. \\[ \\boldsymbol{E} \\boldsymbol{u}= \\texttt{ lambda } \\cdot\\left(\\frac{f}{\\varepsilon}\\right)+(1- \\texttt{ lambda }) \\cdot \\texttt{Ec} \\] thumb|upright=1.8|Equation 3. Uniaxial Behavior \u2003\u2003Figure 1 shows the compression and tension envelopes and the input parameters. The confined concrete envelope is defined by Equation 1 up to strain ecc . The default values of fcc and ecc are equal to fpc and ec0 , respectively, for an an unconfined behavior. Following this region, the compression envelope is tri-linear and passes through the points ( ecint , fcint ) and ( ecres , fcres ) in that order. For compression strains larger than ecres , the residual stress is fcres . \u2003\u2003For compression strain, the slope of the unloading branch is defined by Equation 2. After reaching zero stress, the material reloads linearly to the point with the largest tensile strain that occurred before. \u2003\u2003The tension envelope is linear until it reaches ft . If the tension stiffening parameter M is not specified, the tension envelope after reaching ft is tri-linear and passes through the points ( etint , ftint ) and ( etres , ftres ) in that order. For tensile strains larger than etres , the residual stress is fcres . \u2003\u2003If M is specified, the nonlinear tension stiffening behavior defined by Equation 3. It is suggested that M = (75 mm)* \\(\\rho_\\ell\\) / d b where \\(\\rho_\\ell\\) is the steel ratio in the direction parallel to the material direction and d b is the bar diameter in mm. \u2003\u2003The material unloads from tension strain using a slope of Ec . After reaching zero stress, the material targets the point (0, - alpha ft ). Thereafter, the material loads linearly to the point where the peak compressive strain previously occurred. In the case where the slope leading to this target point is less than that for the point (0, - alpha ft ), the material reloads directly to the point where peak compressive strain occurred. thumb|center|upright=4.0|alt=ConcretewBeta Figure 1 |Figure 1. ConcretewBeta material model behavior based on specified input parameters thumb|upright=2.0|alt=ConcretewBeta Figure 2 |Figure 2. Relation between the concrete compressive stress reduction factor, \\(\\beta\\) , and normal tensile strain, \\(\\epsilon_n\\) Biaxial Behavior \u2003\u2003The ConcretewBeta material model accounts for the biaxial strain field on the concrete compressive behavior when used in conjunction with the Truss2 element. The Truss2 element computes the strain normal to the direction of the element (see Truss2 Element ). \u2003\u2003Figure 2 shows the relationship between concrete compressive stress reduction factor, \\(\\beta\\) , and the normal tensile strain, \\(\\epsilon_n\\) . For compressive stresses, the instantaneous stress value computed by the material is \\(\\beta f_c\\) where \\(f_c\\) is the compressive stress given by the uniaxial behavior described above. For positive (tensile) stress, \\(\\beta = 1\\) . For compressive stress, the \\(\\beta - \\epsilon_n\\) relationship is tri-linear and passes through the points (0,1), ( ebint , bint ), and ( ebres , bres ) in that order. For normal tensile strains larger than ebres , \\(\\beta\\) = bres . Examples 20-story RC core wall buildings: conventional fixed-base ( video ), rocking wall ( video ), and base isolation with rocking wall ( video ) 1200px |alt=20-story core walls 5-story coupled wall specimen with diagonal tension failure, see: Video of the simulation 5story_samplePic.png See: Truss Model - Mestyanek (1986) Squat RC Wall and Video of the simulation Mestyanek_resultsPlot2.png See: Beam-truss Model - Beyer et al. (2008) RC Wall and Video of the simulation BeyerWall_fig2.png See: Truss Model - Massone Sanchez (2005) Squat RC Wall and Video of the simulation MassoneWall_displ1a.jpg References Lu, Y., Panagiotou, M, and Koutromanos, I. (2014). \u201cThree-dimensional beam-truss model for reinforced concrete walls and slabs subjected to cyclic static or dynamic loading.\u201d Report PEER 2014/18, Pacific Earthquake Engineering Research Center, University of California, Berkeley, Berkeley, CA. Lu, Y. and Panagiotou, M. (2014). \u201cEarthquake Damage Resistant Multistory Buildings at Near Fault Regions using Base Isolation and Rocking Core Walls.\u201d 1st Huixian International Forum on Earthquake Engineering for Young Researchers, August 16-19, Harbin, China. Lu, Y., and Panagiotou, M. (2014). \u201cThree-Dimensional Nonlinear Cyclic Beam-Truss Model for Reinforced Concrete Non-Planar Walls.\u201d Journal of Structural Engineering, 140 (3), DOI: 10.1061/(ASCE)ST.1943-541X.0000852. Panagiotou, M., Restrepo, J.I., Schoettler, M., and Kim G. (2012). \u201cNonlinear cyclic truss model for reinforced concrete walls.\u201d ACI Structural Journal, 109(2), 205-214. Beyer, K., Dazio, A., and Priestley, M. J. N.(2008). \u201cQuasi-Static Cyclic Tests of Two U-Shaped Reinforced Concrete Walls.\u201d Journal of Earthquake Engineering, 12:7, 1023-1053. Hoshikuma, J., Kawashima, K., Nagaya, K., and Taylor, A. W. (1997). \u201cStress-strain model for confined reinforced concrete in bridge piers.\u201d Journal of Structural Engineering, 123(5), 624-633. Massone Sanchez, L. M. (2006). \u201cRC Wall Shear\u2014Flexure Interaction: Analytical and Experimental Responses.\u201d PhD thesis, University of California, Los Angeles, Los Angeles, CA, 398 pp. Mestyanek, J. M. (1986). \u201cThe earthquake resistance of reinforced concrete structural walls of limited ductility.\u201d ME thesis. University of Canterbury. Stevens, N. J., Uzumeri, S. M., Collins, M. P., and Will, T. G. (1991). \u201cConstitutive model for reinforced concrete finite element analysis.\u201d ACI Structural Journal, 88(1), 49-59. Code Developed by: Yuan Lu, UC Berkeley and Marios Panagiotou, UC Berkeley","title":"ConcretewBeta"},{"location":"library/modeling/uniaxial/wrapper/239-Fatigue/","text":"Fatigue The fatigue material uses a modified rainflow cycle counting algorithm to accumulate damage in a material using Miner\u2019s Rule. Element stress/strain relationships become zero when fatigue life is exhausted. uniaxialMaterial Fatigue $matTag $tag < -E0 $E0 > < -m $m > < -min $min > < -max $max > matTag integer tag identifying material tag Unique material object integer tag for the material that is being wrapped E0 Value of strain at which one cycle will cause failure (default 0.191) m Slope of Coffin-Manson curve in log-log space (default -0.458) min Global minimum value for strain or deformation (default -1e16) max Global maximum value for strain or deformation (default 1e16) Description This material model accounts for the effects of low cycle fatigue. A modified rainflow cycle counter has been implemented to track strain amplitudes. This cycle counter is used in concert with a linear strain accumulation model (i.e. Miner\u2019s Rule), based on Coffin-Manson log-log relationships describing low cycle fatigue failure. This material wraps around another material and does not influence the stress-strain (or force-deformation) relationship of the parent material. Once the Fatigue material model reaches a damage level of 1.0, the force (or stress) of the parent material becomes zero (1.0x10-8 times the call to the material). If failure is triggered in compression, the material stress is dropped at the next zero-force crossing (i.e. compression force never drops to zero). The Fatigue material assumes that each point is the last point of the history, and tracks damage with this assumption. If failure is not triggered, this pseudo-peak is discarded. The material also has the ability to trigger failure based on a maximum or minimum strain (i.e. not related to fatigue). The default for these values is set to very large numbers. The default values are calibrated parameters from low cycle fatigue tests of European steel sections Ballio and Castiglioni (1995), for more information about how material was calibrated, the user is directed to Uriz (2005). Valid recorder objects for the material are \u2018stress\u2019,\u2019tangent\u2019, \u2018strain\u2019, \u2018stressStrain\u2019, and \u2018damage\u2019. The stress, strain, and tangent recorder options must be available in the material that you are wrapping. NOTE: Here you can find more information of how to create \u2018damage\u2019 recorders: link Example: Click to Download Media:FatigueExample.tcl Media:RandomStrainHstory.tcl DamageExample.jpg References: Uriz, Patxi (2005) \u201cTowards Earthquake Resistant Design of Concentrically Braced Steel Structures,\u201d Doctoral Dissertation, Structural Engineering, Mechanics, and Materials, Department of Civil and Environmental Engineering, University of California, Berkeley, December 2005 Ballio, G., and Castiglioni, C. A. (1995). \u201cA Unified Approach for the Design of Steel Structures under Low and/or High Cycle Fatigue.\u201d Journal of Constructional Steel Research, 34, 75-101. Code Developed by: Patxi Uriz, Exponent","title":"Fatigue"},{"location":"library/modeling/uniaxial/wrapper/339-Initial%20Strain/","text":"InitialStrainMaterial This command is used to construct an Initial Strain material object. The stress-strain behaviour for this material is defined by another material. Initial Strain Material enables definition of initial strains for the material under consideration. The stress that corresponds to the initial strain will be calculated from the other material. uniaxialMaterial InitStrainMaterial $matTag $otherTag $initStrain matTag integer tag identifying material otherTag tag of the other material initStrain initial strain","title":"InitialStrainMaterial"},{"location":"library/modeling/uniaxial/wrapper/340-Initial%20Stress/","text":"Initial Stress Material This command is used to construct an Initial Stress material object. The stress-strain behaviour for this material is defined by another material. Initial Stress Material enables definition of initial stress for the material under consideration. The strian that corresponds to the initial stress will be calculated from the other material. uniaxialMaterial InitStressMaterial $matTag $otherTag $initStress matTag integer tag identifying material otherTag tag of the other material initStress initial stress","title":"Initial Stress Material"},{"location":"library/modeling/uniaxial/wrapper/386-MinMax/","text":"MinMax This command is used to construct a MinMax material object. This stress-strain behaviour for this material is provided by another material. If however the strain ever falls below or above certain threshold values, the other material is assumed to have failed. From that point on, values of 0.0 are returned for the tangent and stress. uniaxialMaterial MinMax $matTag $otherTag < -min $minStrain > < -max $maxStrain > matTag integer tag identifying material otherTag tag of the other material minStrain minimum value of strain. optional default = -1.0e16. maxStrain max value of strain. optional default = 1.0e16. Code Developed by: Micheal Scott, Oregon State.","title":"MinMax"},{"location":"library/modeling/uniaxial/wrapper/489-Parallel/","text":"Parallel This command is used to construct a parallel material object made up of an arbitrary number of previously-constructed UniaxialMaterial objects. Model.uniaxial(\u201c ParallelMaterial \u201d, name, materials) materials [materials1,materials2] , materials1 Ref(uniaxial) materials2 Ref(uniaxial) The parallel material is represented graphically as follows: In a parallel model, strains are equal and stresses and stiffnesses are additive: Code Developed by: fmk Images Developed by: Silvia Mazzoni","title":"Parallel"},{"location":"library/modeling/uniaxial/wrapper/632-Series/","text":"Series This command is used to construct a series material object made up of an arbitrary number of previously-constructed UniaxialMaterial objects. Model.uniaxial(\u201c SeriesMaterial \u201d, name, materials) materials [materials1,materials2] , materials1 Ref(uniaxial) materials2 Ref(uniaxial) The series material is represented graphically: In a series model, stresses are equal and strains and flexibilities are additive: Code Developed by: Micheal Scott, Oregon State University Images Developed by: Silvia Mazzoni","title":"Series"},{"location":"library/strategy/","text":"Numeric Libraries Solution Algorithms Iteration from the last time step to the current is done by the following methods Linear \u2013 Uses the solution at the first iteration and continues Newton \u2013 Uses the tangent at the current iteration to iterate to convergence Modified Newton \u2013 Uses the tangent at the first iteration to iterate to convergence Convergence Tests Accepting the current state of the domain as being on the converged solution path is accomplished by the following tests Norm Unbalance \u2013 Specifies a tolerance on the norm of the unbalanced load at the current iteration Norm Displacement Increment \u2013 Specifies a tolerance on the norm of the displacement increments at the current iteration Energy Increment \u2013 Specifies a tolerance on the inner product of the unbalanced load and displacement increments at the current iteration Constraint Handlers The constraints defined on the domain can be handled by the following methods Plain \u2013 Removes constrained degrees of freedom from the system of equations Lagrange \u2013 Uses the method of Lagrange multipliers to enforce constraints Penalty \u2013 Uses penalty numbers to enforce constraints Transformation \u2013 Performs a condensation of constrained degrees of freedom","title":"Numeric Libraries"},{"location":"library/strategy/Constraint_Method/357-Lagrange%20Multipliers/","text":"Lagrange This command is used to construct a LagrangeMultiplier constraint handler, which enforces the constraints by introducing Lagrange multiplies to the system of equation. The following is the command to construct a plain constraint handler: constraints Lagrange < $alphaS $alphaM > alphaS \\(\\alpha_S\\) factor on singe points. optional, default = 1.0 alphaM \\(\\alpha_M\\) factor on multi-points, optional default = 1.0; NOTES: The Lagrange multiplier method introduces new unknowns to the system of equations. The diagonal part of the system corresponding to these new unknowns is 0.0. This ensure that the system IS NOT symmetric positive definite. Theory Code Developed by: fmk","title":"Lagrange"},{"location":"library/strategy/Constraint_Method/501-Penalty%20Method/","text":"Penalty This command is used to construct a Penalty constraint handler, which enforces the constraints using the penalty method. The following is the command to construct a penalty constraint handler: constraints Penalty $alphaS $alphaM alphaS penalty \\(\\alpha_S\\) factor on single point constraints alphaM penalty \\(\\alpha_M\\) factor on multi-point constraints NOTES: The degree to which the constraints are enforced is dependent on the penalty values chosen. Problems can arise if these values are too small (constraint not enforced strongly enough) or too large (problems associated with conditioning of the system of equations). Theory Code Developed by: fmk","title":"Penalty"},{"location":"library/strategy/Constraint_Method/507-Plain%20Constraints/","text":"Plain This command is used to construct a Plain constraint handler. A plain constraint handler can only enforce homogeneous single point constraints and multi-point constraints constructed where the constraint matrix is equal to the identity ([ equalDOF ] object). The following is the command to construct a plain constraint handler: constraints Plain NOTES: As mentioned, this constraint handler can only enforce homogeneous single point constraints (fix command) and multi-pont constraints where the constraint matrix is equal to the identity (equalDOF object). Code Developed by: fmk","title":"Plain"},{"location":"library/strategy/Constraint_Method/709-Transformation%20Method/","text":"Transformation Method This command is used to construct a transformation constraint handler, which enforces the constraints using the transformation method. The following is the command to construct a transformation constraint handler: constraints Transformation NOTES: The single-point constraints when using the transformation method are done directly. The matrix equation is not manipulated to enforce them, rather the trial displacements are set directly at the nodes at the start of each analysis step. Great care must be taken when multiple constraints are being enforced as the transformation method does not follow constraints: If a node is fixed, constrain it with the fix command and not equalDOF or other type of constraint. If multiple nodes are constrained, make sure that the retained node is not constrained in any other constraint. And remember if a node is constrained to multiple nodes in your model it probably means you have messed up. Code Developed by: fmk","title":"Transformation Method"},{"location":"library/strategy/Convergence_Test/209-EnergyIncrement/","text":"EnergyIncr This command is used to construct a convergence test which uses the dot product of the solution vector and norm of the right hand side of the matrix equation to determine if convergence has been reached. The physical meaning of this quantity depends on the integrator and constraint handler chosen. Usually, though not always, it is equal to the energy unbalance in the system. The command to create a EnergyIncr test is the following: test EnergyIncr $tol $iter < $pFlag > < $nType > tol the tolerance criteria used to check for convergence iter the max number of iterations to check before returning failure condition pFlag optional print flag, default is 0. valid options: 0 0 print nothing 1 1 print information on norms each time test() is invoked 2 2 print information on norms and number of iterations at end of successful test 4 4 at each step it will print the norms and also the \\(\\Delta U\\) and \\(R(U)\\) vectors. 5 5 if it fails to converge at end of $numIter it will print an error message BUT RETURN A SUCCESSFUL test nType optional type of norm, default is 2 . ( 0 = max-norm, 1 = 1-norm, 2 = 2-norm, \u2026) NOTES: When using the Penalty method additional large forces to enforce the penalty functions exist on the right hand side, making convergence using this test usually impossible (even though solution might have converged). When Lagrange multipliers are used, the solution vector contains the Lagrange multipliers. Theory If the system of equations formed by the integrator is: \\[\\bm{K} \\Delta \\bm{u}^i = R(\\bm{u}^i)\\] This integrator is testing: \\[ \\Delta U^i R(U^i) < \\text{tol} \\!\\] Code Developed by: fmk","title":"EnergyIncr"},{"location":"library/strategy/Convergence_Test/433-NormDisplacementIncrement/","text":"NormDispIncr This command is used to construct a convergence test which uses the norm of the left hand side solution vector of the matrix equation to determine if convergence has been reached. What the solution vector of the matrix equation is depends on integrator and constraint handler chosen. Usually, though not always, it is equal to the displacement increments that are to be applied to the model. The command to create a NormDispIncr test is the following: test NormDispIncr $tol $iter < $pFlag > < $nType > tol the tolerance criteria used to check for convergence iter the max number of iterations to check before returning failure condition pFlag optional print flag, default is 0. valid options: 0 print nothing 1 print information on norms each time test() is invoked 2 print information on norms and number of iterations at end of successful test 4 at each step it will print the norms and also the \\(\\Delta U\\) and \\(R(U)\\) vectors. 5 if it fails to converge at end of $numIter it will print an error message BUT RETURN A SUCCESSFUL test nType optional type of norm, default is 2. (0 = max-norm, 1 = 1-norm, 2 = 2-norm, \u2026) NOTES: When using the Lagrange method to enforce the constraints, the Lagrange multipliers appear in the solution vector. Theory If the system of equations formed by the integrator is: \\[K \\Delta U^i = R(U^i)\\,\\!\\] This integrator is testing: \\[\\parallel \\Delta U^i \\parallel < \\text{tol} \\] Code Developed by: fmk","title":"NormDispIncr"},{"location":"library/strategy/Convergence_Test/434-NormUnbalance/","text":"NormUnbalance This command is used to construct a convergence test which uses the norm of the right hand side of the matrix equation to determine if convergence has been reached. What the right-hand-side of the matrix equation is depends on integrator and constraint handler chosen. Usually, though not always, it is equal to the unbalanced forces in the system. The command to create a NormUnbalance test is the following: test NormUnbalance $tol $iter < $pFlag > < $nType > tol the tolerance criteria used to check for convergence iter the max number of iterations to check before returning failure condition pFlag optional print flag, default is 0. valid options: 0 print nothing 1 print information on norms each time test() is invoked 2 print information on norms and number of iterations at end of successful test 4 at each step it will print the norms and also the \\(\\Delta U\\) and \\(R(U)\\) vectors. 5 if it fails to converge at end of $numIter it will print an error message BUT RETURN A SUCEESSFULL test nType optional type of norm, default is 2. (0 = max-norm, 1 = 1-norm, 2 = 2-norm, \u2026) NOTES: When using the Penalty method additional large forces to enforce the penalty functions exist on the right hand side, making convergence using this test usually impossible (even though solution might have converged). Theory If the system of equations formed by the integrator is: \\[K \\Delta U^i = R(U^i)\\,\\!\\] This integrator is testing: \\[\\parallel R(U^i) \\parallel < \\text{tol} \\!\\] Code Developed by: fmk","title":"NormUnbalance"},{"location":"library/strategy/Convergence_Test/588-RelativeEnergyIncrement/","text":"RelativeEnergyIncr This command is used to construct a convergence test which uses the dot product of the solution vector and norm of the right hand side of the matrix equation to determine if convergence has been reached. The physical meaning of this quantity depends on the integrator and constraint handler chosen. Usually, though not always, it is equal to the energy unbalance in the system. The test is relatively to the first dot product computed for each step. The command to create a EnergyIncr test is the following: test RelativeEnergyIncr $tol $iter < $pFlag > < $nType > tol the tolerance criteria used to check for convergence iter the max number of iterations to check before returning failure condition pFlag optional print flag, default is 0. valid options: 0 print nothing 1 print information on norms each time test() is invoked 2 print information on norms and number of iterations at end of successfull test 4 at each step it will print the norms and also the \\(\\Delta U\\) and \\(R(U)\\) vectors. 5 if it fails to converge at end of $numIter it will print an error message BUT RETURN A SUCEESSFULL test nType optional type of norm, default is 2. (0 = max-norm, 1 = 1-norm, 2 = 2-norm, \u2026) NOTES: When using the Penalty method additional large forces to enforce the penalty functions exist on the right had side, making convergence using this test usually impossible (even though solution might have converged). When Lagrange multipliers are used, the solution vector contains the Lagrange multiplies. Theory If the system of equations formed by the integrator is: \\[K \\Delta U^i = R(U^i)\\,\\!\\] This integrator is testing: \\[ \\frac{\\Delta U^i R(U^i)}{\\Delta U^0 R(U^0)} < \\text{tol} \\!\\] Code Developed by: fmk","title":"RelativeEnergyIncr"},{"location":"library/strategy/Convergence_Test/589-RelativeNormDisplacementIncrement/","text":"RelativeNormDispIncr This command is used to construct a convergence test which uses the relative of the solution vector of the matrix equation to determine if convergence has been reached. What the solution vector of the matrix equation is depends on integrator and constraint handler chosen. Usually, though not always, it is equal to the displacement increments that are to be applied to the model. The command to create a RelativeNormDispIncr test is the following: test RelativeNormDispIncr $tol $iter < $pFlag > < $nType > tol the tolerance criteria used to check for convergence iter the max number of iterations to check before returning failure condition pFlag optional print flag, default is 0. valid options: 0 print nothing 1 print information on norms each time test() is invoked 2 print information on norms and number of iterations at end of successful test 4 at each step it will print the norms and also the \\(\\Delta U\\) and \\(R(U)\\) vectors. 5 if it fails to converge at end of $numIter it will print an error message BUT RETURN A SUCCESSFUL test nType optional type of norm, default is 2. (0 = max-norm, 1 = 1-norm, 2 = 2-norm, \u2026) NOTES: When using the Lagrange Multipliers method additional unknown, the Lagrange multipliers, exist in the solution vector, making convergence using this test usually impossible (even though solution might have converged). \\(\\parallel \\Delta U^0 \\parallel \\!\\) is the initial solution when solveCurrentStep() is invoked on the algorithm. Sometimes there may be problems converging if \\(\\parallel \\Delta U^0 \\parallel \\!\\) is very small to being with. Theory If the system of equations formed by the integrator is: \\[K \\Delta U^i = R(U^i)\\,\\!\\] This integrator is testing: \\[\\frac{\\parallel \\Delta U^i \\parallel}{\\parallel \\Delta U^0 \\parallel} < \\text{tol} \\!\\] Code Developed by: fmk","title":"RelativeNormDispIncr"},{"location":"library/strategy/Convergence_Test/590-RelativeNormUnbalance/","text":"RelativeNormUnbalance This command is used to construct a convergence test which uses the relative norm of the right hand side of the matrix equation to determine if convergence has been reached. What the right-hand-side of the matrix equation is depends on integrator and constraint handler chosen. Usually, though not always, it is equal to the unbalanced forces in the system. The command to create a RelativeNormUnbalance test is the following: test RelativeNormUnbalance $tol $iter < $pFlag > < $nType > tol the tolerance criteria used to check for convergence iter the max number of iterations to check before returning failure condition pFlag optional print flag, default is 0. valid options: 0 print nothing 1 print information on norms each time test() is invoked 2 print information on norms and number of iterations at end of successful test 4 at each step it will print the norms and also the \\(\\Delta U\\) and \\(R(U)\\) vectors. 5 if it fails to converge at end of $numIter it will print an error message BUT RETURN A SUCCESSFUL test nType optional type of norm, default is 2. (0 = max-norm, 1 = 1-norm, 2 = 2-norm, \u2026) NOTES: When using the Penalty method additional large forces to enforce the penalty functions exist on the right hand side, making convergence using this test usually impossible (even though solution might have converged). \\(\\parallel R(U^0) \\parallel\\) is the initial unbalance seen by the system when solveCurrentStep() is invoked on the algorithm. Sometimes there may be problems converging if \\(\\parallel R(U^0) \\parallel\\) is very small to being with. Theory If the system of equations formed by the integrator is: \\[K \\Delta U^i = R(U^i)\\,\\!\\] This integrator is testing: \\[\\frac{\\parallel R(U^i) \\parallel}{\\parallel R(U^0) \\parallel} < \\text{tol} \\!\\] Code Developed by: fmk","title":"RelativeNormUnbalance"},{"location":"library/strategy/LinearSolve/","text":"Linear Systems of Equatiosn The following methods provide the solution of the linear system of equations \\(Ku = P\\) . Each solver is tailored to a specific matrix topology. Profile SPD \u2013 Direct profile solver for symmetric positive definite matrices Band General \u2013 Direct solver for banded unsymmetric matrices Band SPD \u2013 Direct solver for banded symmetric positive definite matrices Sparse General \u2013 Direct solver for unsymmetric sparse matrices Sparse Symmetric \u2013 Direct solver for symmetric sparse matrices UmfPack General \u2013 Direct UmfPack solver for unsymmetric matrices Full General \u2013 Direct solver for unsymmetric dense matrices Conjugate Gradient \u2013 Iterative solver using the preconditioned conjugate gradient method the system Tcl command is used to construct the LinearSOE and LinearSolver objects to store and solve the system of equations in the analysis.","title":"Linear Systems of Equatiosn"},{"location":"library/strategy/LinearSolve/110-Cusp/","text":"Cusp system CuSP -rTol $RTOL -mInt $MINT -pre $PRE -solver $SOLVER RTOL Set the relative tolerance. MINT Set the maximum number of iterations. PRE Set the preconditioner. can be none, diagonal, and ainv SOLVER Set the iterative solver. can be bicg, bicgstab, cg, and gmres. CuSPSolver is a linear sparse system solver based on CUSP Sparse library for OpenSEES. All the algorithms and the preconditioners supported by CUSP can be used in this solver. It can be invoked by a simple statement, which means it is very easy to use. Due to it\u2019s hardware and softawre requirements it is not built into the main OpenSees executable. Hardware Requirements: GPU: NVIDIA\u2019s GPU\u2019s with the CUDA\u2122 architecture. The list of CUDA-supported GPUs\uff1ahttps://developer.nvidia.com/cuda-gpus Software\uff1a OS: Windows XP 32/64-bit or later CUDA 5.5 Production Release CuSP 0.4.0 CuSPSolver package` Installation Download the CUDA Toolkit 5.5 package from the official website of NVIDIA (choose the package which is consistent with your OS ), and install it. NOTE currently we are using CUDA 5.5, even though CUDA is now at release 6.0 (we will upgrade once CuSP upgrades to 6.0) https://developer.nvidia.com/cuda-toolkit-55-archive Install the CuSP library download\uff1ahttps://github.com/cusplibrary/cusplibrary Download one of the .dll\u2019s we provide based on either your <a href=\u201c http://opensees.berkeley.edu/OpenSees/code/cusp/32/CuSPSolver.dll\u201d> ; 32</a> or <a href=\u201c http://opensees.berkeley.edu/OpenSees/code/cusp/64/CuSPSolver.dll\u201d> ; 64 version of windows.","title":"Cusp"},{"location":"library/strategy/LinearSolve/274-FullGeneral/","text":"FullGeneral This command is used to construct a Full General linear system of equation object. As the name implies, the class utilizes NO space saving techniques to cut down on the amount of memory used. If the matrix is of size, nxn, then storage for an nxn array is sought from memory when the program runs. When a solution is required, the Lapack routines DGESV and DGETRS are used. The following command is used to construct such a system: system FullGeneral < -det > NOTES: This type of system should almost never be used! This is because it requires a lot more memory than every other solver and takes more time in the actal solving operation than any other solver. It is required if the user is interested in looking at the global system matrix. FullGenLinLapackSolver #include <~/system_of_eqn/linearSOE/fullGEN/FullGenLinLapackSolver.h> class FullGenLinLapackSolver : public FullGenLinSolver MovableObject Solver LinearSOESolver A FullGenLinLapackSolver object can be constructed to solve a FullGenLinSOE object. It obtains the solution by making calls on the the LAPACK library. The class is defined to be a friend of the FullGenLinSOE class (see FullGenLinSOE ). Constructor Destructor Public Methods A unique class tag (defined in <classTags.h> ) is passed to the FullGenLinSolver constructor. Sets the size of iPiv to \\(0\\) , iPiv being an integer array needed by the LAPACK routines. Invokes delete on iPiv to free the memory it was allocated. First copies \\(B\\) into \\(X\\) and then solves the FullGenLinSOE system it is associated with (pointer kept by parent class) by calling the LAPACK routines dgesv() , if the system is marked as not having been factored, or dgetrs() , if system is marked as having been factored. If the solution is successfully obtained, i.e. the LAPACK routines return \\(0\\) in the INFO argument, it marks the system has having been factored and returns \\(0\\) , otherwise it prints a warning message and returns INFO. The solve process changes \\(A\\) and \\(X\\) . Is used to construct a 1d integer array, iPiv that is needed by the LAPACK solvers. It checks to see if current size of iPiv is large enough, if not it deletes the cold and creates a larger array. Returns \\(0\\) if successful, prints a warning message and returns a \\(-1\\) if not enough memory is available for this new array. Code Developed by: fmk","title":"FullGeneral"},{"location":"library/strategy/LinearSolve/35-BandGeneral/","text":"BandGeneral SOE This command is used to construct a BandGeneralSOE linear system of equation object. As the name implies, this class is used for matrix systems which have a banded profile. The matrix is stored as shown below in a 1dimensional array of size equal to the bandwidth times the number of unknowns. When a solution is required, the Lapack routines DGBSV and SGBTRS are used. The following command is used to construct such a system: system BandGeneral < -det > Theory An \\(n\\times n\\) matrix \\(A=(a_{ij})\\) is a band matrix if all matrix elements are zero outside a diagonally bordered band whose range is determined by constants k 1 and k 2 : \\[a_{i,j}=0 \\quad\\texttt{if}\\quad j<i-k_1 \\quad\\texttt{ or }\\quad j>i+k_2; \\quad k_1, k_2 \\ge 0.\\] The quantities k 1 and k 2 are the left and right half-bandwidth , respectively. The bandwidth of the matrix is k 1 + k 2 + 1 (in other words, the smallest number of adjacent diagonals to which the non-zero elements are confined). and matrices are usually stored by storing the diagonals in the band; the rest is implicitly zero. For example, 6-by-6 a matrix with bandwidth 3: \\[ \\begin{bmatrix} B_{11} & B_{12} & 0 & \\cdots & \\cdots & 0 \\\\ B_{21} & B_{22} & B_{23} & \\ddots & \\ddots & \\vdots \\\\ 0 & B_{32} & B_{33} & B_{34} & \\ddots & \\vdots \\\\ \\vdots & \\ddots & B_{43} & B_{44} & B_{45} & 0 \\\\ \\vdots & \\ddots & \\ddots & B_{54} & B_{55} & B_{56} \\\\ 0 & \\cdots & \\cdots & 0 & B_{65} & B_{66} \\end{bmatrix} \\] is stored as the 6-by-3 matrix \\[ \\begin{bmatrix} 0 & B_{11} & B_{12}\\\\ B_{21} & B_{22} & B_{23} \\\\ B_{32} & B_{33} & B_{34} \\\\ B_{43} & B_{44} & B_{45} \\\\ B_{54} & B_{55} & B_{56} \\\\ B_{65} & B_{66} & 0 \\end{bmatrix}. \\] BandGenLinLapackSolver This command is used to construct a BandGeneralSOE linear system of equation object. As the name implies, this class is used for matrix systems which have a banded profile. The matrix is stored as shown below in a one-dimensional array of size equal to the bandwidth times the number of unknowns. When a solution is required, the Lapack routines DGBSV and SGBTRS are used. Theory An \\(n\\times n\\) matrix A =( a i,j ) is a band matrix if all matrix elements are zero outside a diagonally bordered band whose range is determined by constants k 1 and k 2 : \\[a_{i,j}=0 \\quad\\texttt{if}\\quad j<i-k_1 \\quad\\texttt{ or }\\quad j>i+k_2; \\quad k_1, k_2 \\ge 0.\\] The quantities k 1 and k 2 are the left and right half-bandwidth , respectively. The bandwidth of the matrix is k 1 + k 2 + 1 (in other words, the smallest number of adjacent diagonals to which the non-zero elements are confined). and matrices are usually stored by storing the diagonals in the band; the rest is implicitly zero. For example, 6-by-6 a matrix with bandwidth 3: \\[ \\begin{bmatrix} B_{11} & B_{12} & 0 & \\cdots & \\cdots & 0 \\\\ B_{21} & B_{22} & B_{23} & \\ddots & \\ddots & \\vdots \\\\ 0 & B_{32} & B_{33} & B_{34} & \\ddots & \\vdots \\\\ \\vdots & \\ddots & B_{43} & B_{44} & B_{45} & 0 \\\\ \\vdots & \\ddots & \\ddots & B_{54} & B_{55} & B_{56} \\\\ 0 & \\cdots & \\cdots & 0 & B_{65} & B_{66} \\end{bmatrix}\\] is stored as the 6-by-3 matrix \\[\\begin{bmatrix} 0 & B_{11} & B_{12}\\\\ B_{21} & B_{22} & B_{23} \\\\ B_{32} & B_{33} & B_{34} \\\\ B_{43} & B_{44} & B_{45} \\\\ B_{54} & B_{55} & B_{56} \\\\ B_{65} & B_{66} & 0 \\end{bmatrix}.\\] C++ Interface #include <system_of_eqn/linearSOE/bandGEN/BandGenLinLapackSolver.h> class BandGenLinLapackSolver : public BandGenLinSolver MovableObject Solver LinearSOESolver A BandGenLinLapackSolver object can be constructed to solve a BandGenLinSOE object. It obtains the solution by making calls on the the LAPACK library. The class is defined to be a friend of the BandGenLinSOE class (see <BandGenLinSOE.h> ). Public Methods A unique class tag (defined in <classTags.h> ) is passed to the BandGenLinSolver constructor. Sets the size of iPiv to \\(0\\) , iPiv being an integer array needed by the LAPACK routines. Invokes delete on iPiv to free the memory allocated to store the array. The solver first copies the B vector into X and then solves the BandGenLinSOE system by calling the LAPACK routines dgbsv() , if the system is marked as not having been factored, and dgbtrs() if system is marked as having been factored. If the solution is successfully obtained, i.e. the LAPACK routines return \\(0\\) in the INFO argument, it marks the system has having been factored and returns \\(0\\) , otherwise it prints a warning message and returns INFO. The solve process changes \\(A\\) and \\(X\\) . Is used to construct a 1d integer array, iPiv that is needed by the LAPACK solvers. It checks to see if current size of iPiv is large enough, if not it deletes the cold and creates a larger array. Returns \\(0\\) if successful, prints a warning message and returns a \\(-1\\) if not enough memory is available for this new array. Code developed by: fmk","title":"BandGeneral SOE"},{"location":"library/strategy/LinearSolve/546-ProfileSPD/","text":"ProfileSPD SOE This command is used to construct a ProfileSPDSOE linear system of equation. As the name implies, this class is used for symmetric positive definite matrix systems. The matrix is stored as shown below in a 1 dimensional array with only those values below the first non-zero row in any column being stored. This is sometimes also referred to as a skyline storage scheme. The following command is used to construct such a system: system ProfileSPD THEORY: An n &times; n matrix A =( a <sub> i,j </sub>) is a symmmetric postive definite matrix if: \\[a_{i,j} = a_{j,i}\\,\\] \\(y^T A y != 0\\) for all non-zero vectors \\(y\\) with real entries ( \\(y \\in \\mathbb{R}^n\\) . In the skyline or profile storage scheme only the entries below the first no-zero row entry in any column are stored if storing by rows: The reason for this is that as no reordering of the rows is required in gaussian eleimination because the matrix is SPD, no non-zero entries will ocur in the elimination process outside the area stored. For example, a symmetric 6-by-6 matrix with a structura as shown below: \\[ \\begin{bmatrix} A_{11} & A_{12} & 0 & 0 & 0 \\\\ & A_{22} & A_{23} & 0 & A_{25} \\\\ & & A_{33} & 0 & 0 \\\\ & & & A_{44} & A_{45} \\\\ & sym & & & A_{55} \\end{bmatrix}.\\] The matrix is stored as 1-d array \\[ \\begin{bmatrix} A_{11} & A_{12} & A_{22} & A_{23} & A_{33} & A_{44} & A_{25} & 0 & A_{45} & A_{55} \\end{bmatrix}. \\] with a further array containing indices of diagonal elements: \\[ \\begin{bmatrix} 1 & 3 & 5 & 6 & 10 \\end{bmatrix}. \\] Code Developed by: fmk","title":"ProfileSPD SOE"},{"location":"library/strategy/LinearSolve/661-SparseSYM/","text":"SparseSYM This command is used to construct a sparse symmetric system of equations which uses a row-oriented solution method in the solution phase. The following command is used to construct such a system: system SparseSYM NOTES: versions upto and including 2.2.0 use SparseSPD instead of SparseSYM as the option to the system command. For backward compatability this old option continues to work. References Kincho H. Law and David R. McKay, \u201cA Parallel Row-Oriented Sparse Solution Method for Finite Element Structural Analysis,\u201d International Journal for Numerical Methods in Engineering, 36:2895-2919, 1993. Code Developed by: Jun Peng, Stanford and now GOOGLE","title":"SparseSYM"},{"location":"library/strategy/LinearSolve/672-SuperLU/","text":"SparseGEN (SuperLU) This command is used to construct a SparseGEN linear system of equation object. As the name implies, this class is used for sparse matrix systems. The solution of the sparse matrix is carried out using SuperLU . To following command is used to construct such a system: system SparseGEN References James W. Demmel and Stanley C. Eisenstat and John R. Gilbert and Xiaoye S. Li and Joseph W. H. Liu, \u201cA supernodal approach to sparse partial pivoting\u201d, SIAM J. Matrix Analysis and Applications, 20(3), 720-755, 1999. Code Developed by: fmk","title":"SparseGEN (SuperLU)"},{"location":"library/strategy/LinearSolve/731-UmfPack/","text":"UmfPack SOE This command is used to construct a sparse system of equations which uses the UmfPack solver. The following command is used to construct such a system: system UmfPack < -lvalueFact $LVALUE > (LVALUE*the number of nonzero entries) is the amount of additional memory set aside for fill in during the matrix solution, by default the LVALUE factor is 10. You only need to experiment with this if you get error messages back about LVALUE being too small. References A column pre-ordering strategy for the unsymmetric-pattern multifrontal method, T. A. Davis, ACM Transactions on Mathematical Software, vol 30, no. 2, June 2004, pp. 165-195. Algorithm 832: UMFPACK, an unsymmetric-pattern multifrontal method, T. A. Davis, ACM Transactions on Mathematical Software, vol 30, no. 2, June 2004, pp. 196-199. A combined unifrontal/multifrontal method for unsymmetric sparse matrices, T. A. Davis and I. S. Duff, ACM Transactions on Mathematical Software, vol. 25, no. 1, pp. 1-19, March 1999. An unsymmetric-pattern multifrontal method for sparse LU factorization, T. A. Davis and I. S. Duff, SIAM Journal on Matrix Analysis and Applications, vol 18, no. 1, pp. 140-158, Jan. 1997. Code Developed by: fmk","title":"UmfPack SOE"},{"location":"library/strategy/LinearSolve/BandSPDLapack/","text":"BandSPDLinLapackSolver system BandSPD This command is used to construct a BandSPDSOE linear system of equation object. As the name implies, this class is used for symmetric positive definite matrix systems which have a banded profile. The matrix is stored as shown below in a one dimensional array of size equal to the ( bandwidth /2) times the number of unknowns. When a solution is required, the Lapack routines DPBSV and DPBTRS are used. Theory An n \u00d7 n matrix A =( a i,j ) is a symmmetric banded matrix if all matrix elements are zero outside a diagonally bordered band whose range is determined by constants k : \\[ a_{i,j}=0 \\quad\\texttt{if}\\quad j<i-k \\quad\\texttt{ or }\\quad j>i+k; \\quad k \\ge 0.\\] \\[a_{i,j} = a_{j,i}\\] \\[y^T A y \\ne 0 \\] for all non-zero vectors y with real entries ( \\(y \\in \\mathbb{R}^n\\) ), The bandwidth of the matrix is k + k + 1. For example, a symmetric 6-by-6 matrix with a right bandwidth of 2: \\[\\begin{bmatrix} A_{11} & A_{12} & A_{13} & 0 & \\cdots & 0 \\\\ & A_{22} & A_{23} & A_{24} & \\ddots & \\vdots \\\\ & & A_{33} & A_{34} & A_{35} & 0 \\\\ & & & A_{44} & A_{45} & A_{46} \\\\ & sym & & & A_{55} & A_{56} \\\\ & & & & & A_{66} \\end{bmatrix}.\\] This matrix is stored as the 6-by-3 matrix: \\[\\begin{bmatrix} A_{11} & A_{12} & A_{13} \\\\ A_{22} & A_{23} & A_{24} \\\\ A_{33} & A_{34} & A_{35} \\\\ A_{44} & A_{45} & A_{46} \\\\ A_{55} & A_{56} & 0 \\\\ A_{66} & 0 & 0 \\end{bmatrix}. \\] C++ Interface A BandSPDLinLapackSolver object can be constructed to solve a BandSPDLinSOE object. It obtains the solution by making calls on the the LAPACK library. The class is defined to be a friend of the BandSPDLinSOE class. Public Methods A unique class tag (defined in <classTags.h> ) is passed to the BandSPDLinSolver constructor. Does nothing. The solver first copies the B vector into X and then solves the BandSPDLinSOE system by calling the LAPACK routines dpbsv() , if the system is marked as not having been factored, and dpbtrs() if system is marked as having been factored. If the solution is successfully obtained, i.e. the LAPACK routines return \\(0\\) in the INFO argument, it marks the system has having been factored and returns \\(0\\) , otherwise it prints a warning message and returns INFO. The solve process changes \\(A\\) and \\(X\\) . Does nothing but return \\(0\\) . Does nothing but return \\(0\\) . Does nothing but return \\(0\\) . Code Developed by: fmk","title":"BandSPDLinLapackSolver"},{"location":"library/strategy/LinearSolve/ITPACK/","text":"ITPACK Introduction For several years, we have been involved with the development and use of research-oriented programs using iterative algorithms for solving large sparse linear systems \\(Au = b\\) with positive diagonal elements. One solves for the N component unknown vector \\(u\\) given the \\({\\bf N \\times N}\\) nonsingular coefficient matrix \\(A\\) and the N component right-hand side vector \\(b\\) . The current ITPACK software package of subroutines, version 2C, provides for the use of seven alternative iterative procedures. While these subroutines are not designed as production software, they should successfully handle industrial problems of moderate size, that is, ones that fit in high-speed memory. This package is written in standard FORTRAN-66 code. It has been tested over a wide variety of computer systems using various FORTRAN compilers, including one which is FORTRAN-77 compatible (see Acknowledgements). The seven iterative solution modules are based on several basic iterative procedures, such as the Jacobi method, the Successive Overrelaxation (SOR) method, the Symmetric SOR (SSOR) method, and the RS method for the reduced system. With the exception of SOR, the convergence of these basic methods are accelerated by Chebyshev (Semi-Iteration, SI) or Conjugate Gradient (CG) acceleration. All methods are available with adaptive parameter estimation and automatic stopping tests. When using the RS method it is required that the linear system be reordered into a \u201cred-black\" 1 system ( 6? ; 12? ) . A switch to compute, if possible, the red-black indexing, permute the linear system, and permute associated vectors is provided. The successful convergence of iterative methods may be dependent on conditions that are difficult to determine in advance. For example, determining whether the coefficient matrix is positive definite can be as costly to check as solving the system. On the other hand, some conditions affecting convergence, such as positive diagonal elements, diagonal dominance, and symmetry are relatively easy to verify. For some applications, the theory may not exist to guarantee the convergence of an iterative method. The algorithms in ITPACK have been tested most extensively for linear systems arising from elliptic partial differential equations. The routines can be applied, formally, to any linear system which fits in high-speed memory. However, rapid convergence, and indeed convergence itself cannot be guaranteed unless the matrix of the system is symmetric and positive definite. Success can be expected, though not guaranteed, for mildly nonsymmetric systems. In other words, iterative methods may not converge when applied to systems with coefficient matrices which are completely general with no special properties. This article discusses the usage of ITPACK and gives a few test results. The description of the iterative methods is given in ( 4? ) . The underlying theory on which the iterative algorithms are based is described in ( 6? ) . A survey of the iterative methods in ITPACK is presented in ( 11? ) . Throughout this paper, we adopt notation such as SOR() when referring to a subroutine and A(*) for a single-dimensioned array. The residual vector is \\(b-Au^{(n)}\\) for the linear system \\(Au=b\\) and the pseudo-residual vector is \\(Gu^{(n)}+k-u^{(n)}\\) for a basic iterative method of the form \\(u^{(n+1)}=Gu^{(n)}+k\\) . The smallest and largest eigenvalues of the iteration matrix \\(G\\) are denoted \\(m(G)\\) and \\(M(G)\\) , respectively. Sparse Matrix Storage The sparse storage scheme used in ITPACK is a common one. It is a row-wise representation of the nonzero entries in the coefficient matrix of the linear system. For a nonsymmetric coefficient matrix, all of the nonzero values in each row are stored in a contiguous block of data in a real-valued array A(*) . If the matrix is symmetric, computer memory can be saved by storing only the nonzero entries in each row on and above the main diagonal. For either nonsymmetric or symmetric sparse storage, associated column numbers are stored in an integer-valued array JA(*) such that \\({\\bf JA(K)}\\) is the column number for the value \\({\\bf A(K)}\\) . A mapping vector IA(*) is used to denote the starting locations of each of the contiguous blocks. The beginning of the linear block for row \\(I\\) is given by \\({\\bf IA(I)}\\) , the end by \\({\\bf IA(I+1)-1}\\) , and its length by \\({\\bf IA(I+1)-IA(I)}\\) . Thus, IA(*) will contain \\({\\bf N+1}\\) elements to accommodate a linear system of order N . The entries for each row may be stored in any order in the contiguous block for that row. For example, the coefficient matrix \\[ \\left[\\begin{array}{ccccc} 11. & 0. & 0. & 14. & 15. \\\\ 0. & 22. & 0. & 0. & 0. \\\\ 0. & 0. & 33. & 0. & 0. \\\\ 14. & 0. & 0. & 44. & 45. \\\\ 15. & 0. & 0. & 45. & 55. \\end{array} \\right] \\] would be represented in nonsymmetric sparse storage as \\[\\begin{aligned} {\\bf A(*)} & = & [11.,14.,15.,22.,33.,14.,44.,45.,15.,45.,55.] \\\\ {\\bf JA(*)} & = & [1,4,5,2,3,1,4,5,1,4,5] \\\\ {\\bf IA(*)} & = & [1,4,5,6,9,12] \\end{aligned}\\] and in symmetric sparse storage as \\[\\begin{aligned} {\\bf A(*)} & = & [11.,14.,15.,22.,33.,44.,45.,55.] \\\\ {\\bf JA(*)} & = & [1, 4, 5, 2, 3, 4, 5, 5] \\\\ {\\bf IA(*)} & = & [1, 4, 5, 6, 8, 9]\\end{aligned}\\] Usage The user is expected to provide the coefficient matrix and the right-hand side of the linear system to be solved. The data structure for the matrix of the system is either the symmetric or nonsymmetric sparse storage format described in Section 2 . An initial guess for the solution should be provided, if one is known; otherwise, it can be set to all zero values. A series of approximations for the solution are generated iteratively until the convergence criteria is satisfied. The algorithms are performed in two work space arrays and some control over the algorithmic procedure can be obtained from switches in two parameter arrays. There are seven main subroutines in ITPACK, each corresponding to an iterative method. They are: Subroutine Method JCG() Jacobi Conjugate Gradient JSI() Jacobi Semi-Iteration SOR() Successive Overrelaxation SSORCG() Symmetric SOR Conjugate Gradient SSORSI() Symmetric SOR Semi-Iteration RSCG() Reduced System Conjugate Gradient RSSI() Reduced System Semi-Iteration and the calling sequence is: CALL \\(\\langle\\) method \\(\\rangle\\) (N, IA, JA, A, RHS, U, IWKSP, NW, WKSP, IPARM, RPARM, IER) where the parameters are defined in the following. Here \u201cinput\" means that the subroutine expects the user to provide the necessary input data and\u201doutput\" means that the routine passes back information in the variable or array indicated. All parameters are linear arrays except variables N , NW , and IER . Moreover, all parameters may be altered by the subroutine call except variables N and NW . (See Section 7 for additional details.) N is the order of the linear system. [integer; input$$ IA(*) is a vector of length \\({\\bf N+1}\\) used in the sparse matrix storage format. It contains the row pointers into JA(*) and A(*) . [integer array; input$$ JA(*) is a vector of length NZ (defined in A(*) below) used in the sparse matrix storage format. It contains the column numbers for the corresponding entries in A(*) . [integer array; input$$ A(*) is a vector of length NZ used in the sparse matrix storage format. It contains the nonzero entries of the coefficient matrix with positive diagonal elements. ( NZ is the number of nonzero entries in the upper triangular part of the coefficient matrix when symmetric storage is used and is the total number of nonzeros when nonsymmetric storage is used.) [real array; input$$ RHS(*) is a vector of length N containing the right-hand side of the linear system. [real array; input$$ U(*) is a vector of length N containing the initial guess to the solution of the linear system on input and the latest approximate solution on output. [real array; input/output$$ IWKSP(*) is a vector of length \\({\\bf 3*N}\\) used for integer workspace. When reindexing for red-black ordering, the first N locations contain on output the permutation vector for the red-black indexing, the next N locations contain its inverse, and the last N are used for integer workspace. 2 [integer array; output$$ NW is a scalar. On input, NW is the available length for WKSP(*) . On output, IPARM(8) is the actual amount used (or needed). [integer; input$$ WKSP(*) is a vector used for real working space whose length depends on the iterative method being used. It must be at least NW entries long. (See the table near the end of this section for the required amount of workspace for each method.) [real array$$ IPARM(*) is a vector of length 12 used to initialize various integer and logical parameters. Default values may be set by calling subroutine DFAULT() described below. On output, IPARM(*) contains the values of the parameters that were changed. (Further details are given later in this section.) [integer array; input/output$$ RPARM(*) is a vector of length 12 used to initialize various real parameters on input. Default values may be set by calling subroutine DFAULT() described below. On output, RPARM(*) contains the final values of the parameters that were changed. (Further details are given later in this section.) [real array; input/output$$ IER is the error flag which is set to zero for normal convergence and to a nonzero integer when an error condition is present. (See the table at the end of this section for the meaning of nonzero values.) [integer; output$$ The user may supply nondefault values for selected quantities in IPARM(*) and by first executing CALL DFAULT (IPARM, RPARM) and then assigning the appropriate nondefault values before calling a solution module of ITPACK. The iterative algorithms used in ITPACK are quite complicated and some knowledge of iterative methods is necessary to completely understand them. The interested reader should consult the technical report ( 4? ) and the book ( 6? ) for details. Important variables in this package which may change adaptively are CME (estimate of \\(M(B)\\) , the largest eigenvalue of the Jacobi matrix), SME (estimate of \\(m(B)\\) , the smallest eigenvalue of the Jacobi matrix), OMEGA (overrelaxation parameter \\(\\omega\\) for the SOR and SSOR methods), SPECR (estimated spectral radius of the SSOR matrix), BETAB (estimate for the spectral radius of the matrix \\(LU\\) where \\(L\\) and \\(U\\) are strictly lower and upper triangular matrices, respectively, such that the Jacobi matrix \\(B=L+U\\) ). The integer array IPARM(*) and real array RPARM(*) allow the user to control certain parameters which affect the performance of the iterative algorithms. Furthermore, these arrays allow the updated parameters from the automatic adaptive procedures to be communicated back to the user. The entries in IPARM(*) and RPARM(*) are: DIGIT1 is determined from the actual stopping test computed on the final iteration, whereas DIGIT2 is based on the computed residual vector using the final approximate solution after the algorithm has converged. If these values differ greatly, then either the stopping test has not worked successfully or the original system is ill-conditioned. (See ( 6? ) for additional details.) For storage of certain intermediate results, the solution modules require a real vector WKSP(*) and a corresponding variable NW indicating the available space. The length of the workspace array varies with each solution module and the maximum amount needed is given in the following table. Solution Module Maximum Length of WKSP(*) JCG() \\({\\bf 4*N + NCG}\\) JSI() \\({\\bf 2*N}\\) SOR() \\({\\bf N}\\) SSORCG() \\({\\bf 6*N + NCG}\\) SSORSI() \\({\\bf 5*N}\\) RSCG() \\({\\bf N + 3*NB + NCG}\\) RSSI() \\({\\bf N + NB}\\) The value of NCG is \\({\\bf 2*IPARM(1)}\\) for symmetric sparse storage and \\({\\bf 4*IPARM(1)}\\) for nonsymmetric sparse storage. It should be noted that the actual amount of workspace used may be somewhat less than these upper limits since some of the latter are dependent on the maximum number of iterations allowed, ITMAX , stored in IPARM(1) . Clearly, the array WKSP(*) must be dimensioned to at least the value of NW . Nonzero integer values of the error flag IER indicate that an error condition was detected. These values are listed below according to their numerical value and to the name of the routine in which the flag was set. Error Flag Meaning \\({\\bf IER} =\\) \\(0\\) , Normal convergence was obtained. \\(=\\) \\(1+{\\rm Mth}\\) , Invalid order of the system, N . \\(=\\) \\(2+{\\rm Mth}\\) , Workspace array WKSP(*) is not large enough. IPARM(8) is set to the amount of required workspace, NW . \\(=\\) \\(3+{\\rm Mth}\\) , Failure to converge in IPARM(1) iterations. RPARM(1) is reset to the last stopping value computed. \\(=\\) \\(4+{\\rm Mth}\\) , Invalid order of the black subsystem, NB . \\(=\\) \\(101\\) , A diagonal element is not positive. \\(=\\) \\(102\\) , No diagonal element in a row. \\(=\\) \\(201\\) , Red-black indexing is not possible. \\(=\\) \\(301\\) , No entry in a row of the original matrix. \\(=\\) \\(302\\) , No entry in a row of the permuted matrix. \\(=\\) \\(303\\) , Sorting error in a row of the permuted matrix. \\(=\\) \\(401\\) , A diagonal element is not positive. \\(=\\) \\(402\\) , No diagonal element in a row. \\(=\\) \\(501\\) , Failure to converge in ITMAX function evaluations. \\(=\\) \\(502\\) , Function does not change sign at the endpoints. \\(=\\) \\(601\\) , Successive iterates are not monotone increasing. JCG() , JSI() , SOR() , SSORCG() , SSORSI() , RSCG() , RSSI() assign values to Mth of 10,20,30,40,50,60,70, respectively. SBELM() , PRBNDX() , PERMAT() , SCAL() , ZBRENT() , EQRT1S() are subroutines with error flags in the 100\u2019s, 200\u2019s, 300\u2019s, 400\u2019s, 500\u2019s, 600\u2019s, respectively. These routines perform the following functions: SBELM() removes rows and columns, PRBNDX() determines the red-black indexing, SCAL() scales the system, ZBRENT() is a modified IMSL routine for computing a zero of a function which changes sign in a given interval, EQRT1S() is a modified IMSL routine for computing the largest eigenvalue of a symmetric tridiagonal matrix. 3 User-Oriented Modules The array U(*) should contain an initial approximation to the solution of the linear system before any ITPACK module is called. If the user has no information for making such a guess, then the zero vector may be used as the starting vector. The subroutine VFILL() can be used to fill a vector with a constant: CALL VFILL (N, U, VAL) fills the array U(*) of length N with the value VAL in each entry. To aid the user in using the iterative methods of ITPACK, four modules for constructing the sparse matrix storage arrays are included. The modules are: SBINI() is called at the beginning to initialize the arrays IA(*) , JA(*) , A(*) , and IWORK(*) ; SBSIJ() is called repeatedly to set the individual entries in the matrix and build a link list representation of the matrix structure; SBEND() is called at the end to restructure the link list into final sparse storage form; SBAGN() is called to return again to the link list representation if SBEND() has been called but additional elements are to be added or modified. These modules are described below. (a) Initialization: CALL SBINI (N,NZ,IA,JA,A,IWORK) Initializes IA(*) , JA(*) , A(*) , and IWORK(*) for a system of order N . IA(*) , JA(*) , and IWORK(*) are integer arrays of length at least \\({\\bf N+1}\\) , NZ , and NZ , respectively. A(*) is a real array of length at least NZ . (b) Set individual entries: CALL SBSIJ (N,NZ,IA,JA,A,IWORK,I,J,VAL,MODE,LEVEL,NOUT,IER) Inserts the value, VAL , of the (I,J) entry of the user\u2019s matrix into the link list representation for that matrix. When using symmetric sparse storage, J must be greater than or equal to I . If the (I,J) entry has already been set then MODE specifies the way in which the entry is to be treated: \\({\\bf MODE}<0\\) , Current entry value is left as is; \\(=0\\) , Current entry value is reset to VAL ; \\(>0\\) , VAL is added to the current entry value. If LEVEL is less than \\(0\\) , SBSIJ() causes no printing. If LEVEL is \\(0\\) , fatal errors messages are written to output unit number NOUT ; and if LEVEL is \\(1\\) or greater, a message is printed when SBSIJ() encounters a value it has already set with the value being reset according to the value of MODE . IER is an error parameter and returns values of Error Flag Meaning \\({\\bf IER} =\\) \\(0\\) , New (I,J) entry is established. \\(=\\) \\(700\\) , (I,J) entry is already set\u2014reset according to MODE . \\(=\\) \\(701\\) , Improper values for either I or J . \\(=\\) \\(702\\) , NZ is too small\u2014no room for the new entry. (c) Finalization: CALL SBEND (N,NZ,IA,JA,A,IWORK) Restructures the link list data structure built by SBINI() and SBSIJ() into the final data structure required by ITPACK. (d) Undo Finalization: CALL SBAGN (N,NZ,IA,JA,A,IWORK,LEVEL,NOUT,IER) Returns to link list representation for modification or addition of elements to the system. Repeated calls to SBSIJ() can then be made followed by a single call to SBEND() to close-out the sparse matrix representation. If LEVEL is less than \\(0\\) , no printing is done and if LEVEL is \\(0\\) or greater, fatal error information is written to the output unit number NOUT . IER is an error flag indicating: Error Flag Meaning \\({\\bf IER} =\\) \\(0\\) , Successful completion. \\(=\\) \\(703\\) , NZ is too small\u2014no room for the new entry. Note that SBINI() should not be called after SBAGN() is called since it would destroy the previous data. Examples Given a linear system \\(Au=b\\) with \\[A = \\left[\\begin{array}{rrrr} 4 & -1 & -1 & 0 \\\\ -1 & 4 & 0 & -1 \\\\ -1 & 0 & 4 & -1 \\\\ 0 & -1 & -1 & 4 \\end{array} \\right], \\hspace{0.3in} b = \\left[\\begin{array}{c} 6 \\\\ 0 \\\\ 0 \\\\ 6 \\end{array} \\right],\\] a program to solve this problem with an initial guess of \\(u^T = (0, 0, 0, 0)\\) using JCG() with symmetric sparse storage and printing the final approximate solution vector follows. INTEGER IA(5), JA(8), IPARM(12), IWKSP(12) REAL A(8), RHS(4), u(4), WKSP(24), RPARM(12) DATA A(1),A(2),A(3),A(4) / 4.0,-1.0,-1.0,4.0 / DATA A(5),A(6),A(7),A(8) / -1.0,4.0,-1.0,4.0 / DATA JA(1),JA(2),JA(3),JA(4) / 1,2,3,2 / DATA JA(5),JA(6),JA(7),JA(8) / 4,3,4,4 / DATA IA(1),IA(2),IA(3),IA(4),IA(5) / 1,4,6,8,9 / DATA RHS(1),RHS(2),RHS(3),RHS(4) / 6.0,0.0,0.0,6.0 / DATA N /4/, NW /24/, ITMAX /4/, LEVEL/1/, IDGTS/2/ C CALL DFAULT (IPARM, RPARM) IPARM(1) = ITMAX IPARM(2) = LEVEL IPARM(12) = IDGTS CALL VFILL (N, U, 0.E0) CALL JCG (N,IA,JA,A,RHS,U,IWKSP,NW,WKSP,IPARM,RPARM,IER) STOP END The output for this run would be BEGINNING OF ITPACK SOLUTION MODULE JCG JCG HAS CONVERGED IN 2 ITERATIONS. APPROX. NO. OF DIGITS (EST. REL. ERROR) = 14.6 (DIGIT1) APPROX. NO. OF DIGITS (EST. REL. RESIDUAL) = 14.3 (DIGIT2) SOLUTION VECTOR. 1 2 3 4 ------------------------------------------------------------- 2.00000E+00 1.00000E+00 1.00000E+00 2.00000E+00 Textbook methods such as the Jacobi (J), Gauss-Seidel (GS), Successive Overrelaxation (SOR\u2014fixed relaxation factor omega), Symmetric Successive Overrelaxation (SSOR\u2014fixed relaxation factor omega), and the RS method can be obtained from this package by resetting appropriate parameters after the subroutine DFAULT() is called but before ITPACK routines are called. Method Use Parameters J JSI() \\({\\bf IPARM(6)=0, IPARM(7)=2}\\) GS SOR() \\({\\bf IPARM(6)=0}\\) SOR\u2014fixed omega SOR() \\({\\bf IPARM(6)=0, RPARM(5)=OMEGA}\\) SSOR\u2014fixed omega SSORSI() \\({\\bf IPARM(6)=0, RPARM(5)=OMEGA}\\) RS RSSI() \\({\\bf IPARM(6)=0}\\) These methods were not included as separate routines because they are usually slower than the accelerated methods included in this package. On the black unknowns, the Cyclic Chebyshev Semi-Iterative (CCSI) method of Golub and Varga ( 2? ) gives the same result as the RSSI method. The CCSI and RSSI methods converge at the same rate, and each of them converges twice as fast as the JSI method. This is a theoretical result ( 6? ) and does not count the time involved in establishing the red-black indexing and the red-black partitioned system. Similarly, the Cyclic Conjugate Gradient (CCG) method with respect to the black unknowns, considered by Reid ( 16? ) (see also Hageman and Young ( 6? ) ), gives the same results as the RSCG method. Also, the CCG and the RSCG methods converge at the same rate, and each of them converges, theoretically, exactly twice as fast as the JCG method. Hence, the accelerated RS methods are preferable to the accelerated J methods when using a red-black indexing. Numerical Results The iterative algorithms in ITPACK have been tested over a wide class of matrix problems arising from elliptic partial differential equations with Dirichlet, Neumann, and mixed boundary conditions on arbitrary two-dimensional regions (including cracks and holes) and on rectangular three-dimensional regions ( 1? ) . Both finite-difference and finite-element procedures have been employed to obtain the linear systems. The two sample problems presented here, while simple to pose, are representative of the behavior of the ITPACK routines for more complex problems. The iterative algorithms make no use of the constant coefficients in these two problems or of the particular structure of the resulting linear system. Because the ITPACK code is not tailored to any particular class of partial differential equations or discretization procedure, but rather to sparse linear systems, it is felt that the package can be used to solve a wider class of problems. We now consider two simple partial differential equations which when discretized by finite-difference methods give rise to large sparse linear systems. We obtain the solution of each of these systems by the seven algorithms in ITPACK 2C. These numerical results should aid the user of ITPACK in determining the amount of time required when solving more complicated sparse systems. However, one should not interpret these execution times as conclusive by themselves. Variances introduced by different compilers, computer systems, and timing functions can sometimes be significant. Moreover, the number of iterations required by an iterative method is dependent on the problem being solved, the initial estimate for the solution, the parameter estimates used, and the relative accuracy requested in the stopping criterion RPARM(1) . These tests were run on the CDC Cyber 170/750 at the University of Texas with the FTN 4.8 compiler (OPT=2). To obtain representative sparse linear systems, we discretize the following two self-adjoint elliptic partial differential equations in a region with prescribed conditions on the boundary. Here \\(u_{xx}\\) , \\(u_{yy}\\) , \\(u_{zz}\\) are partial derivatives and \\(du/dn\\) is the derivative in the normal direction. \\[\\begin{aligned} u_{xx} + 2u_{yy} = 0, && \\mbox{$(x,y)$ in $S=(0,1)\\times (0,1)$} \\\\ u = 1 + xy, && \\mbox{$(x,y)$ on the boundary of $S$} \\nonumber\\end{aligned}\\] Using the standard 5-point symmetric finite-difference operator with \\(h=\\frac{1}{20}\\) , we obtain a sparse linear system with \\(1729\\) nonzero elements and \\(361\\) unknowns. \\[\\begin{aligned} u_{xx}+2u_{yy}+3u_{zz}=0, && \\mbox{$(x,y,z)$ in $C=(0,1)\\times (0,1)\\times (0,1)$} \\nonumber \\\\ \\mbox{On the boundary of C:} && \\\\ u=1, && \\mbox{$(0,y,z)$, $(x,0,z)$, or $(x,y,0)$} \\nonumber \\\\ du/dn = yz(1 + yz), && (1,y,z) \\nonumber \\\\ du/dn = xz(1 + xz), && (x,1,z) \\nonumber \\\\ du/dn = xy(1 + xy), && (x,y,1) \\nonumber \\end{aligned}\\] Using the standard 7-point symmetric finite difference operator with \\(h=\\frac{1}{7}\\) , we obtain a sparse linear system with \\(1296\\) nonzero elements and \\(216\\) unknowns. Tables 1 and 2 display the number of iterations and execution times (in seconds) for the seven methods in ITPACK 2C for the linear systems corresponding to problems (1) and (2), respectively, using symmetric sparse storage. Both the time for the iteration algorithm and the total time for the subroutine call are given. The stopping criterion was set to \\(5\\times 10^{-6}\\) . To illustrate how effective the adaptive procedures are, we have included in these tables the number of iterations and the time when the optimum iteration parameters were used with no adaptive procedures. Routine Ordering Iterations Iteration time Total time JCG() Natural 61 (61) .250 (.247) .281 (.271) Red-black 61 (61) .232 (.246) .402 (.413) JSI() Natural 108 (95) .408 (.344) .439 (.375) Red-black 108 (95) .393 (.332) .569 (.498) SOR() Natural 72 (54) .356 (.280) .368 (.307) Red-black 65 (47) .311 (.224) .469 (.411) SSORCG() Natural 17 (13) .232 (.173) .264 (.185) SSORSI() Natural 23 (22) .242 (.213) .273 (.244) RSCG() Red-black 31 (31) .104 (.117) .269 (.297) RSSI() Red-black 60 (48) .207 (.166) .358 (.344) Number of Iterations and Execution Times for Problem (1) Using Adaptive and Nonadaptive Procedures (Nonadaptive Data in Parentheses) Routine Ordering Iterations Iteration time Total time JCG() Natural 28 (28) .092 (.090) .107 (.090) Red-black 28 (28) .079 (.074) .191 (.202) JSI() Natural 64 (54) .166 (.136) .196 (.152) Red-black 64 (54) .160 (.130) .268 (.266) SOR() Natural 42 (29) .139 (.095) .150 (.110) Red-black 38 (29) .124 (.097) .236 (.231) SSORCG() Natural 15 (11) .136 (.097) .167 (.111) SSORSI() Natural 19 (15) .138 (.101) .153 (.117) RSCG() Red-black 15 (15) .032 (.051) .150 (.169) RSSI() Red-black 31 (27) .075 (.064) .186 (.196) Number of Iterations and Execution Times for Problem (2) Using Adaptive and Nonadaptive Procedures (Nonadaptive Data in Parentheses) Values corresponding to the red-black ordering with the SSOR methods are omitted from the tables since it is known that these methods are ineffective with this ordering. Since the RS methods are defined for only the red-black ordering, the table entries for these methods with the natural ordering are not included. Notes on Use Before an iterative algorithm is called to solve a linear system, the values in the array A(*) are permuted and scaled. Afterwards, these values are unpermuted and unscaled. Consequently, the values in arrays A(*) and RHS(*) may change slightly due to roundoff errors in the computer arithmetic. Moreover, since entries in each row of the linear system may be stored in any order within a contiguous block of data, the locations of elements of A(*) and of corresponding ones in JA(*) may change from those given before the permuting and unpermuting was done. The same linear system is defined by the arrays A(*) , JA(*) , and IA(*) whether or not corresponding elements in A(*) and JA(*) have changed locations within contiguous blocks. Scaling of the linear system is done as follows to reduce the number of arithmetic operations. The diagonal entries of the linear system are checked for positivity and are moved to the first N locations of the array A(*) . The nonzero off-diagonal entries of the linear system \\(Au=b\\) are scaled. The scaling involves the diagonal matrix \\(D^{\\frac{1}{2}}\\) of square roots of the diagonal entries of the linear system, that is, \\[(D^{-\\frac{1}{2}}AD^{-\\frac{1}{2}})(D^{\\frac{1}{2}}u) = (D^{-\\frac{1}{2}}b).\\] The algorithms iterate until convergence is reached based on the relative accuracy requested via the stopping criterion set in RPARM(1) for the scaled solution vector \\((D^{\\frac{1}{2}}u)\\) . Unscaling solves for \\(u\\) and returns the linear system to its original form subject to roundoff errors in the arithmetic and to possible movement of entries within contiguous blocks of data. When requested, a red-black permutation of the data will be done before and after the iterative algorithm is called. Otherwise, the linear system is used in the order it is given which we call the \u201cnatural ordering.\" The Successive Overrelaxation (SOR) method has been shown to be more effective with the red-black ordering than with the natural ordering for some problems ( 18? ) . In the SOR algorithm, the first iteration uses \\(\\omega= 1\\) and the stopping criterion is set to a large value so that at least one Gauss-Seidel iteration is performed before an approximate value for the optimum relaxation parameter is computed. Optional features of this package are red-black ordering, effective removal of rows and columns when the diagonal entry is extremely large, and error analysis. In the event that one is not using some of these options and needs additional memory space for a very large linear system, the relevant subroutines which can be replaced with dummy subroutines are as follows: red-black ordering [ PRBNDX() , PERMAT() , PERVEC() , QSORT() \\[ , removal of rows \\] SBELM() \\[ , error analysis \\[**PERROR()**\\] . The timing routine TIMER() should call a routine which returns the run time in seconds. The value of the machine relative precision is contained in the variable SRELPR which is set in the subroutine DFAULT() and in the test program. This and other default values may be permanently changed when the code is installed by changing their values in the subroutine DFAULT() . SRELPR must be changed when moving the code to another computer. If the installer of this package does not know its value, an approximate value can be determined from a simple FORTRAN program given in the comment statements of subroutine DFAULT() . Since the amount of precision may change from computer to computer, the relative accuracy requested in the stopping criterion ZETA must not be less than about \\(500\\) times the machine relative precision SRELPR . If a value of ZETA is requested that is too small then the code resets it to this value. The current default value for ZETA , \\(5 \\times 10^{-6}\\) , is set by the routine DFAULT() into RPARM(1) . The distribution tape contains the ITPACK 2C software package of \\(71\\) subprograms and a testing program MAIN() together with its \\(27\\) subprograms. The routines DFAULT() and TIMER() in ITPACK and the program MAIN() are the only ones requiring editing by the installer of the package. ITPACK can be made into a compiled program library although not all of it would normally be used in a particular application. ITPACK History The 2C version of the ITPACK codes described here is the result of several years of research and development. The development of ITPACK began in the early 1970\u2019s when Professor Garrett Birkhoff suggested that general purpose software for solving linear systems should be developed for iterative methods as well as for direct methods. Initially, prototype programs were written based on preliminary iterative algorithms involving adaptive selection of parameters and automatic stopping procedures. These programs were tested on a large set of elliptic partial differential equations over domains compatible with the subroutine REGION() ( 8? ) which superimposed a square grid over the domain. These routines were designed for solving self-adjoint elliptic partial differential equations. Next a preliminary version of ITPACK was coded in standard FORTRAN. The ITPACK routines used iterative algorithms which were refined from the prototype programs. However, these routines were designed to solve large sparse linear systems of algebraic equations instead of partial differential equations. The use of three interchangeable symmetric sparse storage modes in ITPACK 1.0 ( 3? ) allowed for great flexibility and made it possible to solve a wider class of problems than the prototype programs and to study different storage modes for iterative methods. The next version, ITPACK 2.0 ( 4? ) , was significantly faster than its predecessor since it was restricted to allow only one sparse symmetric storage format. Most of the iterative algorithms utilized in the 2.0 version of this package assume that the coefficient matrix of the linear system is symmetric positive definite. As with many packages, the need to handle a slightly larger class of problems, namely, nearly symmetric systems, soon became evident. This required adapting the routines to allow a switch for either a symmetric or nonsymmetric storage mode in ITPACK 2A ( 5? ) . Moreover, a modification of the Conjugate Gradient algorithms was developed to handle nearly symmetric systems ( 12? ) . ITPACK has been improved in the 2B version ( 14? ) by (a) writing more efficient versions of several key subroutines, (b) incorporating Basic Linear Algebra Subprograms, BLAS ( 15? ) , and (c) improving the user interface with better printing and documentation. Some additional improvements and corrections were made in the 2C version. The algorithms in ITPACK are not guaranteed to converge for all linear systems but have been shown to work successfully for a large number of symmetric and nonsymmetric systems which arise from solving elliptic partial differential equations ( 1? ; 13? ) . The numerical algorithms in ITPACK 2C correspond to those described in the appendix of technical report ( 5? ) and outlined in the book ( 7? ) . In particular, the SOR code is based on an algorithm suggested to us by L. Hageman. Various other algorithms exist for iterative methods. For example, S. Eisenstat has an implementation of the Symmetric Successive Overrelaxation preconditioned Conjugate Gradient procedure. 4 Modules based on the seven iterative routines in ITPACK have been incorporated into the elliptic partial differential equation solving package ELLPACK ( 17? ) together with all the necessary translation routines needed. The user-oriented modules described in Section 4 are not in ELLPACK. Moreover, if the ELLPACK system is not being used to generate the linear system for ITPACK, it is recommended that ITPACK be used as a stand-alone package apart from ELLPACK. Acknowledgements The authors wish to thank the referee for carefully going through the code and documentation for several different versions. Test runs were made on a variety of computer systems and helpful suggestions were made by R. Boisvert, W. Coughran, J. Dongarra, W. Dyksen, S. Eisenstat, S. Fillebrown, P. Gaffney, W. Gordon, R. Hanson, R. Lynch, J. Rice, B. Ward, and others. These suggestions and comments together with those of the referee have resulted in an improved software package. ITPACK has been tested on the following computing machines: CDC 6400, 6500, 6600, 7600, Cyber 170/750, 203, 205; Cray 1; DEC 10, 20, PDP 10, VAX 11/750, 11/780; IBM 195, 370/158, 3033; PRIME 400, 750; and others. 99 S. Eisenstat, A. George, R. Grimes, D. Kincaid, and A. Sherman. \u201cSome Comparisons of Software Packages for Large Sparse Linear Systems,\" in Advances in Computer Methods for Partial Differential Equations III , (R. Vichnevetsky and R. Stepleman, eds.), Publ. IMACS, Department of Computer Science, Rutgers University, New Brunswick, New Jersey, 08903, 1979, pp. 98-106. G. Golub and R. Varga. \u201cChebyshev Semi-Iterative Methods, Successive Overrelaxation Iterative Methods, and Second-Order Richardson Iterative Methods,\" Parts I & II, Numerische Mathematik , Vol. 3, 1961, pp. 147-168. R. Grimes, D. Kincaid, W. Macgregor, and D. Young. \u201cITPACK Report: Adaptive Iterative Algorithms Using Symmetric Sparse Storage,\" CNA-139, Center for Numerical Analysis, University of Texas, Austin, Texas, 78712, August 1978. R. Grimes, D. Kincaid, and D. Young. \u201cITPACK 2.0 User\u2019s Guide,\" CNA-150, Center for Numerical Analysis, University of Texas, Austin, Texas, 78712, August 1979. R. Grimes, D. Kincaid, and D. Young. \u201cITPACK 2A: A FORTRAN Implementation of Adaptive Accelerated Iterative Methods for Solving Large Sparse Linear Systems,\" CNA-164, Center for Numerical Analysis, University of Texas, Austin, Texas, 78712, October 1980. L. Hageman and D. Young. Applied Iterative Methods , Academic Press, New York, 1981. L. Hayes and D. Young. \u201cThe Accelerated SSOR Method for Solving Large Linear Systems: Preliminary Report,\" CNA-123, Center for Numerical Analysis, University of Texas, Austin, Texas, 78712, May 1977. D. Kincaid and R. Grimes. \u201cNumerical Studies of Several Adaptive Iterative Algorithms,\" CNA-126, Center for Numerical Analysis, University of Texas, Austin, Texas, 78712, August 1977. D. Kincaid, R. Grimes, W. Macgregor, and D. Young. \u201cITPACK\u2014Adaptive Iterative Algorithms Using Symmetric Sparse Storage,\" in Symposium on Reservoir Simulation , Society of Petroleum Engineers of AIME, 6200 North Central Expressway, Dallas, Texas, 75206, February 1979, pp. 151-160. D. Kincaid, R. Grimes, and D. Young. \u201cThe Use of Iterative Methods for Solving Large Sparse PDE-Related Linear Systems,\" Mathematics and Computers in Simulation XXI , North-Holland Publishing Company, New York, 1979, pp. 368-375. D. Kincaid and D. Young. \u201cSurvey of Iterative Methods,\" in Encyclopedia of Computer Sciences and Technology , Vol. 13 (J. Belzer, A. Holzman, and A. Kent, eds.), Marcel Dekker, Inc., New York, 1979, pp. 354-391. D. Kincaid and D. Young. \u201cAdapting Iterative Algorithms Developed for Symmetric Systems to Nonsymmetric Systems,\" in Elliptic Problem Solvers , (M. Schultz, ed.), Academic Press, New York, 1981, p. 353-359. D. Kincaid. \u201cAcceleration Parameters for a Symmetric Successive Overrelaxation Conjugate Gradient Method for Nonsymmetric Systems,\" in Advances in Computer Methods for Partial Differential Equations IV , (R. Vichnevetsky and R. Stepleman, eds.), Publ. IMACS, Department of Computer Science, Rutgers University, New Brunswick, New Jersey, 08903, 1981, pp. 294-299. D. Kincaid, R. Grimes, J. Respess, and D. Young. \u201cITPACK 2B: A FORTRAN Implementation of Adaptive Accelerated Iterative Methods for Solving Large Sparse Linear Systems,\" CNA-173, Center for Numerical Analysis, University of Texas, Austin, Texas, 78712, September 1981. C. Lawson, R. Hanson, D. Kincaid, and F. Krogh. \u201cBasic Linear Algebra Subprograms for FORTRAN Usage,\" ACM Transactions on Mathematical Software , Vol. 5., No. 3, September 1979, pp. 308-323. J. Reid. \u201cThe Use of Conjugate Gradients for Systems of Linear Equations Possessing Property A,\" SIAM Journal of Numerical Analysis , Vol. 9, 1972, pp. 325-332. J. Rice and R. Boisvert. Solving Elliptic Problems Using ELLPACK . New York: Springer-Verlag, 1985. D. Young. Iterative Solution of Large Linear Systems , Academic Press, New York, 1971. D. Young and D. Kincaid. \u201cThe ITPACK Package for Large Sparse Linear Systems,\" in Elliptic Problem Solvers , (M. Schultz, ed.), Academic Press, New York, 1981, pp. 163-185. In this ordering, the components of the unknown vector \\(u\\) are considered as either \u201cred\" or\u201dblack\". A \u201cred-black ordering\" is any ordering such that every black unknown follows all of the red unknowns. This ordering of unknowns leads to a \\(2\\times 2\\) \u201dred-black partitioning\" of the coefficient matrix, that is, a matrix of the form \\[\\left[\\begin{array}{cc} D_R & H \\\\ K & D_B \\end{array} \\right]\\] with diagonal submatrices \\(D_R\\) and \\(D_B\\) . The original linear system may require rearrangement in order to arrive at this form. \u21a9\ufe0e For the red-black ordering, the I th entry of a permutation array P(*) indicates the position J into which the I th unknown of the original system is being mapped, that is, if \\({\\bf P(I)=J}\\) then unknown I is mapped into position J . The J th entry of an inverse permutation array IP(*) indicates the position I into which the J th unknown of the permuted system must be mapped to regain the original ordering, that is, \\({\\bf IP(J)=I}\\) . \u21a9\ufe0e IMSL (International Mathematical and Statistical Libraries, Inc.), Sixth Floor NBC Bldg., 7500 Bellaire Blvd., Houston, TX, 77036. \u21a9\ufe0e Private communication. \u21a9\ufe0e","title":"ITPACK"},{"location":"library/strategy/LinearSolve/ProfileSPDDirectBlock/","text":"ProfileSPDDirectBlockSolver UNDER CONSTRUCTION #include <system_of_eqn/linearSOE/profileSPD/ProfileSPDLinDirectBlockSolver.h> class ProfileSPDLinDirectBlockSolver : public LinearSOESolver A ProfileSPDLinDirectBlockSolver object can be constructed to solve a ProfileSPDLinSOE object. It does this by direct means, using the \\(LDL^t\\) variation of the Cholesky factorization. The matrx \\(A\\) is factored one block row at a time using a right-looking approach. No BLAS or LAPACK routines are called for the factorization or subsequent substitution.","title":"ProfileSPDDirectBlockSolver"},{"location":"library/strategy/LinearSolve/ProfileSPDDirectSkypack/","text":"ProfileSPDDirectSkypack #include <system_of_eqn/linearSOE/profileSPD/ProfileSPDLinDirectSkypackSolver.h> class ProfileSPDLinDirectSkypackSolver : public LinearSOESolver A ProfileSPDLinDirectSkypackSolver object can be constructed to solve a ProfileSPDLinSOE object. It does this by direct means using the routines supplied in the SKYPACK library, a library which uses the BLAS levels 1,2 and 3 for the factorization and substitution. The routines in SKYPACK require a number of work areas: int block[3 \\[ * and *double invD\\[size\\] . In addition, to allow the use of the BLAS 2 and 3, work areas double rw[mRows x mCols \\[ *, *double tw\\[mRows x mRows\\] and int index[max(mCols,mRows)$$ are created. A unique class tag (defined in <classTags.h> ) is passed to the ProfileSPDLinSolver constructor. Sets mCols and mRows equal to \\(0\\) and does not try and allocate any memory for the work arrays. A unique class tag (defined in <classTags.h> ) is passed to the ProfileSPDLinSolver constructor. Sets mCols and mRows and allocates space in memory for the work arrays rw , tw and index . If not enough memory is available in memory, mCols and mRows is set equal to \\(0\\) and an error message is printed. Invokes delete on any work areas that have been constructed. The solver first copies the B vector into X and then solves the BandSPDLinSOE system. If the matrix has not been factored, the matrix is first factored using the SKYPACK routine skysf2() , if mCols and mRows equal \\(0\\) , or skypf2() . skysf2() is a routine which uses the BLAS level 1 routines, skypf2() is a routine which uses BLAS levels 2 and 3. If skypf2() has been called, invD is set up. Once the matrix has been factored, skyss() is called. If the solution is successfully obtained, i.e. the skyss() routine returns \\(0\\) in the INFO argument, \\(0\\) is returned, otherwise it prints a warning message and returns INFO. The solve process changes \\(A\\) and \\(X\\) . Is responsible for setting the block information required by the SKYPACK routines (block[0 \\[ =1; block\\[1\\] =size, block[2$$ =1) and for creating space for the invD work array. Returns \\(0\\) if successful, otherwise a warning message is printed and a \\(-1\\) is returned. Does nothing but return \\(0\\) . Does nothing but return \\(0\\) .","title":"ProfileSPDDirectSkypack"},{"location":"library/strategy/LinearSolve/ProfileSPDDirectThread/","text":"ProfileSPDLinDirectThread UNDER CONSTRUCTION #include <system_of_eqn/linearSOE/profileSPD/ProfileSPDLinDirectThreadSolver.h> class ProfileSPDLinDirectThreadSolver : public LinearSOESolver A ProfileSPDLinDirectThreadSolver object can be constructed to solve a ProfileSPDLinSOE object. It does this in parallel using threads by direct means, using the \\(LDL^t\\) variation of the Cholesky factorization. The matrx \\(A\\) is factored one row block at a time using a left-looking approach. Within a row block the factorization is performed by \\(NP\\) threads. No BLAS or LAPACK routines are called for the factorization or subsequent substitution. Constructor Destructor Public Methods A unique class tag (defined in <classTags.h> ) is passed to the ProfileSPDLinSolver constructor. Does nothing. The solver first copies the B vector into X. FILL IN The solve process changes \\(A\\) and \\(X\\) .","title":"ProfileSPDLinDirectThread"},{"location":"library/strategy/LinearSolve/SparseGenCol/","text":"SparseGenColLinSolver #include <system_of_eqn/linearSOE/SparseGen/SparseGenColLinSolver.h> class SparseGenColLinSolver : public LinearSOESolver SparseGenColLinSolver is an abstract class. The SparseGenColLinSolver class provides access for each subclass to the SparseGenColLinSOE object through the pointer theSOE , which is a protected pointer. Constructor ### Destructor // Public Methods The integer classTag is passed to the LinearSOESolver classes constructor. Does nothing, provided so the subclasses destructor will be called. Sets the link to the SparseGenColLinSOE object theSOE . This is the object on which the solver will perform the numerical computations.","title":"SparseGenColLinSolver"},{"location":"library/strategy/Numberer/","text":"DOF Numberers The numbering of the degrees of freedom in the domain is done by the following methods Plain \u2013 Uses the numbering provided by the user RCM (Reverse Cuthill-McKee numberer) \u2013 Renumber DOFs to minimize the matrix band-width using the Reverse Cuthill-McKee algorithm AMD Alternative minimum degree The numberer Tcl command is used to construct the DOF_Numberer object. The DOF_Numberer object determines the mapping between equation numbers and degrees-of-freedom \u2013 how degrees-of-freedom are numbered. numberer numbererType? arg1? ...","title":"DOF Numberers"},{"location":"library/strategy/Numberer/3-AMD/","text":"AMD Numberer This option is used to select the AMD degree-of-freedom numbering algorithm to provide the mapping between the degrees-of-freedom at the nodes and the equation numbers. An AMD numberer uses the approximate minimum degree scheme to order the matrix equations. The Tcl command to construct an AMD numberer is a follows: numberer AMD References Algorithm 837: AMD, An approximate minimum degree ordering algorithm, P. Amestoy, T. A. Davis, and I. S. Duff, ACM Transactions on Mathematical Software, vol 30, no. 3, Sept. 2004, pp. 381-388. An approximate minimum degree ordering algorithm, P. Amestoy, T. A. Davis, and I. S. Duff, SIAM Journal on Matrix Analysis and Applications, vol 17, no. 4, pp. 886-905, Dec. 1996. online Direct Methods for Sparse Linear Systems, T. A. Davis, SIAM, Philadelphia, Sept. 2006. Part of the SIAM Book Series on the Fundamentals of Algorithms. Code developed by: fmk","title":"AMD Numberer"},{"location":"library/strategy/Numberer/509-Plain/","text":"Plain Numberer This command is used to construct a Plain degree-of-freedom numbering object to provide the mapping between the degrees-of-freedom at the nodes and the equation numbers. A Plain numberer just takes whatever order the domain gives it nodes and numbers them, this ordering is both dependent on node numbering and size of the model. The command to construct a Plain numberer is a follows: numberer Plain NOTES: For very small problems and for the sparse matrix solvers which provide their own numbering scheme, order is not really important so plain numberer is just fine. For large models and analysis using solver types other than the sparse solvers, the order will have a major impact on performance of the solver and the plain handler is a poor choice. Code Developed by: fmk","title":"Plain Numberer"},{"location":"library/strategy/Numberer/566-RCM/","text":"RCM Numberer This command is used to construct a reverse Cuthill-McKee (RCM) degree-of-freedom numbering algorithm to provide the mapping between the degrees-of-freedom at the nodes and the equation numbers. An RCM numberer uses the reverse Cuthill-McKee scheme to order the matrix equations. The command to construct an RCM numberer is a follows: numberer RCM C++ Implementation #include <graph/numberer/RCM.h> class RCM : public GraphNumberer ; RCM is a subclass of GraphNumberer which performs the numbering using the reverse Cuthill-McKee numbering algorithm. Constructor The integer classTag is passed to the MovableObject classes constructor. The flag GPS is used to mark whether the Gibbs-Poole-Stodlmyer algorithm is used to determine a starting vertex when no starting vertex is given. Invokes the destructor on any ID object created when number() is invoked. Public Methods If the present ID used for the result is not of size equal to the number of Vertices in theGraph , it deletes the old and constructs a new ID. Starts by iterating through the Vertices of the graph setting the tmp variable of each to \\(-1\\) . The Vertices are then numbered using a depth first sort of the Graph, with each unmarked Vertex in the Graph at a distance \\(d\\) from starting Vertex being placed in the d\u2019th level set. As this is RCM, the Vertices in level set \\(n\\) are assigned a higher number than those in level set \\(n+1\\) with the tmp variable of the starting Vertex being assigned numVertices \\(-1\\) . The tags of the Vertices are placed into the ID at location given by their tmp variable. These are replaced with the ref variable of each Vertex, which is returned on successful completion. The Vertex chosen as the starting Vertex is the one whose tag is given by lastVertex . If this is \\(-1\\) or the Vertex corresponding to lastVertex does not exist then another Vertex is chosen. If the GPS flag in constructor is false the first Vertex from the Graphs VertexIter is used; if true a RCM numbering using the first Vertex from the VertexIter is performed and the Vertices in the last level set are then used to create an ID lastVertices with which number(theGraph, lastVertices) can be invoked to determine the numbering. This method is invoked to determine the best starting Vertex for a RCM using a Vertex whose tag is in lastVertices . To do a RCM numbering is performed using each of the Vertices in startVertices as the Vertex in level set \\(0\\) . The Vertex which results in the numbering with the smallest profile is chosen as the starting Vertex. The RCM algorithm outlined above is then called with this starting Vertex. int sendSelf ( Channel & theChannel , FEM_ObjectBroker & theBroker ); Returns \\(0\\) . int recvSelf ( Channel & theChannel , FEM_ObjectBroker & theBroker ); Returns \\(0\\) . References E. Cuthill and J. McKee. Reducing the bandwidth of sparse symmetric matrices In Proc. 24th Nat. Conf., pages 157-172, 1969. http://portal.acm.org/citation.cfm?id=805928 Code Developed by: fmk","title":"RCM Numberer"},{"location":"library/strategy/Solution_Algorithm/","text":"Solution Algorithm The algorithm field configures a SolutionAlgorithm object, which determines the sequence of steps taken to solve a non-linear system of equations. This object defines the sequence of operations performed by the the Integrator and the LinearSOE objects in solving the equilibrium equation \\(R(U) = 0\\) given the current state of the domain at each time step in a direct integration analysis or load increment in a static analysis. The following algorithms are available: Linear Newton Newton with Line Search Modified Newton Krylov-Newton Secant Newton BFGS Broyden","title":"Solution Algorithm"},{"location":"library/strategy/Solution_Algorithm/30-BFGS/","text":"BFGS This command is used to construct a Broyden-Fletcher-Goldfarb-Shanno (BFGS) algorithm object. The BFGS method is one of the most effective matrix-update or quasi Newton methods for iteration on a nonlinear system of equations. The method computes new search directions at each iteration step based on the initial jacobian, and subsequent trial solutions. The unlike regular Newton-Raphson does not require the tangent matrix be reformulated and refactored at every iteration, however unlike ModifiedNewton it does not rely on the tangent matrix from a previous iteration. algorithm BFGS References Denis, J.E \u201cA Brief Survey of Convergence Methods for Quasi_Newton Methods\u201d, SIAMS-AMS Proceedings, Vol (9), 185-200, 1976. K.J. Bathe and A.P.Cimento \u201cSome Practical Procedures for the Solution of Nonlinear Finte Element Equations\u201d, Computer Methods in Applied Mechanics and Engineering, Vol(22) 59-85, 1980. Theory Code Developed by: fmk","title":"BFGS"},{"location":"library/strategy/Solution_Algorithm/356-Krylov-Newton/","text":"Krylov-Newton This command is used to construct a KrylovNewton algorithm object which uses a Krylov subspace accelerator to accelerate the convergence of the modified newton method. The command is of the following form: algorithm KrylovNewton < -iterate $tangIter > < -increment $tangIncr > < -maxDim $maxDim > tangIter tangent to iterate on, options are current, initial, noTangent. default is current. tangIncr tangent to increment on, options are current, initial, noTangent. default is current maxDim max number of iterations until the tangent is reformed and the acceleration restarts (default = 3). NOTES: References Scott, M.H. and G.L. Fenves. \u201cA Krylov Subspace Accelerated Newton Algorithm: Application to Dynamic Progressive Collapse Simulation of Frames.\u201d Journal of Structural Engineering, 136(5), May 2010. DOI Code Developed by: Michael Scott, Oregon State University","title":"Krylov-Newton"},{"location":"library/strategy/Solution_Algorithm/368-Linear/","text":"Linear This command is used to construct a Linear algorithm object which takes one iteration to solve the system of equations. \\[ \\Delta U = - K^{-1}R(U),\\!\\] algorithm Linear < -initial > < -factorOnce > -secant optional flag to indicate to use secant stiffness -initial optional flag to indicate to use initial stiffness -factorOnce optional flag to indicate to only set up and factor matrix once NOTES 1) as the tangent matrix typically will not change during the analysis in case of an elastic system it is highly advantageous to use the -factorOnce option. Do not use this option if you have a nonlinear system and you want the tangent used to be actual tangent at time of the analysis step. Code Developed by: fmk","title":"Linear"},{"location":"library/strategy/Solution_Algorithm/398-Modified%20Newton/","text":"Modified Newton This command is used to construct a ModifiedNewton algorithm object, which uses the modified newton-raphson algorithm to solve the nonlinear residual equation. The command is of the following form: algorithm ModifiedNewton < -initial > -initial optional flag to indicate to use initial stiffness iterations. NOTES: Theory The theory for the ModifiedNewton method is similar to that for the Newton-Raphson method . The difference is that the tangent at the initial guess is used in the iterations, instead of the current tangent. The Modified Newmark method is thus an iterative method in which, starting at a good initial guess \\(U_0\\) we keep iterating until <math> U</math> is small enough using the following: \\[ \\Delta U = - K_0^{-1}R(U_n),\\!\\] \\[ U_{n+1} = U_n + \\Delta U\\,\\!\\] where: \\[K_0 = \\frac{\\partial R(U_0)}{\\partial U}\\,\\!\\] The advantage of this method over the regular Newton method, is that the system Jacobian is formed only once at the start of the step and factored only once if a direct solver is used. The drawback of this method is that it requires more iterations than Newton\u2019s method. note: when -initial flag is provided \\(K_0\\) is Jacobian from undeformed configuration. Code Developed by: fmk","title":"Modified Newton"},{"location":"library/strategy/Solution_Algorithm/417-Newton/","text":"Newton The NewtonRaphson algorithm uses the Newton-Raphson algorithm to solve the nonlinear residual equation. The Newton-Raphson method is the most widely used and most robust method for solving nonlinear algebraic equations. The command is of the following form: algorithm Newton < -initial > < -initialThenCurrent > -initial optional flag to indicate to use initial stiffness iterations -initialThenCurrent optional flag to indicate to use initial stiffness on first step, then use current stiffness for subsequent steps References Read the page at Wikipedia Theory The Newton-Raphson method is an iterative method where, starting at a good initial guess \\(x_0\\,\\!\\) we keep iterating until our convergence criteria is met with the following: \\[\\Delta x = - \\frac{df(x_n)}{dx}^{-1}f(x_n)\\,\\!\\] \\[ x_{n+1} = x_n + \\Delta x\\,\\!\\] The method is generalized to n unknowns by replacing the above scalar equations with matrix ones. \\[R(U_n+\\Delta x) = R(U_n)+\\frac{\\partial R(U_n)}{\\partial U} \\Delta U + O(\\Delta U ^2) \\,\\!\\] The matrix \\(\\frac{\\partial R(U_n)}{\\partial U}\\,\\!\\) is called the system Jacobian matrix and will be denoted \\(K\\) : \\[K = \\frac{\\partial R(U_n)}{\\partial U}\\,\\!\\] resulting in our iterative procedure where starting from a good initial guess we iterate until our convergence criteria is met with the following: \\[ \\Delta U = - K^{-1}R(U_n),\\!\\] \\[ U_{n+1} = U_n + \\Delta U\\,\\!\\] Code developed by: fmk","title":"Newton"},{"location":"library/strategy/Solution_Algorithm/418-Newton%20with%20Line%20Search/","text":"Newton with Line Search This command is used to construct a NewtonLineSearch algorithm object which introduces line search to the Newton-Raphson algorithm to solve the nonlinear residual equation. Line search increases the effectiveness of the Newton method when convergence is slow due to roughness of the residual. The command is of the following form: algorithm NewtonLineSearch < -type $typeSearch > < -tol $tol > < -maxIter $maxIter > < -minEta $minEta > < -maxEta $maxEta > typeSearch line search algorithm. optional default is InitialInterpoled . valid types are: Bisection , Secant , RegulaFalsi , InitialInterpolated tol tolerance for search. optional, defeulat = 0.8 maxIter max num of iterations to try. optional, default = 10 minEta a min \\(\\eta\\!\\) value. optional, default = 0.1 maxEta a max \\(\\eta\\!\\) value. optional, default = 10.0 Theory The rationale behind line search is that: the direction \\(\\Delta U\\,\\!\\) found by the Newton-Raphson method is often a good direction, but the step size \\(\\parallel\\Delta U\\parallel\\) is not. It is cheaper to compute the residual for several points along \\(\\Delta U\\,\\!\\) rather than form and factor a new system Jacobian In NewtonLineSearch the regular Newton-Raphson method is used to compute the \\(\\Delta U\\,\\!\\) , but the update that is used is modified. The modified update is: \\[U_{n+1} = U_n + \\eta \\Delta U\\,\\!\\] The different line search algorithms use different root finding methods to obtain \\(\\eta\\,\\!\\) , a root to the function \\(s(\\eta)\\) defined as: \\[ s(\\eta) = \\Delta U R(U_{n} + \\eta \\Delta U)\\,\\!\\] with \\[s_0 = \\Delta U R(U_n),\\!\\] Interpolated Line Search while ( \\(\\frac{s_n}{s_0}\\!\\) > tol && count < maxIter } { \\[ \\eta_{n+1} = \\frac{\\eta_n *s0}{s0 -s_{n+1}},\\!\\] } RegulaFalsi Line Search while ( \\(\\frac{s_n}{s_0}\\!\\) > tol && count < maxIter } { \\[ \\eta_{n+1} = \\eta_U - \\frac{s_U*(\\eta_L-\\eta_U)}{s_L-S_U},\\!\\] if \\(s_{n+1} * s_L < 0 \\Rightarrow \\eta_U = \\eta_{n+1}, s_U = s_{n+1},\\!\\) if \\(s_{n+1} * s_U &lt; 0 \\Rightarrow \\eta_L = \\eta_{n+1}, s_L = s_{n+1},\\!\\) } Bisection Line Search while ( \\(\\frac{s_n}{s_0}\\!\\) > tol & count < $maxIter} { \\[\\eta_{n+1} = \\frac{\\eta_L - \\eta_U}{2.0} ,\\!\\] if $s_{n+1} s_L < 0 $ > \\[\\eta_U = \\eta_{n+1},\\] > \\[s_U = s_{n+1},\\!\\] if $s_{n+1} s_U < 0 > \\[\\eta_L = \\eta_{n+1},\\] > \\[s_L = s_{n+1},\\!\\] } Secant Line Search while ( \\(\\frac{s_n}{s_0}\\!\\) > tol && count < maxIter ) { \\(\\eta_{n+1} = \\eta_j - \\frac{s_j*(\\eta_{j-1}-\\eta_j)}{s_{j-1}-S_j} ,\\!\\) if \\(s_{n+1} * s_L < 0\\) > \\(\\eta_U = \\eta_{n+1}\\) > \\(s_U = s_{n+1},\\!\\) if $ s_{n+1} * s_U$ < \\(0\\) > \\(\\eta_L = \\eta_{n+1},\\) > \\(s_L = s_{n+1},\\!\\) } References M.A. Crisfield, \u201cNonlinear Finite Element Analysis of Solids and Structures, Volume 1:Essentials\u201d, Wiley, 1991. Code Developed by: fmk","title":"Newton with Line Search"},{"location":"library/strategy/Solution_Algorithm/618-Secant%20Newton/","text":"Secant Newton This command is used to construct a SecantNewton algorithm object which uses the two-term update to accelerate the convergence of the modified newton method. The command is of the following form: algorithm SecantNewton < -iterate $tangIter > < -increment $tangIncr > < -maxDim $maxDim > tangIter tangent to iterate on, options are current, initial, noTangent. default is current. tangIncr tangent to increment on, options are current, initial, noTangent. default is current maxDim max number of iterations until the tangent is reformed and acceleration restarts (default = 3) Notes The default \u201ccut-out\u201d values recommended by Crisfield ( \\(R_1=3.5\\) , \\(R_2=0.3\\) ) are used. References Crisfield, M.A. \u201cNon-linear Finite Element Analysis of Solids and Structures\u201d, Vol. 1, Wiley, 1991. Code Developed by: Michael Scott, Oregon State University","title":"Secant Newton"},{"location":"library/strategy/Solution_Algorithm/67-Broyden/","text":"Broyden This command is used to construct a Broyden algorithm object for general unsymmetric systems which performs successive rank-one updates of the tangent at the first iteration of the current time step. algorithm Broyden < $count > count number of iterations within a time step until a new tangent is formed Code Developed by: fmk","title":"Broyden"},{"location":"library/utilities/units/","text":"units meter [\u2018m\u2019] milimeter [\u2018mm\u2019] inch [\u2018inch\u2019, \u2018in\u2019] international_foot [\u2018foot\u2019, \u2018ft\u2019] us_survey_foot [\u2018s_foot\u2019, \u2018s_ft\u2019] international_yard [\u2018yard\u2019, \u2018yd\u2019] kilogram [\u2018kg\u2019] pound_mass [\u2018lb\u2019] newton [\u2018N\u2019] pound_force [\u2018lbf\u2019] kip [\u2018kip\u2019] hertz [\u2018Hz\u2019] radian [\u2018radian\u2019, \u2018rad\u2019] arc_degree [\u2018deg\u2019]","title":"Units"},{"location":"library/utilities/recorders/","text":"Element EnvelopeElement NormElement Node Pattern Drift increments PVD VTK ElementRMS NodeRMS mpco gmsh gmshparallel GSA else if (strcmp(argv[1], display else if (strcmp(argv[1], plot else if (strcmp(argv[1], plotDifferent","title":"Index"},{"location":"library/utilities/recorders/159-Drift%20Recorder/","text":"Drift The Drift type records the displacement drift between two nodes. The drift is taken as the ratio between the prescribed relative displacement and the specified distance between the nodes. The command to create a drift recorder is: recorder Drift < -file $fileName > < -xml $fileName > < -binary $fileName > < -tcp $inetAddress $port > < -precision $nSD > < -time > -iNode $inode1 $inode2 ... -jNode $jnode1 $jnode2 ... -dof $dof1 $dof2 ... -perpDirn $perpDirn1 $perpDirn2 ... fileName name of file to which output is sent. Each line of the file contains the result for a committed state of the domain file output is either in xml format (-xml option), textual (-file option) or binary (-binary option) inetAddr ip address, \u201cxx.xx.xx.xx\u201d, of remote machine to which data is sent port port on remote machine awaiting tcp nSD number of significant digits (optional, default is 6) -time using this option places domain time in first entry of each data line (optional, default: omitted) inode1 inode2 \u2026 tags of set of i nodes for which drift is being recorded jnode1 jnode2 \u2026 tags of set of j nodes for which drift is being recorded dof1 dof2 \u2026 set of nodal degrees of freedom for which drift is being recorded. Valid range is from 1 through ndf (the number of nodal degrees of freedom). perpDirn1 perpDirn2 \u2026 set of perpendicular global directions ( 1 = \\(X\\) , 2 = \\(Y\\) , 3 = \\(Z\\) ). This input is needed to calculate the length between the nodes whose drift is calculated. NOTES Only one of -file , -xml , -binary , -tcp will be used. If multiple specified last option is used. -tcp option only available for version 2.2.1 and higher. Does not work in OpenSeesSP . Examples recorder Drift -file drift.out -time -iNode 1 2 -jNode 3 4 -dof 1 -perpDirn 2 Code Developed by: fmk","title":"Drift"},{"location":"library/utilities/recorders/205-ElementEnvelopeRecorder/","text":"ElementEnvelope The Envelope Element recorder type records the response of a number of elements at every converged step. The response recorded is element-dependent and also depends on the arguments which are passed to the setResponse() element method. When the object is terminated, through the use of a wipe , exit , or remove the object will output the min, max and absolute max values on 3 seperate lines of the output file for each quantity. recorder EnvelopeElement < -file $fileName > < -xml $fileName > < -binary $fileName > < -precision $nSD > < -time > < -closeOnWrite > < -ele ( $ele1 $ele2 ...) > < -eleRange $startEle $endEle > < -region $regTag > $arg1 $arg2 ... fileName name of file to which output is sent. file output is either in xml format (-xml option), textual (-file option) or binary (-binary option) nSD number of significant digits (optional, default is 6) -time (optional using this option places domain time in first entry of each data line, default is to have time ommitted) -closeOnWrite optional. using this option will instruct the recorder to invoke a close on the data handler after every timestep. If this is a file it will close the file on every step and then re-open it for the next step. Note, this greatly slows the execution time, but is useful if you need to monitor the data during the analysis. ele1 ele2 .. tags of elements whose response is being recorded \u2013 selected elements in domain (optional, default: omitted) startEle endEle .. tag for start and end elements whose response is being recorded \u2013 range of selected elements in domain (optional, default: omitted) regTag previously-defined tag of region of elements whose response is being recorded \u2013 region of elements in domain (optional) arg1 arg2 \u2026 arguments which are passed to the setResponse() element method RETURNS >0 an integer tag that can be used as a handle on the recorder for the remove recorder commmand. -1 recorder command failed if integer -1 returned. NOTE: The setResponse() element method is dependent on the element type, and is described with the Element Command . EXAMPLE Examples recorder Element -file Element1.out -time -ele 1 3 section 1 fiber 0.10 0.10 stressStrain Code Developed by: fmk","title":"ElementEnvelope"},{"location":"library/utilities/recorders/208-Element%20Recorder/","text":"Element The Element recorder type records the response of a number of elements at every converged step. The response recorded is element-dependent and also depends on the arguments which are passed to the setResponse() element method. The command to create an element recorder is: Model.recorder(\u201c Element \u201d, destination) destination str precision int number of significant digits (default is 6)(optional, default: records at every time step) time = False bool using this option places domain time in first entry of each data line, default is to have time omitted closeOnWrite = False bool using this option will instruct the recorder to invoke a close on the data handler after every timestep. If this is a file it will close the file on every step and then re-open it for the next step. Note, this greatly slows the execution time, but is useful if you need to monitor the data during the analysis. time_step float time interval for recording. will record when next step is deltaT greater than last recorder step. recorder Element < -file $fileName > < -xml $fileName > < -binary $fileName > < -precision $nSD > < -time > < -closeOnWrite > < -dT $deltaT > < -ele ( $ele1 $ele2 ...) > < -eleRange $startEle $endEle > < -region $regTag > $arg1 $arg2 ... fileName name of file to which output is sent. file output is either in xml format (-xml option), textual (-file option) or binary (-binary option) nSD number of significant digits (optional, default is 6) -time (optional using this option places domain time in first entry of each data line, default is to have time ommitted) -closeOnWrite optional. using this option will instruct the recorder to invoke a close on the data handler after every timestep. If this is a file it will close the file on every step and then re-open it for the next step. Note, this greatly slows the execution time, but is useful if you need to monitor the data during the analysis. deltaT time interval for recording. will record when next step is deltaT greater than last recorder step. (optional, default: records at every time step) ele1 ele2 \u2026 tags of elements whose response is being recorded \u2013 selected elements in domain (optional, default: omitted) startEle endEle .. tag for start and end elements whose response is being recorded \u2013 range of selected elements in domain (optional, default: omitted) regTag previously-defined tag of region of elements whose response is being recorded \u2013 region of elements in domain (optional) arg1 arg2 \u2026 arguments which are passed to the setResponse() element method RETURNS >0 an integer tag that can be used as a handle on the recorder for the remove recorder commmand. -1 recorder command failed if integer -1 returned. NOTE: The setResponse() element method is dependent on the element type, and is described with the Element Command . EXAMPLE Examples recorder Element -file Element1.out -time -ele 1 3 -section 1 -fiber 0.10 0.10 stressStrain Code Developed by: fmk","title":"Element"},{"location":"library/utilities/recorders/430-Node%20Envelope%20Recorder/","text":"Node Envelope Recorder The EnvelopeNode recorder type records the min, max and absolute max of a number of nodal response quantaties. The command to create a node envelope recorder is: recorder EnvelopeNode < -file $fileName > < -xml $fileName > < -precision $nSD > < -time > < -closeOnWrite > < -timeSeries $tsTag > < -node $node1 $node2 ... > < -nodeRange $startNode $endNode > < -region $regionTag > -dof ( $dof1 $dof2 ...) $respType fileName name of file to which output is sent. file output is either in xml format (-xml option), textual (-file option) or binary (-binary option) nSD number of significant digits (optional, default is 6) -time (optional using this option places domain time in first entry of each data line, default is to have time ommitted) -closeOnWrite optional. using this option will instruct the recorder to invoke a close on the data handler after every timestep. If this is a file it will close the file on every step and then re-open it for the next step. Note, this greatly slows the execution time, but is useful if you need to monitor the data during the analysis. tsTag the tag of a previously constructed TimeSeries, results from node at each time step are added to load factor from series node1 node2 .. tags of nodes whose response is being recorded (optional, default: omitted) startNode endNode .. tag for start and end nodes whose response is being recorded (optional, default: omitted) regionTag a region tag; to specify all nodes in the previously defined region. (optional) dof1 dof2 \u2026 the specified dof at the nodes whose response is requested. respType a string indicating response required. Response types are given in table below. disp displacement* vel velocity* accel acceleration* incrDisp incremental displacement \u201ceigen i\u201d eigenvector for mode i reaction nodal reaction RETURNS >0 an integer tag that can be used as a handle on the recorder for the remove recorder commmand. -1 recorder command failed if integer -1 returned. Examples recorder EnvelopeNode -file nodesD.out -time -node 1 2 3 4 -dof 1 2 disp recorder EnvelopeNode -file nodesA.out -time -timeSeries 1 -node 1 2 3 4 -dof 1 accel Code Developed by: fmk","title":"Node Envelope Recorder"},{"location":"library/utilities/recorders/431-Node%20Recorder/","text":"Node The Node recorder type records the response of a number of nodes at every converged step. The command to create a node recorder is: Model.recorder(\u201c Node \u201d, destination, recorder) destination str precision int number of significant digits (default is 6)(optional, default: records at every time step) time = False bool using this option places domain time in first entry of each data line, default is to have time omitted closeOnWrite = False bool using this option will instruct the recorder to invoke a close on the data handler after every timestep. If this is a file it will close the file on every step and then re-open it for the next step. Note, this greatly slows the execution time, but is useful if you need to monitor the data during the analysis. time_step float time interval for recording. will record when next step is deltaT greater than last recorder step. series Ref(TimeSeries) the tag of a previously constructed TimeSeries , results from node at each time step are added to load factor from series nodes [nodes1] , tags of nodes whose response is being recorded (optional, default: omitted) nodes1 Ref(node) dofs [dofs] , the specified dof at the nodes whose response is requested. dofs int recorder str a string indicating response required. Response types are given in table below. disp displacement* vel velocity* accel acceleration* incrDisp incremental displacement eigen {i} eigenvector for mode i reaction nodal reaction rayleighForces damping forces recorder Node < -file $fileName > < -xml $fileName > < -binary $fileName > < -tcp $inetAddress $port > < -precision $nSD > < -timeSeries $tsTag > < -time > < -dT $deltaT > < -closeOnWrite > < -node $node1 $node2 ... > < -nodeRange $startNode $endNode > < -region $regionTag > -dof ( $dof1 $dof2 ...) $respType fileName name of file to which output is sent. file output is either in xml format ( -xml option), plain text ( -file option) or binary ( -binary option). inetAddr ip address, xx.xx.xx.xx , of remote machine to which data is sent port port on remote machine awaiting tcp nSD number of significant digits (optional, default is 6) -time optional, using this option places domain time in first entry of each data line, default is to have time ommitted -closeOnWrite optional. using this option will instruct the recorder to invoke a close on the data handler after every timestep. If this is a file it will close the file on every step and then re-open it for the next step. Note, this greatly slows the execution time, but is useful if you need to monitor the data during the analysis. deltaT time interval for recording. will record when next step is deltaT greater than last recorder step. (optional, default: records at every time step) tsTag the tag of a previously constructed TimeSeries, results from node at each time step are added to load factor from series node1 node2 .. tags of nodes whose response is being recorded (optional, default: omitted) startNode endNode .. tag for start and end nodes whose response is being recorded (optional, default: omitted) regionTag a region tag; to specify all nodes in the previously defined region. (optional) dof1 dof2 \u2026 the specified dof at the nodes whose response is requested. respType a string indicating response required. Response types are given in table below. disp displacement* vel velocity* accel acceleration* incrDisp incremental displacement \u201ceigen i\u201d eigenvector for mode i reaction nodal reaction rayleighForces damping forces RETURNS >0 an integer tag that can be used as a handle on the recorder for the remove recorder commmand. -1 recorder command failed if integer -1 returned. NOTES Only one of -file , -xml , -binary , -tcp will be used. If multiple specified last option is used. -tcp option only available for version 2.2.1 and higher. In case you want to remove a recorder you need to know the tag for that recorder. Here is an example on how to get the tag of a recorder: set tagRc [recorder Node -file nodesD.out -time -node 1 2 3 4 -dof 1 2 disp] EXAMPLES Generates output file nodesD.out that contains relative displacements in \\(x\\) and \\(y\\) direction at nodes 1, 2, 3, and 4. The output file will contain 9 columns (time, disp. in x at node 1, disp. in y at node 1, \u2026 , disp. in y at node 4)) recorder Node -file nodesD.out -time -node 1 2 3 4 -dof 1 2 disp; For a UniformExcitation analysis, this command generates output file nodesA.out that contains absolute accelerations (ground motion acceleration + relative acceleration) in x direction for nodes 1, 2, 3, and 4. NOTE that if no TimeSeries is provided and a uniform excitation analysis is performed, the relative accelerations are recorded. recorder Node -file nodesA.out -timeSeries 1 -time -node 1 2 3 4 -dof 1 accel; Code Developed by: fmk","title":"Node"},{"location":"library/utilities/recorders/517-Plot%20Recorder/","text":"Plot Recorder This recorder type opens a graphical window for the plotting of the contents of the prescribed file. The prescribed file can be the output of an other recorder. recorder plot $fileName $windowTitle $xLoc $yLoc $xPixels $yPixels -columns $xCol0 $yCol0 &lt;-columns $xCol1 $yCol1 &gt; ... fileName name of file from which data will be read windowTitle title of window to be opened xLoc yLoc xLoc , yLoc specifies location on screen of top left corner of window xPixels yPixels xPixels , yPixels specifies width and height in pixels of window to open xCol yCol \u2026 integers specifying which columns to plot for \\(x\\) and \\(y\\) axis. NOTES At least one set of columns must be specified, additional ones may be specified. the only way to save the image is a screen capture. Examples recorder Plot node.out \"Nodal Displacement\" 10 10 400 400 -columns 1 2 Code Developed by: fmk","title":"Plot Recorder"},{"location":"package/01_starting/","text":"Getting Started A simulation with opensees is generally configured in the following steps: Modeling : This consists of defining a collection of mathematical abstractions and their relationships with the objective of representing some phenomenon. This generally includes creating Element , Node , LoadPattern and Constraint objects that define the model. Analysis : Once a model is defined, the next step is to create an Analysis. Some common analysis routines are the following: Static Analysis Load or displacement controlled Spectral Decomposition Transient Direct Integration Transient Modal Integration Moment-Curvature Analysis Ultimate N-M Surface Analysis These routines are configured and refined in terms of analysis abstractions which generally may include an Integrator , SolutionAlgorithm , and ConstraintHandler strategy. Post-processing : Once the model and analysis have been defined, the user has the option of specifying what is to be monitored during the analysis. This, for example, could be the displacement history at a node or internal state of an element in a transient analysis or the entire state of the model at each step in the solution procedure. Several Recorder objects are created to store what the user wants to examine. Runtime and Numerics : When working on advanced problems, fine-grained control over details such as the analysis runtime, parallelization, and numeric strategies becomes important. Numerics : when the computational cost of an analysis becomes prohibitive, selecting the right numeric strategy can be important. Refinements typically consist of choosing an appropriate linear or eigenvalue solver which appropriatly accounts for the structure of a linear system. Parallelization may also be considered.","title":"Getting Started"},{"location":"package/03_simulation/","text":"Basic Simulation Build the model model dimensions and degrees-of-freedom nodal coordinates nodal constraints, boundary conditions nodal masses elements and element connectivity recorders for output Define & apply gravity load nodal or element load static-analysis parameters (tolerances & load increments) analyze hold gravity loads constant reset time to zero Define and apply lateral load load pattern (nodal loads for static analysis, support ground motion for earthquake) lateral-analysis parameters (tolerances & displacement/time increments) Static Lateral-Load Analysis define the displacement increments and displacement path Dynamic Lateral-Load Analysis define the input motion and all associated parameters, such as scaling and input type define analysis duration and time increment define damping analyze","title":"Basic Simulation"},{"location":"package/04_runtime/","text":"Runtime record recorder printModel POST render.elastica(model, displ): ... MODLEING (MOVE TO LIBRARY?) remove setElementRayleighDampingFactors modalDamping ANALYSIS? def eig(model, number, ** runtime) -> (freq, displ): ... def rha(model, pattern, ** runtime) -> (): ... def rt.incr( self , model, pattern, force | displ =< float > ) sdfResponse InitialStateAnalysis systemSize getLoadFactor testIter testNorm numFact numIter - loadConst ? setNumthread getNumthread Runtime [ getTime ] setTime setNodeCoord setNodeDisp setNodeVel setNodeAccel reactions setPrecision updateElementDomain updateMaterialStage reset wipe wipeAnalysis Utilities convertBinaryToText convertTextToBinary stripXML restore save database sectionForce sectionDeformation sectionStiffness sectionFlexibility sectionLocation sectionWeight getEleTags eleDynamicalForce eleForce eleNodes eleResponse basicDeformation basicForce basicStiffness getNodeTags nodeDisp nodeAccel nodeVel nodeBounds nodeCoord nodeEigenvector nodeDOFs nodeMass nodePressure nodeReaction nodeResponse nodeUnbalance printA printB printGID version logFile","title":"Runtime"},{"location":"package/cli/","text":"Command Line Use","title":"Command Line Use"},{"location":"package/install/","text":"Installing OpenSeesRT is distributed primarily as a Python package. For users familiar with Anaconda, the preferred way to install is by running the following command: conda install -c opensees opensees Packages are also provided on PyPi.org and can be installed with the command: pip install opensees New to Python For users that are new to Python, the following links can be used to install Python: Windows Store Other usefull tools include: VS Code A good cross-platform application for writing scripts","title":"Installing"},{"location":"package/io/tcl/","text":"opensees.tcl Module Reading Generating (emitting) def dumps( object ) -> str : ... Interpreting","title":"`opensees.tcl` Module"},{"location":"package/objects/","text":"Object oriented interfaces Object oriented interfaces are available for the following types: Element SectionForceDeformation UniaxialMaterial NdMaterial Node HystereticBackbone","title":"Object oriented interfaces"},{"location":"package/objects/01_BasicModel/","text":"Basic Model","title":"Basic Model"},{"location":"package/objects/UniaxialMaterial/","text":"UniaxialMaterial","title":"UniaxialMaterial"}]}